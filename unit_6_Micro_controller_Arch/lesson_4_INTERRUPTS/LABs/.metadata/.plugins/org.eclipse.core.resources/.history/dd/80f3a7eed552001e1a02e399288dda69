/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>

/*GPIOA Register*/
#define GPIOA_BASE 0x40010800
#define GPIOA_CRH *(volatile uint32_t *)(GPIOA_BASE + 0x04)
#define GPIOA_ODR *(volatile uint32_t *)(GPIOA_BASE + 0x0C)
#define GPIOA_CRL *(volatile uint32_t *)(GPIOA_BASE + 0x00)
#define IOPAEN			(1 << 2)

/*Clock Register*/
#define RCC_BASE 0x40021000
#define RCC_APB2ENR *(volatile uint32_t *)(RCC_BASE + 0x18)

/*EXTI Registers*/
#define EXTI_BASE 0x40010400
#define EXTI_IMR *(volatile uint32_t *)(EXTI_BASE + 0x00)
#define EXTI_RTSR *(volatile uint32_t *)(EXTI_BASE + 0x08)
#define EXTI_PR *(volatile uint32_t *)(EXTI_BASE + 0x14)

#define AFIO_BASE 0x40010000
#define AFIO_EXTICR1 *(volatile uint32_t *)(AFIO_BASE + 0x08)


/*Functions declarations*/
void clock_init();
void GPIO_init();
void interrupt_init();


int main(void)
{
	GPIO_init();
	clock_init();
	interrupt_init();

	while(1);
	return 0;
}


//Init Clock
void clock_init(void)
{
	/*Enable GPIO_A*/
	RCC_APB2ENR |= IOPAEN;
	/*Enable AFIO*/
	RCC_APB2ENR |= (1 << 0)
}



//Init GPIOA
void GPIO_init(void)
{
	GPIOA_CRH &= 0xFF0FFFFF;
	GPIOA_CRH |= 0x00200000;

	GPIOA_CRL |=  (1<<2);
}

//Init interrupt
void interrupt_init(void)
{
	EXTI_IMR |= (1<<0);
	EXTI_RTSR |= (1<<0);
	AFIO_EXTICR1=0;
}


void EXTI0_IRQHandler(void)
{
	/*Toggle the LED*/
	GPIOA_ODR ^= PA13;

	/*Acknowledge the intterupt by writting 1 to the register*/
	EXTI_PR |= (1 << 0);
}

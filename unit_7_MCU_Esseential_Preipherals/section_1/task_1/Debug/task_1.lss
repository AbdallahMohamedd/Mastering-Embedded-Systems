
task_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000162  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000162  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000194  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063d  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  0000082d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000277  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  0000102c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000035e  00000000  00000000  00001060  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  000013be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001496  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define F_CPU 8000000UL
#include <avr/io.h>
#include "util/delay.h"

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	volatile int i = 0 ;
  76:	1a 82       	std	Y+2, r1	; 0x02
  78:	19 82       	std	Y+1, r1	; 0x01
	PORTA =0b11111111;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	8b bb       	out	0x1b, r24	; 27
    while (1) 
    {
		DDRA |= (1<<i);
  7e:	29 81       	ldd	r18, Y+1	; 0x01
  80:	3a 81       	ldd	r19, Y+2	; 0x02
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	90 e0       	ldi	r25, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <main+0x20>
  88:	88 0f       	add	r24, r24
  8a:	99 1f       	adc	r25, r25
  8c:	2a 95       	dec	r18
  8e:	e2 f7       	brpl	.-8      	; 0x88 <main+0x1c>
  90:	9a b3       	in	r25, 0x1a	; 26
  92:	89 2b       	or	r24, r25
  94:	8a bb       	out	0x1a, r24	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	2f ef       	ldi	r18, 0xFF	; 255
  98:	84 e3       	ldi	r24, 0x34	; 52
  9a:	9c e0       	ldi	r25, 0x0C	; 12
  9c:	21 50       	subi	r18, 0x01	; 1
  9e:	80 40       	sbci	r24, 0x00	; 0
  a0:	90 40       	sbci	r25, 0x00	; 0
  a2:	e1 f7       	brne	.-8      	; 0x9c <main+0x30>
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <main+0x3a>
  a6:	00 00       	nop
		_delay_ms(500);
		i++;
  a8:	89 81       	ldd	r24, Y+1	; 0x01
  aa:	9a 81       	ldd	r25, Y+2	; 0x02
  ac:	01 96       	adiw	r24, 0x01	; 1
  ae:	9a 83       	std	Y+2, r25	; 0x02
  b0:	89 83       	std	Y+1, r24	; 0x01
		if(i==8)
  b2:	89 81       	ldd	r24, Y+1	; 0x01
  b4:	9a 81       	ldd	r25, Y+2	; 0x02
  b6:	08 97       	sbiw	r24, 0x08	; 8
  b8:	11 f7       	brne	.-60     	; 0x7e <main+0x12>
		{
			i = 7;
  ba:	87 e0       	ldi	r24, 0x07	; 7
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	9a 83       	std	Y+2, r25	; 0x02
  c0:	89 83       	std	Y+1, r24	; 0x01
			for(;;i--)
			{
			DDRA &= ~(1<<i);
  c2:	29 81       	ldd	r18, Y+1	; 0x01
  c4:	3a 81       	ldd	r19, Y+2	; 0x02
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <main+0x64>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	2a 95       	dec	r18
  d2:	e2 f7       	brpl	.-8      	; 0xcc <main+0x60>
  d4:	80 95       	com	r24
  d6:	90 95       	com	r25
  d8:	9a b3       	in	r25, 0x1a	; 26
  da:	89 23       	and	r24, r25
  dc:	8a bb       	out	0x1a, r24	; 26
  de:	2f ef       	ldi	r18, 0xFF	; 255
  e0:	84 e3       	ldi	r24, 0x34	; 52
  e2:	9c e0       	ldi	r25, 0x0C	; 12
  e4:	21 50       	subi	r18, 0x01	; 1
  e6:	80 40       	sbci	r24, 0x00	; 0
  e8:	90 40       	sbci	r25, 0x00	; 0
  ea:	e1 f7       	brne	.-8      	; 0xe4 <main+0x78>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x82>
  ee:	00 00       	nop
			_delay_ms(500);	
			if(i<0)
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	9a 81       	ldd	r25, Y+2	; 0x02
  f4:	99 23       	and	r25, r25
  f6:	1c f4       	brge	.+6      	; 0xfe <main+0x92>
			{
				i=0;
  f8:	1a 82       	std	Y+2, r1	; 0x02
  fa:	19 82       	std	Y+1, r1	; 0x01
				break;
  fc:	c0 cf       	rjmp	.-128    	; 0x7e <main+0x12>
		_delay_ms(500);
		i++;
		if(i==8)
		{
			i = 7;
			for(;;i--)
  fe:	89 81       	ldd	r24, Y+1	; 0x01
 100:	9a 81       	ldd	r25, Y+2	; 0x02
 102:	01 97       	sbiw	r24, 0x01	; 1
 104:	9a 83       	std	Y+2, r25	; 0x02
 106:	89 83       	std	Y+1, r24	; 0x01
			if(i<0)
			{
				i=0;
				break;
			}
			}
 108:	dc cf       	rjmp	.-72     	; 0xc2 <main+0x56>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>

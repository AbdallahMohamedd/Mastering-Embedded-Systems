
task_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000063d  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000588  00000000  00000000  00000835  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000283  00000000  00000000  00000dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001040  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000357  00000000  00000000  00001074  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  000013cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#define RESET_BIT(address, bit) address &= ~(1 << bit)
#define TOGGEL_BIT(address, bit) address ^= (1 << bit)
#define READ_BIT(address, bit) ((address & (1 << bit)) >> bit)

int main(void)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <main+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
	volatile int i = 0;
  76:	1a 82       	std	Y+2, r1	; 0x02
  78:	19 82       	std	Y+1, r1	; 0x01
	DDRA = 0b11111111;
  7a:	8f ef       	ldi	r24, 0xFF	; 255
  7c:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0b00000000;
  7e:	14 ba       	out	0x14, r1	; 20
	PORTC = 0b00000001;
  80:	81 e0       	ldi	r24, 0x01	; 1
  82:	85 bb       	out	0x15, r24	; 21
	while (1)
	{
		if (!READ_BIT(PINC, 0)) // press
  84:	98 99       	sbic	0x13, 0	; 19
  86:	fe cf       	rjmp	.-4      	; 0x84 <main+0x18>
		{
			SET_BIT(PORTA, i);
  88:	29 81       	ldd	r18, Y+1	; 0x01
  8a:	3a 81       	ldd	r19, Y+2	; 0x02
  8c:	81 e0       	ldi	r24, 0x01	; 1
  8e:	90 e0       	ldi	r25, 0x00	; 0
  90:	02 c0       	rjmp	.+4      	; 0x96 <main+0x2a>
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	2a 95       	dec	r18
  98:	e2 f7       	brpl	.-8      	; 0x92 <main+0x26>
  9a:	9b b3       	in	r25, 0x1b	; 27
  9c:	89 2b       	or	r24, r25
  9e:	8b bb       	out	0x1b, r24	; 27
			i++;
  a0:	89 81       	ldd	r24, Y+1	; 0x01
  a2:	9a 81       	ldd	r25, Y+2	; 0x02
  a4:	01 96       	adiw	r24, 0x01	; 1
  a6:	9a 83       	std	Y+2, r25	; 0x02
  a8:	89 83       	std	Y+1, r24	; 0x01
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  aa:	2f ef       	ldi	r18, 0xFF	; 255
  ac:	84 e3       	ldi	r24, 0x34	; 52
  ae:	9c e0       	ldi	r25, 0x0C	; 12
  b0:	21 50       	subi	r18, 0x01	; 1
  b2:	80 40       	sbci	r24, 0x00	; 0
  b4:	90 40       	sbci	r25, 0x00	; 0
  b6:	e1 f7       	brne	.-8      	; 0xb0 <main+0x44>
  b8:	00 c0       	rjmp	.+0      	; 0xba <main+0x4e>
  ba:	00 00       	nop
			_delay_ms(500);
			if (i == 8)
  bc:	89 81       	ldd	r24, Y+1	; 0x01
  be:	9a 81       	ldd	r25, Y+2	; 0x02
  c0:	08 97       	sbiw	r24, 0x08	; 8
  c2:	01 f7       	brne	.-64     	; 0x84 <main+0x18>
			{
				i = 7;
  c4:	87 e0       	ldi	r24, 0x07	; 7
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	9a 83       	std	Y+2, r25	; 0x02
  ca:	89 83       	std	Y+1, r24	; 0x01
				while (i >= 0)
  cc:	1e c0       	rjmp	.+60     	; 0x10a <main+0x9e>
				{
					if (!READ_BIT(PINC, 0))
  ce:	98 99       	sbic	0x13, 0	; 19
  d0:	1c c0       	rjmp	.+56     	; 0x10a <main+0x9e>
					{
						RESET_BIT(PORTA, i);
  d2:	29 81       	ldd	r18, Y+1	; 0x01
  d4:	3a 81       	ldd	r19, Y+2	; 0x02
  d6:	81 e0       	ldi	r24, 0x01	; 1
  d8:	90 e0       	ldi	r25, 0x00	; 0
  da:	02 c0       	rjmp	.+4      	; 0xe0 <main+0x74>
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	2a 95       	dec	r18
  e2:	e2 f7       	brpl	.-8      	; 0xdc <main+0x70>
  e4:	80 95       	com	r24
  e6:	90 95       	com	r25
  e8:	9b b3       	in	r25, 0x1b	; 27
  ea:	89 23       	and	r24, r25
  ec:	8b bb       	out	0x1b, r24	; 27
						i--;
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	01 97       	sbiw	r24, 0x01	; 1
  f4:	9a 83       	std	Y+2, r25	; 0x02
  f6:	89 83       	std	Y+1, r24	; 0x01
  f8:	2f ef       	ldi	r18, 0xFF	; 255
  fa:	84 e3       	ldi	r24, 0x34	; 52
  fc:	9c e0       	ldi	r25, 0x0C	; 12
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <main+0x92>
 106:	00 c0       	rjmp	.+0      	; 0x108 <main+0x9c>
 108:	00 00       	nop
			i++;
			_delay_ms(500);
			if (i == 8)
			{
				i = 7;
				while (i >= 0)
 10a:	89 81       	ldd	r24, Y+1	; 0x01
 10c:	9a 81       	ldd	r25, Y+2	; 0x02
 10e:	99 23       	and	r25, r25
 110:	f4 f6       	brge	.-68     	; 0xce <main+0x62>
 112:	b8 cf       	rjmp	.-144    	; 0x84 <main+0x18>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>

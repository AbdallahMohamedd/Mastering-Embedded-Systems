/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2023 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
#warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif
#include <stdint.h>
#include <stdlib.h>
#include <stdio.h>


#define SET_BIT(address, bit) address |= (1<<bit)
#define RESET_BIT(address, bit) address &= ~(1<<bit)
#define TOGGEL_BIT(address, bit) address ^= (1<<bit)
#define READ_BIT(address, bit) ((address & (1<<bit))>>bit)

/*GPIOA Register*/
#define GPIOA_BASE 0x40010800
#define GPIOA_CRL *(volatile uint32_t *)(GPIOA_BASE+0x00)
#define GPIOA_CRH *(volatile uint32_t *)(GPIOA_BASE+0x04)
#define GPIOA_IDR *(volatile uint32_t *)(GPIOA_BASE+0x08)
#define GPIOA_ODR *(volatile uint32_t *)(GPIOA_BASE+0x0C)
#define GPIOA_BSRR *(volatile uint32_t *)(GPIOA_BASE+0x10)
#define GPIOA_BRR *(volatile uint32_t *)(GPIOA_BASE+0x14)
#define GPIOA_LCKR *(volatile uint32_t *)(GPIOA_BASE+0x18)

#define GPIOB_BASE 0x40010C00
#define GPIOB_CRL *(volatile uint32_t *)(GPIOB_BASE+0x00)
#define GPIOB_CRH *(volatile uint32_t *)(GPIOB_BASE+0x04)
#define GPIOB_IDR *(volatile uint32_t *)(GPIOB_BASE+0x08)
#define GPIOB_ODR *(volatile uint32_t *)(GPIOB_BASE+0x0C)
#define GPIOB_BSRR *(volatile uint32_t *)(GPIOB_BASE+0x10)
#define GPIOB_BRR *(volatile uint32_t *)(GPIOB_BASE+0x14)
#define GPIOB_LCKR *(volatile uint32_t *)(GPIOB_BASE+0x18)


/*Clock Register*/
#define RCC_BASE 0x40021000
#define RCC_APB2ENR *(volatile uint32_t *)(RCC_BASE + 0x18)

/*Functions declarations*/
void clock_init();
void GPIO_init();
void wait_ms(uint32_t);

int main(void)
{
	GPIO_init();
	clock_init();
	while(1)
	{
		if(!READ_BIT(GPIOA_IDR,1))
		{
			TOGGEL_BIT(GPIOB_ODR,1);
			while(!READ_BIT(GPIOA_IDR,1));
		}
		if(READ_BIT(GPIOA_IDR,13))
		{
			TOGGEL_BIT(GPIOB_ODR,13);
		}
		wait_ms(1);
	}
	return 0;
}




//Init Clock
void clock_init(void)
{
	SET_BIT(RCC_APB2ENR,2); //enable clock for port A
	SET_BIT(RCC_APB2ENR,3);//enable clock for port B
}


//Init GPIOA
void GPIO_init(void)
{
	/*set GPIOPA1 as an input to toggel led on GBIOPB1 "Bush/Pull"*/
	//MODEB1 == 01: Output mode, max speed 10 MHz IN 4,5 BITS
	//CNFB1 == 00 : General purpose output push-pull IN 6,7 BITS
	SET_BIT(GPIOB_CRL,4);
	RESET_BIT(GPIOB_CRL,5);
	RESET_BIT(GPIOB_CRL,6);
	RESET_BIT(GPIOB_CRL,7);
	//MODEA1 == 00: Input mode (reset state) IN 4,5 BITS
	//CNFA1 == 01: Floating input (reset state) IN 6,7 BITS
	RESET_BIT(GPIOA_CRL,4);
	RESET_BIT(GPIOA_CRL,5);
	SET_BIT(GPIOA_CRL,6);
	RESET_BIT(GPIOA_CRL,7);



	/*set GPIOPA13 as an input to toggel led on GBIOPB13 "Bush/Pull"*/
	//MODEB13 == 01: Output mode, max speed 10 MHz IN 20,21 BITS
	//CNFB13 == 00 : General purpose output push-pull IN 22,23 BITS
	SET_BIT(GPIOB_CRH,20);
	RESET_BIT(GPIOB_CRH,21);
	RESET_BIT(GPIOB_CRH,22);
	RESET_BIT(GPIOB_CRH,23);
	//MODEA13 == 00: Input mode (reset state) IN 20,21 BITS
	//CNFA13 == 01: Floating input (reset state) IN 22,23 BITS
	RESET_BIT(GPIOA_CRH,20);
	RESET_BIT(GPIOA_CRH,21);
	SET_BIT(GPIOA_CRH,22);
	RESET_BIT(GPIOA_CRH,23);
}

void wait_ms(uint32_t time)
{
	uint32_t i, j;
	for(i=0; i<time; i++)
		for(j=0;j<255;j++);
}

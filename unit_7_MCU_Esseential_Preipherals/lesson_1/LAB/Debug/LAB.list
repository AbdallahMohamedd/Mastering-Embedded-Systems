
LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000264  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000394  0800039c  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000394  08000394  0001039c  2**0
                  CONTENTS
  4 .ARM          00000000  08000394  08000394  0001039c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000394  0800039c  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000394  08000394  00010394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000398  08000398  00010398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001039c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800039c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800039c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0001039c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009fd  00000000  00000000  000103c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001ab  00000000  00000000  00010dc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000000c0  00000000  00000000  00010f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000058  00000000  00000000  00011030  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000040  00000000  00000000  00011088  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001d44  00000000  00000000  000110c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000657  00000000  00000000  00012e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008206  00000000  00000000  00013463  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b669  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000009c  00000000  00000000  0001b6e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	0800037c 	.word	0x0800037c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	0800037c 	.word	0x0800037c

08000170 <main>:
/*Functions declarations*/
void clock_init();
void GPIO_init();

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
	clock_init();
 8000176:	f000 f831 	bl	80001dc <clock_init>
	GPIO_init();
 800017a:	f000 f843 	bl	8000204 <GPIO_init>
	while(1)
	{
		if(READ_BIT(GPIOA_IDR,1)==0)
 800017e:	4b15      	ldr	r3, [pc, #84]	; (80001d4 <main+0x64>)
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	f003 0302 	and.w	r3, r3, #2
 8000186:	2b00      	cmp	r3, #0
 8000188:	d10c      	bne.n	80001a4 <main+0x34>
		{
			TOGGEL_BIT(GPIOB_ODR,1);
 800018a:	4b13      	ldr	r3, [pc, #76]	; (80001d8 <main+0x68>)
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4a12      	ldr	r2, [pc, #72]	; (80001d8 <main+0x68>)
 8000190:	f083 0302 	eor.w	r3, r3, #2
 8000194:	6013      	str	r3, [r2, #0]
			while(READ_BIT(GPIOA_IDR,1)==0);
 8000196:	bf00      	nop
 8000198:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <main+0x64>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	f003 0302 	and.w	r3, r3, #2
 80001a0:	2b00      	cmp	r3, #0
 80001a2:	d0f9      	beq.n	8000198 <main+0x28>
		}

		if(READ_BIT(GPIOA_IDR,13)==1)
 80001a4:	4b0b      	ldr	r3, [pc, #44]	; (80001d4 <main+0x64>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	0b5b      	lsrs	r3, r3, #13
 80001aa:	f003 0301 	and.w	r3, r3, #1
 80001ae:	2b01      	cmp	r3, #1
 80001b0:	d105      	bne.n	80001be <main+0x4e>
		{
			TOGGEL_BIT(GPIOB_ODR,13);
 80001b2:	4b09      	ldr	r3, [pc, #36]	; (80001d8 <main+0x68>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	4a08      	ldr	r2, [pc, #32]	; (80001d8 <main+0x68>)
 80001b8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001bc:	6013      	str	r3, [r2, #0]
		}
		for(int i = 0;  i < 700; i++);
 80001be:	2300      	movs	r3, #0
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	e002      	b.n	80001ca <main+0x5a>
 80001c4:	687b      	ldr	r3, [r7, #4]
 80001c6:	3301      	adds	r3, #1
 80001c8:	607b      	str	r3, [r7, #4]
 80001ca:	687b      	ldr	r3, [r7, #4]
 80001cc:	f5b3 7f2f 	cmp.w	r3, #700	; 0x2bc
 80001d0:	dbf8      	blt.n	80001c4 <main+0x54>
		if(READ_BIT(GPIOA_IDR,1)==0)
 80001d2:	e7d4      	b.n	800017e <main+0xe>
 80001d4:	40010808 	.word	0x40010808
 80001d8:	40010c0c 	.word	0x40010c0c

080001dc <clock_init>:



//Init Clock
void clock_init(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
	SET_BIT(APB2ENR,2); //enable clock for port A
 80001e0:	4b07      	ldr	r3, [pc, #28]	; (8000200 <clock_init+0x24>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a06      	ldr	r2, [pc, #24]	; (8000200 <clock_init+0x24>)
 80001e6:	f043 0304 	orr.w	r3, r3, #4
 80001ea:	6013      	str	r3, [r2, #0]
	SET_BIT(APB2ENR,3);//enable clock for port B
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <clock_init+0x24>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	4a03      	ldr	r2, [pc, #12]	; (8000200 <clock_init+0x24>)
 80001f2:	f043 0308 	orr.w	r3, r3, #8
 80001f6:	6013      	str	r3, [r2, #0]
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr
 8000200:	40021018 	.word	0x40021018

08000204 <GPIO_init>:


//Init GPIOA
void GPIO_init(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	/*set GPIOPA1 as an input to toggel led on GBIOPB1 "Bush/Pull"*/
	//MODEB1 == 01: Output mode, max speed 10 MHz IN 4,5 BITS
	//CNFB1 == 00 : General purpose output push-pull IN 6,7 BITS
	SET_BIT(GPIOB_CRL,4);
 8000208:	4b31      	ldr	r3, [pc, #196]	; (80002d0 <GPIO_init+0xcc>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	4a30      	ldr	r2, [pc, #192]	; (80002d0 <GPIO_init+0xcc>)
 800020e:	f043 0310 	orr.w	r3, r3, #16
 8000212:	6013      	str	r3, [r2, #0]
	RESET_BIT(GPIOB_CRL,5);
 8000214:	4b2e      	ldr	r3, [pc, #184]	; (80002d0 <GPIO_init+0xcc>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	4a2d      	ldr	r2, [pc, #180]	; (80002d0 <GPIO_init+0xcc>)
 800021a:	f023 0320 	bic.w	r3, r3, #32
 800021e:	6013      	str	r3, [r2, #0]
	RESET_BIT(GPIOB_CRL,6);
 8000220:	4b2b      	ldr	r3, [pc, #172]	; (80002d0 <GPIO_init+0xcc>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a2a      	ldr	r2, [pc, #168]	; (80002d0 <GPIO_init+0xcc>)
 8000226:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800022a:	6013      	str	r3, [r2, #0]
	RESET_BIT(GPIOB_CRL,7);
 800022c:	4b28      	ldr	r3, [pc, #160]	; (80002d0 <GPIO_init+0xcc>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a27      	ldr	r2, [pc, #156]	; (80002d0 <GPIO_init+0xcc>)
 8000232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000236:	6013      	str	r3, [r2, #0]
	//MODEA1 == 00: Input mode (reset state) IN 4,5 BITS
	//CNFA1 == 01: Floating input (reset state) IN 6,7 BITS
	RESET_BIT(GPIOA_CRL,4);
 8000238:	4b26      	ldr	r3, [pc, #152]	; (80002d4 <GPIO_init+0xd0>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a25      	ldr	r2, [pc, #148]	; (80002d4 <GPIO_init+0xd0>)
 800023e:	f023 0310 	bic.w	r3, r3, #16
 8000242:	6013      	str	r3, [r2, #0]
	RESET_BIT(GPIOA_CRL,5);
 8000244:	4b23      	ldr	r3, [pc, #140]	; (80002d4 <GPIO_init+0xd0>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a22      	ldr	r2, [pc, #136]	; (80002d4 <GPIO_init+0xd0>)
 800024a:	f023 0320 	bic.w	r3, r3, #32
 800024e:	6013      	str	r3, [r2, #0]
	SET_BIT(GPIOA_CRL,6);
 8000250:	4b20      	ldr	r3, [pc, #128]	; (80002d4 <GPIO_init+0xd0>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a1f      	ldr	r2, [pc, #124]	; (80002d4 <GPIO_init+0xd0>)
 8000256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800025a:	6013      	str	r3, [r2, #0]
	RESET_BIT(GPIOA_CRL,7);
 800025c:	4b1d      	ldr	r3, [pc, #116]	; (80002d4 <GPIO_init+0xd0>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	4a1c      	ldr	r2, [pc, #112]	; (80002d4 <GPIO_init+0xd0>)
 8000262:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000266:	6013      	str	r3, [r2, #0]


	/*set GPIOPA13 as an input to toggel led on GBIOPB13 "Bush/Pull"*/
	//MODEB13 == 01: Output mode, max speed 10 MHz IN 20,21 BITS
	//CNFB13 == 00 : General purpose output push-pull IN 22,23 BITS
	SET_BIT(GPIOB_CRH,20);
 8000268:	4b1b      	ldr	r3, [pc, #108]	; (80002d8 <GPIO_init+0xd4>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	4a1a      	ldr	r2, [pc, #104]	; (80002d8 <GPIO_init+0xd4>)
 800026e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000272:	6013      	str	r3, [r2, #0]
	RESET_BIT(GPIOB_CRH,21);
 8000274:	4b18      	ldr	r3, [pc, #96]	; (80002d8 <GPIO_init+0xd4>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	4a17      	ldr	r2, [pc, #92]	; (80002d8 <GPIO_init+0xd4>)
 800027a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800027e:	6013      	str	r3, [r2, #0]
	RESET_BIT(GPIOB_CRH,22);
 8000280:	4b15      	ldr	r3, [pc, #84]	; (80002d8 <GPIO_init+0xd4>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	4a14      	ldr	r2, [pc, #80]	; (80002d8 <GPIO_init+0xd4>)
 8000286:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800028a:	6013      	str	r3, [r2, #0]
	RESET_BIT(GPIOB_CRH,23);
 800028c:	4b12      	ldr	r3, [pc, #72]	; (80002d8 <GPIO_init+0xd4>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <GPIO_init+0xd4>)
 8000292:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000296:	6013      	str	r3, [r2, #0]
	//MODEA13 == 00: Input mode (reset state) IN 20,21 BITS
	//CNFA13 == 01: Floating input (reset state) IN 22,23 BITS
	RESET_BIT(GPIOA_CRH,20);
 8000298:	4b10      	ldr	r3, [pc, #64]	; (80002dc <GPIO_init+0xd8>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a0f      	ldr	r2, [pc, #60]	; (80002dc <GPIO_init+0xd8>)
 800029e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80002a2:	6013      	str	r3, [r2, #0]
	RESET_BIT(GPIOA_CRH,21);
 80002a4:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <GPIO_init+0xd8>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a0c      	ldr	r2, [pc, #48]	; (80002dc <GPIO_init+0xd8>)
 80002aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80002ae:	6013      	str	r3, [r2, #0]
	SET_BIT(GPIOA_CRH,22);
 80002b0:	4b0a      	ldr	r3, [pc, #40]	; (80002dc <GPIO_init+0xd8>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a09      	ldr	r2, [pc, #36]	; (80002dc <GPIO_init+0xd8>)
 80002b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80002ba:	6013      	str	r3, [r2, #0]
	RESET_BIT(GPIOA_CRH,23);
 80002bc:	4b07      	ldr	r3, [pc, #28]	; (80002dc <GPIO_init+0xd8>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	4a06      	ldr	r2, [pc, #24]	; (80002dc <GPIO_init+0xd8>)
 80002c2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80002c6:	6013      	str	r3, [r2, #0]
}
 80002c8:	bf00      	nop
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bc80      	pop	{r7}
 80002ce:	4770      	bx	lr
 80002d0:	40010c00 	.word	0x40010c00
 80002d4:	40010800 	.word	0x40010800
 80002d8:	40010c04 	.word	0x40010c04
 80002dc:	40010804 	.word	0x40010804

080002e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480c      	ldr	r0, [pc, #48]	; (800031c <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490d      	ldr	r1, [pc, #52]	; (8000320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0a      	ldr	r4, [pc, #40]	; (800032c <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030e:	f000 f811 	bl	8000334 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000312:	f7ff ff2d 	bl	8000170 <main>

08000316 <LoopForever>:

LoopForever:
    b LoopForever
 8000316:	e7fe      	b.n	8000316 <LoopForever>
  ldr   r0, =_estack
 8000318:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000324:	0800039c 	.word	0x0800039c
  ldr r2, =_sbss
 8000328:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800032c:	2000001c 	.word	0x2000001c

08000330 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC1_2_IRQHandler>
	...

08000334 <__libc_init_array>:
 8000334:	b570      	push	{r4, r5, r6, lr}
 8000336:	2500      	movs	r5, #0
 8000338:	4e0c      	ldr	r6, [pc, #48]	; (800036c <__libc_init_array+0x38>)
 800033a:	4c0d      	ldr	r4, [pc, #52]	; (8000370 <__libc_init_array+0x3c>)
 800033c:	1ba4      	subs	r4, r4, r6
 800033e:	10a4      	asrs	r4, r4, #2
 8000340:	42a5      	cmp	r5, r4
 8000342:	d109      	bne.n	8000358 <__libc_init_array+0x24>
 8000344:	f000 f81a 	bl	800037c <_init>
 8000348:	2500      	movs	r5, #0
 800034a:	4e0a      	ldr	r6, [pc, #40]	; (8000374 <__libc_init_array+0x40>)
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <__libc_init_array+0x44>)
 800034e:	1ba4      	subs	r4, r4, r6
 8000350:	10a4      	asrs	r4, r4, #2
 8000352:	42a5      	cmp	r5, r4
 8000354:	d105      	bne.n	8000362 <__libc_init_array+0x2e>
 8000356:	bd70      	pop	{r4, r5, r6, pc}
 8000358:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800035c:	4798      	blx	r3
 800035e:	3501      	adds	r5, #1
 8000360:	e7ee      	b.n	8000340 <__libc_init_array+0xc>
 8000362:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000366:	4798      	blx	r3
 8000368:	3501      	adds	r5, #1
 800036a:	e7f2      	b.n	8000352 <__libc_init_array+0x1e>
 800036c:	08000394 	.word	0x08000394
 8000370:	08000394 	.word	0x08000394
 8000374:	08000394 	.word	0x08000394
 8000378:	08000398 	.word	0x08000398

0800037c <_init>:
 800037c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800037e:	bf00      	nop
 8000380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000382:	bc08      	pop	{r3}
 8000384:	469e      	mov	lr, r3
 8000386:	4770      	bx	lr

08000388 <_fini>:
 8000388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800038a:	bf00      	nop
 800038c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800038e:	bc08      	pop	{r3}
 8000390:	469e      	mov	lr, r3
 8000392:	4770      	bx	lr


calculator_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000fee  00001082  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800064  00800064  00001086  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001086  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010e4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00001120  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fea  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000796  00000000  00000000  000021ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000abb  00000000  00000000  00002950  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  0000340c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  00003548  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088b  00000000  00000000  00003a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000042da  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	c5 03       	fmuls	r20, r21
  56:	cc 03       	fmulsu	r20, r20
  58:	cc 03       	fmulsu	r20, r20
  5a:	cc 03       	fmulsu	r20, r20
  5c:	cc 03       	fmulsu	r20, r20
  5e:	b0 03       	fmuls	r19, r16
  60:	a0 03       	fmuls	r18, r16
  62:	cc 03       	fmulsu	r20, r20
  64:	a8 03       	fmulsu	r18, r16
  66:	cc 03       	fmulsu	r20, r20
  68:	b8 03       	fmulsu	r19, r16
  6a:	50 03       	mulsu	r21, r16
  6c:	58 03       	fmul	r21, r16
  6e:	60 03       	mulsu	r22, r16
  70:	68 03       	fmul	r22, r16
  72:	70 03       	mulsu	r23, r16
  74:	78 03       	fmul	r23, r16
  76:	80 03       	fmuls	r16, r16
  78:	88 03       	fmulsu	r16, r16
  7a:	90 03       	fmuls	r17, r16
  7c:	98 03       	fmulsu	r17, r16
  7e:	cc 03       	fmulsu	r20, r20
  80:	cc 03       	fmulsu	r20, r20
  82:	cc 03       	fmulsu	r20, r20
  84:	cc 03       	fmulsu	r20, r20
  86:	cc 03       	fmulsu	r20, r20
  88:	cc 03       	fmulsu	r20, r20
  8a:	cc 03       	fmulsu	r20, r20
  8c:	cc 03       	fmulsu	r20, r20
  8e:	cc 03       	fmulsu	r20, r20
  90:	cc 03       	fmulsu	r20, r20
  92:	cc 03       	fmulsu	r20, r20
  94:	cc 03       	fmulsu	r20, r20
  96:	cc 03       	fmulsu	r20, r20
  98:	cc 03       	fmulsu	r20, r20
  9a:	cc 03       	fmulsu	r20, r20
  9c:	cc 03       	fmulsu	r20, r20
  9e:	cc 03       	fmulsu	r20, r20
  a0:	cc 03       	fmulsu	r20, r20
  a2:	cc 03       	fmulsu	r20, r20
  a4:	cc 03       	fmulsu	r20, r20
  a6:	cc 03       	fmulsu	r20, r20
  a8:	cc 03       	fmulsu	r20, r20
  aa:	cc 03       	fmulsu	r20, r20
  ac:	cc 03       	fmulsu	r20, r20
  ae:	c0 03       	fmuls	r20, r16
  b0:	13 04       	cpc	r1, r3
  b2:	1b 04       	cpc	r1, r11
  b4:	23 04       	cpc	r2, r3
  b6:	2b 04       	cpc	r2, r11
  b8:	33 04       	cpc	r3, r3
  ba:	3b 04       	cpc	r3, r11
  bc:	43 04       	cpc	r4, r3
  be:	4b 04       	cpc	r4, r11
  c0:	53 04       	cpc	r5, r3
  c2:	5b 04       	cpc	r5, r11
  c4:	6b 04       	cpc	r6, r11
  c6:	6b 04       	cpc	r6, r11
  c8:	6b 04       	cpc	r6, r11
  ca:	63 04       	cpc	r6, r3

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf e5       	ldi	r28, 0x5F	; 95
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	a0 e6       	ldi	r26, 0x60	; 96
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	ee ee       	ldi	r30, 0xEE	; 238
  e0:	ff e0       	ldi	r31, 0x0F	; 15
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a4 36       	cpi	r26, 0x64	; 100
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	a4 e6       	ldi	r26, 0x64	; 100
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ae 36       	cpi	r26, 0x6E	; 110
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 2f 03 	call	0x65e	; 0x65e <main>
 102:	0c 94 f5 07 	jmp	0xfea	; 0xfea <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <KPAD_INIT_FUNC>:

#include "kpad.h"

void KPAD_INIT_FUNC()
{
	KPAD_ROW_PORT_DIRECTION = 0X00;
 10a:	11 ba       	out	0x11, r1	; 17
	KPAD_COL_PORT_DIRECTION = 0X3F;
 10c:	8f e3       	ldi	r24, 0x3F	; 63
 10e:	84 bb       	out	0x14, r24	; 20
	
	KPAD_COL_PORT_VALUE = 0x3F;
 110:	85 bb       	out	0x15, r24	; 21
	KPAD_ROW_PORT_VALUE = 0x0F;
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	82 bb       	out	0x12, r24	; 18
 116:	08 95       	ret

00000118 <KPAD_GET_CHAR>:
}


char KPAD_GET_CHAR()
{
	for(int i = 0; i<6; i++)//col
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	bd c0       	rjmp	.+378    	; 0x298 <KPAD_GET_CHAR+0x180>
	{
		SET_BIT(KPAD_COL_PORT_VALUE,C0);
 11e:	85 b3       	in	r24, 0x15	; 21
 120:	81 60       	ori	r24, 0x01	; 1
 122:	85 bb       	out	0x15, r24	; 21
		SET_BIT(KPAD_COL_PORT_VALUE,C1);
 124:	85 b3       	in	r24, 0x15	; 21
 126:	82 60       	ori	r24, 0x02	; 2
 128:	85 bb       	out	0x15, r24	; 21
        SET_BIT(KPAD_COL_PORT_VALUE,C2);
 12a:	85 b3       	in	r24, 0x15	; 21
 12c:	84 60       	ori	r24, 0x04	; 4
 12e:	85 bb       	out	0x15, r24	; 21
		SET_BIT(KPAD_COL_PORT_VALUE,C3);
 130:	85 b3       	in	r24, 0x15	; 21
 132:	88 60       	ori	r24, 0x08	; 8
 134:	85 bb       	out	0x15, r24	; 21
		SET_BIT(KPAD_COL_PORT_VALUE,C4);
 136:	85 b3       	in	r24, 0x15	; 21
 138:	80 61       	ori	r24, 0x10	; 16
 13a:	85 bb       	out	0x15, r24	; 21
		SET_BIT(KPAD_COL_PORT_VALUE,C5);		
 13c:	85 b3       	in	r24, 0x15	; 21
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	85 bb       	out	0x15, r24	; 21

		RESET_BIT(KPAD_COL_PORT_VALUE,i);
 142:	25 b3       	in	r18, 0x15	; 21
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	06 2e       	mov	r0, r22
 14a:	02 c0       	rjmp	.+4      	; 0x150 <KPAD_GET_CHAR+0x38>
 14c:	88 0f       	add	r24, r24
 14e:	99 1f       	adc	r25, r25
 150:	0a 94       	dec	r0
 152:	e2 f7       	brpl	.-8      	; 0x14c <KPAD_GET_CHAR+0x34>
 154:	80 95       	com	r24
 156:	82 23       	and	r24, r18
 158:	85 bb       	out	0x15, r24	; 21
		for(int j = 0; j<4; j++)
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	96 c0       	rjmp	.+300    	; 0x28c <KPAD_GET_CHAR+0x174>
		{
			 if(!READ_BIT(KPAD_ROW_PORT_PIN, j))
 160:	80 b3       	in	r24, 0x10	; 16
 162:	41 e0       	ldi	r20, 0x01	; 1
 164:	50 e0       	ldi	r21, 0x00	; 0
 166:	02 2e       	mov	r0, r18
 168:	02 c0       	rjmp	.+4      	; 0x16e <KPAD_GET_CHAR+0x56>
 16a:	44 0f       	add	r20, r20
 16c:	55 1f       	adc	r21, r21
 16e:	0a 94       	dec	r0
 170:	e2 f7       	brpl	.-8      	; 0x16a <KPAD_GET_CHAR+0x52>
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	84 23       	and	r24, r20
 176:	95 23       	and	r25, r21
 178:	02 2e       	mov	r0, r18
 17a:	02 c0       	rjmp	.+4      	; 0x180 <KPAD_GET_CHAR+0x68>
 17c:	95 95       	asr	r25
 17e:	87 95       	ror	r24
 180:	0a 94       	dec	r0
 182:	e2 f7       	brpl	.-8      	; 0x17c <KPAD_GET_CHAR+0x64>
 184:	89 2b       	or	r24, r25
 186:	09 f0       	breq	.+2      	; 0x18a <KPAD_GET_CHAR+0x72>
 188:	7f c0       	rjmp	.+254    	; 0x288 <KPAD_GET_CHAR+0x170>
			 {
				 while(!READ_BIT(KPAD_ROW_PORT_PIN, j));
 18a:	80 b3       	in	r24, 0x10	; 16
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	84 23       	and	r24, r20
 190:	95 23       	and	r25, r21
 192:	02 2e       	mov	r0, r18
 194:	02 c0       	rjmp	.+4      	; 0x19a <KPAD_GET_CHAR+0x82>
 196:	95 95       	asr	r25
 198:	87 95       	ror	r24
 19a:	0a 94       	dec	r0
 19c:	e2 f7       	brpl	.-8      	; 0x196 <KPAD_GET_CHAR+0x7e>
 19e:	89 2b       	or	r24, r25
 1a0:	a1 f3       	breq	.-24     	; 0x18a <KPAD_GET_CHAR+0x72>
				 switch(i)
 1a2:	62 30       	cpi	r22, 0x02	; 2
 1a4:	71 05       	cpc	r23, r1
 1a6:	99 f1       	breq	.+102    	; 0x20e <KPAD_GET_CHAR+0xf6>
 1a8:	3c f4       	brge	.+14     	; 0x1b8 <KPAD_GET_CHAR+0xa0>
 1aa:	61 15       	cp	r22, r1
 1ac:	71 05       	cpc	r23, r1
 1ae:	71 f0       	breq	.+28     	; 0x1cc <KPAD_GET_CHAR+0xb4>
 1b0:	61 30       	cpi	r22, 0x01	; 1
 1b2:	71 05       	cpc	r23, r1
 1b4:	e1 f0       	breq	.+56     	; 0x1ee <KPAD_GET_CHAR+0xd6>
 1b6:	68 c0       	rjmp	.+208    	; 0x288 <KPAD_GET_CHAR+0x170>
 1b8:	64 30       	cpi	r22, 0x04	; 4
 1ba:	71 05       	cpc	r23, r1
 1bc:	09 f4       	brne	.+2      	; 0x1c0 <KPAD_GET_CHAR+0xa8>
 1be:	47 c0       	rjmp	.+142    	; 0x24e <KPAD_GET_CHAR+0x136>
 1c0:	b4 f1       	brlt	.+108    	; 0x22e <KPAD_GET_CHAR+0x116>
 1c2:	65 30       	cpi	r22, 0x05	; 5
 1c4:	71 05       	cpc	r23, r1
 1c6:	09 f4       	brne	.+2      	; 0x1ca <KPAD_GET_CHAR+0xb2>
 1c8:	52 c0       	rjmp	.+164    	; 0x26e <KPAD_GET_CHAR+0x156>
 1ca:	5e c0       	rjmp	.+188    	; 0x288 <KPAD_GET_CHAR+0x170>
				 {
					 //====================================
					 case 0:
					 if(j==0)
 1cc:	21 15       	cp	r18, r1
 1ce:	31 05       	cpc	r19, r1
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <KPAD_GET_CHAR+0xbc>
 1d2:	68 c0       	rjmp	.+208    	; 0x2a4 <KPAD_GET_CHAR+0x18c>
					 return '!';
					 else if(j==1)
 1d4:	21 30       	cpi	r18, 0x01	; 1
 1d6:	31 05       	cpc	r19, r1
 1d8:	09 f4       	brne	.+2      	; 0x1dc <KPAD_GET_CHAR+0xc4>
 1da:	66 c0       	rjmp	.+204    	; 0x2a8 <KPAD_GET_CHAR+0x190>
					 return 'N';
					 else if(j==2)
 1dc:	22 30       	cpi	r18, 0x02	; 2
 1de:	31 05       	cpc	r19, r1
 1e0:	09 f4       	brne	.+2      	; 0x1e4 <KPAD_GET_CHAR+0xcc>
 1e2:	64 c0       	rjmp	.+200    	; 0x2ac <KPAD_GET_CHAR+0x194>
					 return '%';
					 else if(j==3)
 1e4:	23 30       	cpi	r18, 0x03	; 3
 1e6:	31 05       	cpc	r19, r1
 1e8:	09 f0       	breq	.+2      	; 0x1ec <KPAD_GET_CHAR+0xd4>
 1ea:	4e c0       	rjmp	.+156    	; 0x288 <KPAD_GET_CHAR+0x170>
 1ec:	61 c0       	rjmp	.+194    	; 0x2b0 <KPAD_GET_CHAR+0x198>
					 return 'R';
					 break;
					 //======================================
					 case 1:
					 if(j==0)
 1ee:	21 15       	cp	r18, r1
 1f0:	31 05       	cpc	r19, r1
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <KPAD_GET_CHAR+0xde>
 1f4:	5f c0       	rjmp	.+190    	; 0x2b4 <KPAD_GET_CHAR+0x19c>
					 return '7';
					 else if(j==1)
 1f6:	21 30       	cpi	r18, 0x01	; 1
 1f8:	31 05       	cpc	r19, r1
 1fa:	09 f4       	brne	.+2      	; 0x1fe <KPAD_GET_CHAR+0xe6>
 1fc:	5d c0       	rjmp	.+186    	; 0x2b8 <KPAD_GET_CHAR+0x1a0>
					 return '4';
					 else if(j==2)
 1fe:	22 30       	cpi	r18, 0x02	; 2
 200:	31 05       	cpc	r19, r1
 202:	09 f4       	brne	.+2      	; 0x206 <KPAD_GET_CHAR+0xee>
 204:	5b c0       	rjmp	.+182    	; 0x2bc <KPAD_GET_CHAR+0x1a4>
					 return '1';
					 else if(j==3)
 206:	23 30       	cpi	r18, 0x03	; 3
 208:	31 05       	cpc	r19, r1
 20a:	f1 f5       	brne	.+124    	; 0x288 <KPAD_GET_CHAR+0x170>
 20c:	59 c0       	rjmp	.+178    	; 0x2c0 <KPAD_GET_CHAR+0x1a8>
					 return '0';
					 break;
					 //========================================
					 case 2:
					 if(j==0)
 20e:	21 15       	cp	r18, r1
 210:	31 05       	cpc	r19, r1
 212:	09 f4       	brne	.+2      	; 0x216 <KPAD_GET_CHAR+0xfe>
 214:	57 c0       	rjmp	.+174    	; 0x2c4 <KPAD_GET_CHAR+0x1ac>
					 return '8';
					 else if(j==1)
 216:	21 30       	cpi	r18, 0x01	; 1
 218:	31 05       	cpc	r19, r1
 21a:	09 f4       	brne	.+2      	; 0x21e <KPAD_GET_CHAR+0x106>
 21c:	55 c0       	rjmp	.+170    	; 0x2c8 <KPAD_GET_CHAR+0x1b0>
					 return '5';
					 else if(j==2)
 21e:	22 30       	cpi	r18, 0x02	; 2
 220:	31 05       	cpc	r19, r1
 222:	09 f4       	brne	.+2      	; 0x226 <KPAD_GET_CHAR+0x10e>
 224:	53 c0       	rjmp	.+166    	; 0x2cc <KPAD_GET_CHAR+0x1b4>
					 return '2';
					 else if(j==3)
 226:	23 30       	cpi	r18, 0x03	; 3
 228:	31 05       	cpc	r19, r1
 22a:	71 f5       	brne	.+92     	; 0x288 <KPAD_GET_CHAR+0x170>
 22c:	51 c0       	rjmp	.+162    	; 0x2d0 <KPAD_GET_CHAR+0x1b8>
					 return '.';
					 break;
					 //=======================================
					 case 3:
					 if(j==0)
 22e:	21 15       	cp	r18, r1
 230:	31 05       	cpc	r19, r1
 232:	09 f4       	brne	.+2      	; 0x236 <KPAD_GET_CHAR+0x11e>
 234:	4f c0       	rjmp	.+158    	; 0x2d4 <KPAD_GET_CHAR+0x1bc>
					 return '9';
					 else if(j==1)
 236:	21 30       	cpi	r18, 0x01	; 1
 238:	31 05       	cpc	r19, r1
 23a:	09 f4       	brne	.+2      	; 0x23e <KPAD_GET_CHAR+0x126>
 23c:	4d c0       	rjmp	.+154    	; 0x2d8 <KPAD_GET_CHAR+0x1c0>
					 return '6';
					 else if(j==2)
 23e:	22 30       	cpi	r18, 0x02	; 2
 240:	31 05       	cpc	r19, r1
 242:	09 f4       	brne	.+2      	; 0x246 <KPAD_GET_CHAR+0x12e>
 244:	4b c0       	rjmp	.+150    	; 0x2dc <KPAD_GET_CHAR+0x1c4>
					 return '3';
					 else if(j==3)
 246:	23 30       	cpi	r18, 0x03	; 3
 248:	31 05       	cpc	r19, r1
 24a:	f1 f4       	brne	.+60     	; 0x288 <KPAD_GET_CHAR+0x170>
 24c:	49 c0       	rjmp	.+146    	; 0x2e0 <KPAD_GET_CHAR+0x1c8>
					 return '=';
					 break;
					 //=======================================
					 case 4:
					 if(j==0)
 24e:	21 15       	cp	r18, r1
 250:	31 05       	cpc	r19, r1
 252:	09 f4       	brne	.+2      	; 0x256 <KPAD_GET_CHAR+0x13e>
 254:	47 c0       	rjmp	.+142    	; 0x2e4 <KPAD_GET_CHAR+0x1cc>
					 return '*';
					 else if(j==1)
 256:	21 30       	cpi	r18, 0x01	; 1
 258:	31 05       	cpc	r19, r1
 25a:	09 f4       	brne	.+2      	; 0x25e <KPAD_GET_CHAR+0x146>
 25c:	45 c0       	rjmp	.+138    	; 0x2e8 <KPAD_GET_CHAR+0x1d0>
					 return '-';
					 else if(j==2)
 25e:	22 30       	cpi	r18, 0x02	; 2
 260:	31 05       	cpc	r19, r1
 262:	09 f4       	brne	.+2      	; 0x266 <KPAD_GET_CHAR+0x14e>
 264:	43 c0       	rjmp	.+134    	; 0x2ec <KPAD_GET_CHAR+0x1d4>
					 return '+';
					 else if(j==3)
 266:	23 30       	cpi	r18, 0x03	; 3
 268:	31 05       	cpc	r19, r1
 26a:	71 f4       	brne	.+28     	; 0x288 <KPAD_GET_CHAR+0x170>
 26c:	41 c0       	rjmp	.+130    	; 0x2f0 <KPAD_GET_CHAR+0x1d8>
					 return '+';
					 break;
					 //=======================================
					 case 5:
					 if(j==0)
 26e:	21 15       	cp	r18, r1
 270:	31 05       	cpc	r19, r1
 272:	09 f4       	brne	.+2      	; 0x276 <KPAD_GET_CHAR+0x15e>
 274:	3f c0       	rjmp	.+126    	; 0x2f4 <KPAD_GET_CHAR+0x1dc>
					 return '/';
					 else if(j==1)
 276:	21 30       	cpi	r18, 0x01	; 1
 278:	31 05       	cpc	r19, r1
 27a:	f1 f1       	breq	.+124    	; 0x2f8 <KPAD_GET_CHAR+0x1e0>
					 return 'N';
					 else if(j==2)
 27c:	22 30       	cpi	r18, 0x02	; 2
 27e:	31 05       	cpc	r19, r1
 280:	e9 f1       	breq	.+122    	; 0x2fc <KPAD_GET_CHAR+0x1e4>
					 return 'M';
					 else if(j==3)
 282:	23 30       	cpi	r18, 0x03	; 3
 284:	31 05       	cpc	r19, r1
 286:	e1 f1       	breq	.+120    	; 0x300 <KPAD_GET_CHAR+0x1e8>
		SET_BIT(KPAD_COL_PORT_VALUE,C3);
		SET_BIT(KPAD_COL_PORT_VALUE,C4);
		SET_BIT(KPAD_COL_PORT_VALUE,C5);		

		RESET_BIT(KPAD_COL_PORT_VALUE,i);
		for(int j = 0; j<4; j++)
 288:	2f 5f       	subi	r18, 0xFF	; 255
 28a:	3f 4f       	sbci	r19, 0xFF	; 255
 28c:	24 30       	cpi	r18, 0x04	; 4
 28e:	31 05       	cpc	r19, r1
 290:	0c f4       	brge	.+2      	; 0x294 <KPAD_GET_CHAR+0x17c>
 292:	66 cf       	rjmp	.-308    	; 0x160 <KPAD_GET_CHAR+0x48>
}


char KPAD_GET_CHAR()
{
	for(int i = 0; i<6; i++)//col
 294:	6f 5f       	subi	r22, 0xFF	; 255
 296:	7f 4f       	sbci	r23, 0xFF	; 255
 298:	66 30       	cpi	r22, 0x06	; 6
 29a:	71 05       	cpc	r23, r1
 29c:	0c f4       	brge	.+2      	; 0x2a0 <KPAD_GET_CHAR+0x188>
 29e:	3f cf       	rjmp	.-386    	; 0x11e <KPAD_GET_CHAR+0x6>
					 break;
				 }
			 }
		 }
	 }
	 return 'N';
 2a0:	8e e4       	ldi	r24, 0x4E	; 78
 2a2:	08 95       	ret
				 switch(i)
				 {
					 //====================================
					 case 0:
					 if(j==0)
					 return '!';
 2a4:	81 e2       	ldi	r24, 0x21	; 33
 2a6:	08 95       	ret
					 else if(j==1)
					 return 'N';
 2a8:	8e e4       	ldi	r24, 0x4E	; 78
 2aa:	08 95       	ret
					 else if(j==2)
					 return '%';
 2ac:	85 e2       	ldi	r24, 0x25	; 37
 2ae:	08 95       	ret
					 else if(j==3)
					 return 'R';
 2b0:	82 e5       	ldi	r24, 0x52	; 82
 2b2:	08 95       	ret
					 break;
					 //======================================
					 case 1:
					 if(j==0)
					 return '7';
 2b4:	87 e3       	ldi	r24, 0x37	; 55
 2b6:	08 95       	ret
					 else if(j==1)
					 return '4';
 2b8:	84 e3       	ldi	r24, 0x34	; 52
 2ba:	08 95       	ret
					 else if(j==2)
					 return '1';
 2bc:	81 e3       	ldi	r24, 0x31	; 49
 2be:	08 95       	ret
					 else if(j==3)
					 return '0';
 2c0:	80 e3       	ldi	r24, 0x30	; 48
 2c2:	08 95       	ret
					 break;
					 //========================================
					 case 2:
					 if(j==0)
					 return '8';
 2c4:	88 e3       	ldi	r24, 0x38	; 56
 2c6:	08 95       	ret
					 else if(j==1)
					 return '5';
 2c8:	85 e3       	ldi	r24, 0x35	; 53
 2ca:	08 95       	ret
					 else if(j==2)
					 return '2';
 2cc:	82 e3       	ldi	r24, 0x32	; 50
 2ce:	08 95       	ret
					 else if(j==3)
					 return '.';
 2d0:	8e e2       	ldi	r24, 0x2E	; 46
 2d2:	08 95       	ret
					 break;
					 //=======================================
					 case 3:
					 if(j==0)
					 return '9';
 2d4:	89 e3       	ldi	r24, 0x39	; 57
 2d6:	08 95       	ret
					 else if(j==1)
					 return '6';
 2d8:	86 e3       	ldi	r24, 0x36	; 54
 2da:	08 95       	ret
					 else if(j==2)
					 return '3';
 2dc:	83 e3       	ldi	r24, 0x33	; 51
 2de:	08 95       	ret
					 else if(j==3)
					 return '=';
 2e0:	8d e3       	ldi	r24, 0x3D	; 61
 2e2:	08 95       	ret
					 break;
					 //=======================================
					 case 4:
					 if(j==0)
					 return '*';
 2e4:	8a e2       	ldi	r24, 0x2A	; 42
 2e6:	08 95       	ret
					 else if(j==1)
					 return '-';
 2e8:	8d e2       	ldi	r24, 0x2D	; 45
 2ea:	08 95       	ret
					 else if(j==2)
					 return '+';
 2ec:	8b e2       	ldi	r24, 0x2B	; 43
 2ee:	08 95       	ret
					 else if(j==3)
					 return '+';
 2f0:	8b e2       	ldi	r24, 0x2B	; 43
 2f2:	08 95       	ret
					 break;
					 //=======================================
					 case 5:
					 if(j==0)
					 return '/';
 2f4:	8f e2       	ldi	r24, 0x2F	; 47
 2f6:	08 95       	ret
					 else if(j==1)
					 return 'N';
 2f8:	8e e4       	ldi	r24, 0x4E	; 78
 2fa:	08 95       	ret
					 else if(j==2)
					 return 'M';
 2fc:	8d e4       	ldi	r24, 0x4D	; 77
 2fe:	08 95       	ret
					 else if(j==3)
					 return 'M';
 300:	8d e4       	ldi	r24, 0x4D	; 77
				 }
			 }
		 }
	 }
	 return 'N';
 302:	08 95       	ret

00000304 <LCD_ENABLE_PULSE_FUNC>:
	SET_BIT(LCD_CTRL_PORT_VALUE,RW);
	LCD_ENABLE_PULSE_FUNC();
	
	/*Make PORTA as an output*/
	#if ACTIVE_MODE == EIGHT_BIT_MODE
	LCD_PORT_DIRECTION = 0xff;
 304:	88 b3       	in	r24, 0x18	; 24
 306:	8d 7f       	andi	r24, 0xFD	; 253
 308:	88 bb       	out	0x18, r24	; 24
 30a:	2f e7       	ldi	r18, 0x7F	; 127
 30c:	88 e3       	ldi	r24, 0x38	; 56
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	21 50       	subi	r18, 0x01	; 1
 312:	80 40       	sbci	r24, 0x00	; 0
 314:	90 40       	sbci	r25, 0x00	; 0
 316:	e1 f7       	brne	.-8      	; 0x310 <LCD_ENABLE_PULSE_FUNC+0xc>
 318:	00 c0       	rjmp	.+0      	; 0x31a <LCD_ENABLE_PULSE_FUNC+0x16>
 31a:	00 00       	nop
 31c:	88 b3       	in	r24, 0x18	; 24
 31e:	82 60       	ori	r24, 0x02	; 2
 320:	88 bb       	out	0x18, r24	; 24
 322:	08 95       	ret

00000324 <LCD_SEND_COMMAND_FUNC>:
	//LCD_Busy();
	
	/*RESET RS and RW*/
	//RS = 0 ---> to take Instruction
	//RW = 0 ---> to write on screen, choose 0 not 1 because we don't need Read any data from LCD poat
	RESET_BIT(LCD_CTRL_PORT_VALUE,RW);
 324:	98 b3       	in	r25, 0x18	; 24
 326:	9b 7f       	andi	r25, 0xFB	; 251
 328:	98 bb       	out	0x18, r25	; 24
	RESET_BIT(LCD_CTRL_PORT_VALUE,RS);
 32a:	98 b3       	in	r25, 0x18	; 24
 32c:	97 7f       	andi	r25, 0xF7	; 247
 32e:	98 bb       	out	0x18, r25	; 24
	
	/*set LCD PORT = COMMAND*/
	#if ACTIVE_MODE == EIGHT_BIT_MODE
	LCD_PORT_VALUE = command;
 330:	8b bb       	out	0x1b, r24	; 27
	LCD_ENABLE_PULSE_FUNC();
 332:	0e 94 82 01 	call	0x304	; 0x304 <LCD_ENABLE_PULSE_FUNC>
 336:	08 95       	ret

00000338 <LCD_CLEAR_SCREEN_FUNC>:
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_CLEAR_SCREEN_FUNC()
{
	/*Clear return counter to zero*/
	LCD_SEND_COMMAND_FUNC(LCD_CLEAR_SCREEN);
 338:	81 e0       	ldi	r24, 0x01	; 1
 33a:	0e 94 92 01 	call	0x324	; 0x324 <LCD_SEND_COMMAND_FUNC>
 33e:	08 95       	ret

00000340 <LCD_INIT_FUNC>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 340:	8f e3       	ldi	r24, 0x3F	; 63
 342:	9c e9       	ldi	r25, 0x9C	; 156
 344:	01 97       	sbiw	r24, 0x01	; 1
 346:	f1 f7       	brne	.-4      	; 0x344 <LCD_INIT_FUNC+0x4>
 348:	00 c0       	rjmp	.+0      	; 0x34a <LCD_INIT_FUNC+0xa>
 34a:	00 00       	nop
void LCD_INIT_FUNC()
{
	_delay_ms(20);
	/*INITTIALIZE LCD TO CLEAR SCREEN, LOOK AT TRM IN PAGES 8 AND 28*/
	/*Make ENABLE, RS AND RW AS OUTPUT AND GIVE THEM ZERO VALUE*/
	LCD_CTRL_PORT_DIRECTION |=  ((1 << RS) | (1 << RW) | (1 << ENABLE));   //Set all CTRL bits as output
 34c:	87 b3       	in	r24, 0x17	; 23
 34e:	8e 60       	ori	r24, 0x0E	; 14
 350:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL_PORT_VALUE     &= ~((1 << RS) | (1 << RW) | (1 << ENABLE));  //Give them zero value
 352:	88 b3       	in	r24, 0x18	; 24
 354:	81 7f       	andi	r24, 0xF1	; 241
 356:	88 bb       	out	0x18, r24	; 24
 358:	8f e2       	ldi	r24, 0x2F	; 47
 35a:	95 e7       	ldi	r25, 0x75	; 117
 35c:	01 97       	sbiw	r24, 0x01	; 1
 35e:	f1 f7       	brne	.-4      	; 0x35c <LCD_INIT_FUNC+0x1c>
 360:	00 c0       	rjmp	.+0      	; 0x362 <LCD_INIT_FUNC+0x22>
 362:	00 00       	nop
	
	_delay_ms(15);
	#if ACTIVE_MODE == EIGHT_BIT_MODE
	LCD_PORT_DIRECTION = 0xff; //Set all LCD PORT "PORTA" as an output
 364:	8f ef       	ldi	r24, 0xFF	; 255
 366:	8a bb       	out	0x1a, r24	; 26
	LCD_CLEAR_SCREEN_FUNC();
 368:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_CLEAR_SCREEN_FUNC>
	LCD_SEND_COMMAND_FUNC(LCD_MOVE_CURSOR_TO_THE_HOME_POSITION);
 36c:	82 e0       	ldi	r24, 0x02	; 2
 36e:	0e 94 92 01 	call	0x324	; 0x324 <LCD_SEND_COMMAND_FUNC>
	LCD_SEND_COMMAND_FUNC(LCD_FUNCTION_8BIT_2LINES);
 372:	88 e3       	ldi	r24, 0x38	; 56
 374:	0e 94 92 01 	call	0x324	; 0x324 <LCD_SEND_COMMAND_FUNC>
	LCD_CLEAR_SCREEN_FUNC();
	LCD_SEND_COMMAND_FUNC(LCD_MOVE_CURSOR_TO_THE_HOME_POSITION);
	LCD_SEND_COMMAND_FUNC(LCD_FUNCTION_4BIT_2LINES);
	#endif
		
	LCD_SEND_COMMAND_FUNC(LCD_ENTRY_MODE);
 378:	86 e0       	ldi	r24, 0x06	; 6
 37a:	0e 94 92 01 	call	0x324	; 0x324 <LCD_SEND_COMMAND_FUNC>
	LCD_SEND_COMMAND_FUNC(LCD_BEGIN_AT_FIRST_ROW);
 37e:	80 e8       	ldi	r24, 0x80	; 128
 380:	0e 94 92 01 	call	0x324	; 0x324 <LCD_SEND_COMMAND_FUNC>
	LCD_SEND_COMMAND_FUNC(LCD_DISP_ON_CURSOR_BLINK);
 384:	8f e0       	ldi	r24, 0x0F	; 15
 386:	0e 94 92 01 	call	0x324	; 0x324 <LCD_SEND_COMMAND_FUNC>
 38a:	08 95       	ret

0000038c <LCD_SEND_CHAR_FUNC>:
		//LCD_Busy();
		
		/*RESET RW*/
		//RS = 1 ---> to take Instruction
		//RW = 0 ---> to write on screen, choose 0 not 1 because we don't need Read any data from LCD poat
		RESET_BIT(LCD_CTRL_PORT_VALUE,RW);
 38c:	98 b3       	in	r25, 0x18	; 24
 38e:	9b 7f       	andi	r25, 0xFB	; 251
 390:	98 bb       	out	0x18, r25	; 24
		SET_BIT(LCD_CTRL_PORT_VALUE,RS);
 392:	98 b3       	in	r25, 0x18	; 24
 394:	98 60       	ori	r25, 0x08	; 8
 396:	98 bb       	out	0x18, r25	; 24
		
		/*set LCD PORT = DATA*/
		#if ACTIVE_MODE == EIGHT_BIT_MODE
		LCD_PORT_VALUE = data;
 398:	8b bb       	out	0x1b, r24	; 27
		LCD_ENABLE_PULSE_FUNC();
 39a:	0e 94 82 01 	call	0x304	; 0x304 <LCD_ENABLE_PULSE_FUNC>
 39e:	08 95       	ret

000003a0 <LCD_SET_CURSOR_FUNC>:
	}
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_SET_CURSOR_FUNC(uint8_t line, uint8_t col)
{
	if(line == 0)
 3a0:	81 11       	cpse	r24, r1
 3a2:	07 c0       	rjmp	.+14     	; 0x3b2 <LCD_SET_CURSOR_FUNC+0x12>
	{
		if(col < 16 && col >=0)
 3a4:	60 31       	cpi	r22, 0x10	; 16
 3a6:	68 f4       	brcc	.+26     	; 0x3c2 <LCD_SET_CURSOR_FUNC+0x22>
		LCD_SEND_COMMAND_FUNC(LCD_BEGIN_AT_FIRST_ROW + col);
 3a8:	80 e8       	ldi	r24, 0x80	; 128
 3aa:	86 0f       	add	r24, r22
 3ac:	0e 94 92 01 	call	0x324	; 0x324 <LCD_SEND_COMMAND_FUNC>
 3b0:	08 95       	ret
	}
	else if(line == 1)
 3b2:	81 30       	cpi	r24, 0x01	; 1
 3b4:	31 f4       	brne	.+12     	; 0x3c2 <LCD_SET_CURSOR_FUNC+0x22>
	{
		if(col < 16 && col >=0)
 3b6:	60 31       	cpi	r22, 0x10	; 16
 3b8:	20 f4       	brcc	.+8      	; 0x3c2 <LCD_SET_CURSOR_FUNC+0x22>
		LCD_SEND_COMMAND_FUNC(LCD_BEGIN_AT_SECOND_ROW + col);
 3ba:	80 ec       	ldi	r24, 0xC0	; 192
 3bc:	86 0f       	add	r24, r22
 3be:	0e 94 92 01 	call	0x324	; 0x324 <LCD_SEND_COMMAND_FUNC>
 3c2:	08 95       	ret

000003c4 <LCD_SEND_STRING_FUNC>:
		LCD_ENABLE_PULSE_FUNC();
		#endif	
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_SEND_STRING_FUNC(char* string)
{
 3c4:	0f 93       	push	r16
 3c6:	1f 93       	push	r17
 3c8:	cf 93       	push	r28
 3ca:	df 93       	push	r29
 3cc:	8c 01       	movw	r16, r24
	int counter = 0;
 3ce:	c0 e0       	ldi	r28, 0x00	; 0
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
	while(*string > 0)
 3d2:	18 c0       	rjmp	.+48     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
	{
		counter++;
 3d4:	21 96       	adiw	r28, 0x01	; 1
		LCD_SEND_CHAR_FUNC(*string++);
 3d6:	0f 5f       	subi	r16, 0xFF	; 255
 3d8:	1f 4f       	sbci	r17, 0xFF	; 255
 3da:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
		if(counter == 16)
 3de:	c0 31       	cpi	r28, 0x10	; 16
 3e0:	d1 05       	cpc	r29, r1
 3e2:	29 f4       	brne	.+10     	; 0x3ee <LCD_SEND_STRING_FUNC+0x2a>
		LCD_SET_CURSOR_FUNC(1,0);
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_SET_CURSOR_FUNC>
 3ec:	0b c0       	rjmp	.+22     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		else if(counter == 33)
 3ee:	c1 32       	cpi	r28, 0x21	; 33
 3f0:	d1 05       	cpc	r29, r1
 3f2:	41 f4       	brne	.+16     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		{
			LCD_CLEAR_SCREEN_FUNC();
 3f4:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_CLEAR_SCREEN_FUNC>
			LCD_SET_CURSOR_FUNC(0,0);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_SET_CURSOR_FUNC>
			counter = 0;
 400:	c0 e0       	ldi	r28, 0x00	; 0
 402:	d0 e0       	ldi	r29, 0x00	; 0
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_SEND_STRING_FUNC(char* string)
{
	int counter = 0;
	while(*string > 0)
 404:	f8 01       	movw	r30, r16
 406:	80 81       	ld	r24, Z
 408:	81 11       	cpse	r24, r1
 40a:	e4 cf       	rjmp	.-56     	; 0x3d4 <LCD_SEND_STRING_FUNC+0x10>
			LCD_CLEAR_SCREEN_FUNC();
			LCD_SET_CURSOR_FUNC(0,0);
			counter = 0;
		}
	}
}
 40c:	df 91       	pop	r29
 40e:	cf 91       	pop	r28
 410:	1f 91       	pop	r17
 412:	0f 91       	pop	r16
 414:	08 95       	ret

00000416 <LCD_DISPLAY_NUMBER_FUNC>:
		LCD_SEND_COMMAND_FUNC(LCD_BEGIN_AT_SECOND_ROW + col);
	}
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_DISPLAY_NUMBER_FUNC(int n)
{
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
 41e:	cd b7       	in	r28, 0x3d	; 61
 420:	de b7       	in	r29, 0x3e	; 62
 422:	2a 97       	sbiw	r28, 0x0a	; 10
 424:	0f b6       	in	r0, 0x3f	; 63
 426:	f8 94       	cli
 428:	de bf       	out	0x3e, r29	; 62
 42a:	0f be       	out	0x3f, r0	; 63
 42c:	cd bf       	out	0x3d, r28	; 61
	char int_to_string[10];
	sprintf(int_to_string,"%d",n);
 42e:	9f 93       	push	r25
 430:	8f 93       	push	r24
 432:	80 e6       	ldi	r24, 0x60	; 96
 434:	90 e0       	ldi	r25, 0x00	; 0
 436:	9f 93       	push	r25
 438:	8f 93       	push	r24
 43a:	8e 01       	movw	r16, r28
 43c:	0f 5f       	subi	r16, 0xFF	; 255
 43e:	1f 4f       	sbci	r17, 0xFF	; 255
 440:	1f 93       	push	r17
 442:	0f 93       	push	r16
 444:	0e 94 0b 05 	call	0xa16	; 0xa16 <sprintf>
	LCD_SEND_STRING_FUNC(int_to_string);
 448:	c8 01       	movw	r24, r16
 44a:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <LCD_SEND_STRING_FUNC>
}
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	0f 90       	pop	r0
 45a:	2a 96       	adiw	r28, 0x0a	; 10
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	df 91       	pop	r29
 468:	cf 91       	pop	r28
 46a:	1f 91       	pop	r17
 46c:	0f 91       	pop	r16
 46e:	08 95       	ret

00000470 <modify_number>:
	}
}

void modify_number(int number_counter, char press_key)
{
	switch (number_counter)
 470:	82 30       	cpi	r24, 0x02	; 2
 472:	91 05       	cpc	r25, r1
 474:	89 f1       	breq	.+98     	; 0x4d8 <modify_number+0x68>
 476:	2c f4       	brge	.+10     	; 0x482 <modify_number+0x12>
 478:	00 97       	sbiw	r24, 0x00	; 0
 47a:	59 f0       	breq	.+22     	; 0x492 <modify_number+0x22>
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	89 f0       	breq	.+34     	; 0x4a2 <modify_number+0x32>
 480:	08 95       	ret
 482:	83 30       	cpi	r24, 0x03	; 3
 484:	91 05       	cpc	r25, r1
 486:	09 f4       	brne	.+2      	; 0x48a <modify_number+0x1a>
 488:	55 c0       	rjmp	.+170    	; 0x534 <modify_number+0xc4>
 48a:	04 97       	sbiw	r24, 0x04	; 4
 48c:	09 f4       	brne	.+2      	; 0x490 <modify_number+0x20>
 48e:	93 c0       	rjmp	.+294    	; 0x5b6 <modify_number+0x146>
 490:	08 95       	ret
	{
	case 0:
		temp_0 = (press_key - 48) * 1;
 492:	70 e0       	ldi	r23, 0x00	; 0
 494:	60 53       	subi	r22, 0x30	; 48
 496:	71 09       	sbc	r23, r1
 498:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <temp_0+0x1>
 49c:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <temp_0>
		break;
 4a0:	08 95       	ret
	case 1:
		temp_0 *= 10;
 4a2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <temp_0>
 4a6:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <temp_0+0x1>
 4aa:	9c 01       	movw	r18, r24
 4ac:	22 0f       	add	r18, r18
 4ae:	33 1f       	adc	r19, r19
 4b0:	88 0f       	add	r24, r24
 4b2:	99 1f       	adc	r25, r25
 4b4:	88 0f       	add	r24, r24
 4b6:	99 1f       	adc	r25, r25
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	82 0f       	add	r24, r18
 4be:	93 1f       	adc	r25, r19
 4c0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <temp_0+0x1>
 4c4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <temp_0>
		temp_1 = (press_key - 48) * 1;
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	60 53       	subi	r22, 0x30	; 48
 4cc:	71 09       	sbc	r23, r1
 4ce:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <temp_1+0x1>
 4d2:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <temp_1>
		break;
 4d6:	08 95       	ret
	case 2:
		temp_0 *= 10;
 4d8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <temp_0>
 4dc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <temp_0+0x1>
 4e0:	9c 01       	movw	r18, r24
 4e2:	22 0f       	add	r18, r18
 4e4:	33 1f       	adc	r19, r19
 4e6:	88 0f       	add	r24, r24
 4e8:	99 1f       	adc	r25, r25
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
 4f2:	82 0f       	add	r24, r18
 4f4:	93 1f       	adc	r25, r19
 4f6:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <temp_0+0x1>
 4fa:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <temp_0>
		temp_1 *= 10;
 4fe:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp_1>
 502:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp_1+0x1>
 506:	9c 01       	movw	r18, r24
 508:	22 0f       	add	r18, r18
 50a:	33 1f       	adc	r19, r19
 50c:	88 0f       	add	r24, r24
 50e:	99 1f       	adc	r25, r25
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	82 0f       	add	r24, r18
 51a:	93 1f       	adc	r25, r19
 51c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <temp_1+0x1>
 520:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <temp_1>
		temp_2 = (press_key - 48) * 1;
 524:	70 e0       	ldi	r23, 0x00	; 0
 526:	60 53       	subi	r22, 0x30	; 48
 528:	71 09       	sbc	r23, r1
 52a:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <temp_2+0x1>
 52e:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <temp_2>
		break;
 532:	08 95       	ret
	case 3:
		temp_0 *= 10;
 534:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <temp_0>
 538:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <temp_0+0x1>
 53c:	9c 01       	movw	r18, r24
 53e:	22 0f       	add	r18, r18
 540:	33 1f       	adc	r19, r19
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	88 0f       	add	r24, r24
 548:	99 1f       	adc	r25, r25
 54a:	88 0f       	add	r24, r24
 54c:	99 1f       	adc	r25, r25
 54e:	82 0f       	add	r24, r18
 550:	93 1f       	adc	r25, r19
 552:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <temp_0+0x1>
 556:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <temp_0>
		temp_1 *= 10;
 55a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp_1>
 55e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp_1+0x1>
 562:	9c 01       	movw	r18, r24
 564:	22 0f       	add	r18, r18
 566:	33 1f       	adc	r19, r19
 568:	88 0f       	add	r24, r24
 56a:	99 1f       	adc	r25, r25
 56c:	88 0f       	add	r24, r24
 56e:	99 1f       	adc	r25, r25
 570:	88 0f       	add	r24, r24
 572:	99 1f       	adc	r25, r25
 574:	82 0f       	add	r24, r18
 576:	93 1f       	adc	r25, r19
 578:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <temp_1+0x1>
 57c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <temp_1>
		temp_2 *= 10;
 580:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <temp_2>
 584:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <temp_2+0x1>
 588:	9c 01       	movw	r18, r24
 58a:	22 0f       	add	r18, r18
 58c:	33 1f       	adc	r19, r19
 58e:	88 0f       	add	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	88 0f       	add	r24, r24
 594:	99 1f       	adc	r25, r25
 596:	88 0f       	add	r24, r24
 598:	99 1f       	adc	r25, r25
 59a:	82 0f       	add	r24, r18
 59c:	93 1f       	adc	r25, r19
 59e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <temp_2+0x1>
 5a2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <temp_2>
		temp_3 = (press_key - 48) * 1;
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	60 53       	subi	r22, 0x30	; 48
 5aa:	71 09       	sbc	r23, r1
 5ac:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <temp_3+0x1>
 5b0:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <temp_3>
		break;
 5b4:	08 95       	ret
	case 4:
		temp_0 *= 10;
 5b6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <temp_0>
 5ba:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <temp_0+0x1>
 5be:	9c 01       	movw	r18, r24
 5c0:	22 0f       	add	r18, r18
 5c2:	33 1f       	adc	r19, r19
 5c4:	88 0f       	add	r24, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	88 0f       	add	r24, r24
 5ca:	99 1f       	adc	r25, r25
 5cc:	88 0f       	add	r24, r24
 5ce:	99 1f       	adc	r25, r25
 5d0:	82 0f       	add	r24, r18
 5d2:	93 1f       	adc	r25, r19
 5d4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <temp_0+0x1>
 5d8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <temp_0>
		temp_1 *= 10;
 5dc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp_1>
 5e0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp_1+0x1>
 5e4:	9c 01       	movw	r18, r24
 5e6:	22 0f       	add	r18, r18
 5e8:	33 1f       	adc	r19, r19
 5ea:	88 0f       	add	r24, r24
 5ec:	99 1f       	adc	r25, r25
 5ee:	88 0f       	add	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	82 0f       	add	r24, r18
 5f8:	93 1f       	adc	r25, r19
 5fa:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <temp_1+0x1>
 5fe:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <temp_1>
		temp_2 *= 10;
 602:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <temp_2>
 606:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <temp_2+0x1>
 60a:	9c 01       	movw	r18, r24
 60c:	22 0f       	add	r18, r18
 60e:	33 1f       	adc	r19, r19
 610:	88 0f       	add	r24, r24
 612:	99 1f       	adc	r25, r25
 614:	88 0f       	add	r24, r24
 616:	99 1f       	adc	r25, r25
 618:	88 0f       	add	r24, r24
 61a:	99 1f       	adc	r25, r25
 61c:	82 0f       	add	r24, r18
 61e:	93 1f       	adc	r25, r19
 620:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <temp_2+0x1>
 624:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <temp_2>
		temp_3 *= 10;
 628:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <temp_3>
 62c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <temp_3+0x1>
 630:	9c 01       	movw	r18, r24
 632:	22 0f       	add	r18, r18
 634:	33 1f       	adc	r19, r19
 636:	88 0f       	add	r24, r24
 638:	99 1f       	adc	r25, r25
 63a:	88 0f       	add	r24, r24
 63c:	99 1f       	adc	r25, r25
 63e:	88 0f       	add	r24, r24
 640:	99 1f       	adc	r25, r25
 642:	82 0f       	add	r24, r18
 644:	93 1f       	adc	r25, r19
 646:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <temp_3+0x1>
 64a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <temp_3>
		temp_4 = (press_key - 48) * 1;
 64e:	70 e0       	ldi	r23, 0x00	; 0
 650:	60 53       	subi	r22, 0x30	; 48
 652:	71 09       	sbc	r23, r1
 654:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__data_end+0x1>
 658:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__data_end>
 65c:	08 95       	ret

0000065e <main>:
{
	int flag_1 = 1, flag_2 = 1, sum = 0, sub = 0, multi = 0, div = 0, mod = 0, root = 0, res = 0;
	int first_number, second_number;
	char press_key;
	int number_counter = 0;
	LCD_INIT_FUNC();
 65e:	0e 94 a0 01 	call	0x340	; 0x340 <LCD_INIT_FUNC>
	KPAD_INIT_FUNC();
 662:	0e 94 85 00 	call	0x10a	; 0x10a <KPAD_INIT_FUNC>
int main(void)
{
	int flag_1 = 1, flag_2 = 1, sum = 0, sub = 0, multi = 0, div = 0, mod = 0, root = 0, res = 0;
	int first_number, second_number;
	char press_key;
	int number_counter = 0;
 666:	c0 e0       	ldi	r28, 0x00	; 0
 668:	d0 e0       	ldi	r29, 0x00	; 0

static int temp_0 = 0, temp_1 = 0, temp_2 = 0, temp_3 = 0, temp_4 = 0;
void modify_number(int number_counter, char press_key);
int main(void)
{
	int flag_1 = 1, flag_2 = 1, sum = 0, sub = 0, multi = 0, div = 0, mod = 0, root = 0, res = 0;
 66a:	61 2c       	mov	r6, r1
 66c:	71 2c       	mov	r7, r1
 66e:	41 2c       	mov	r4, r1
 670:	51 2c       	mov	r5, r1
 672:	81 2c       	mov	r8, r1
 674:	91 2c       	mov	r9, r1
 676:	a1 2c       	mov	r10, r1
 678:	b1 2c       	mov	r11, r1
 67a:	c1 2c       	mov	r12, r1
 67c:	d1 2c       	mov	r13, r1
 67e:	01 e0       	ldi	r16, 0x01	; 1
 680:	10 e0       	ldi	r17, 0x00	; 0
 682:	8a c0       	rjmp	.+276    	; 0x798 <main+0x13a>
	KPAD_INIT_FUNC();
	while (1)
	{
		while (flag_1)
		{
			press_key = KPAD_GET_CHAR();
 684:	0e 94 8c 00 	call	0x118	; 0x118 <KPAD_GET_CHAR>
 688:	f8 2e       	mov	r15, r24
			switch (press_key)
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	fc 01       	movw	r30, r24
 68e:	b5 97       	sbiw	r30, 0x25	; 37
 690:	ee 32       	cpi	r30, 0x2E	; 46
 692:	f1 05       	cpc	r31, r1
 694:	08 f0       	brcs	.+2      	; 0x698 <main+0x3a>
 696:	80 c0       	rjmp	.+256    	; 0x798 <main+0x13a>
 698:	e6 5d       	subi	r30, 0xD6	; 214
 69a:	ff 4f       	sbci	r31, 0xFF	; 255
 69c:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__tablejump2__>
			{
			case '0':
				LCD_SEND_CHAR_FUNC(press_key);
 6a0:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 6a4:	6f 2d       	mov	r22, r15
 6a6:	ce 01       	movw	r24, r28
 6a8:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 6ac:	21 96       	adiw	r28, 0x01	; 1
				break;
 6ae:	74 c0       	rjmp	.+232    	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '1':
				LCD_SEND_CHAR_FUNC(press_key);
 6b0:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 6b4:	6f 2d       	mov	r22, r15
 6b6:	ce 01       	movw	r24, r28
 6b8:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 6bc:	21 96       	adiw	r28, 0x01	; 1
				break;
 6be:	6c c0       	rjmp	.+216    	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '2':
				LCD_SEND_CHAR_FUNC(press_key);
 6c0:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 6c4:	6f 2d       	mov	r22, r15
 6c6:	ce 01       	movw	r24, r28
 6c8:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 6cc:	21 96       	adiw	r28, 0x01	; 1
				break;
 6ce:	64 c0       	rjmp	.+200    	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '3':
				LCD_SEND_CHAR_FUNC(press_key);
 6d0:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 6d4:	6f 2d       	mov	r22, r15
 6d6:	ce 01       	movw	r24, r28
 6d8:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 6dc:	21 96       	adiw	r28, 0x01	; 1
				break;
 6de:	5c c0       	rjmp	.+184    	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '4':
				LCD_SEND_CHAR_FUNC(press_key);
 6e0:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 6e4:	6f 2d       	mov	r22, r15
 6e6:	ce 01       	movw	r24, r28
 6e8:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 6ec:	21 96       	adiw	r28, 0x01	; 1
				break;
 6ee:	54 c0       	rjmp	.+168    	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '5':
				LCD_SEND_CHAR_FUNC(press_key);
 6f0:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 6f4:	6f 2d       	mov	r22, r15
 6f6:	ce 01       	movw	r24, r28
 6f8:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 6fc:	21 96       	adiw	r28, 0x01	; 1
				break;
 6fe:	4c c0       	rjmp	.+152    	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '6':
				LCD_SEND_CHAR_FUNC(press_key);
 700:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 704:	6f 2d       	mov	r22, r15
 706:	ce 01       	movw	r24, r28
 708:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 70c:	21 96       	adiw	r28, 0x01	; 1
				break;
 70e:	44 c0       	rjmp	.+136    	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '7':
				LCD_SEND_CHAR_FUNC(press_key);
 710:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 714:	6f 2d       	mov	r22, r15
 716:	ce 01       	movw	r24, r28
 718:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 71c:	21 96       	adiw	r28, 0x01	; 1
				break;
 71e:	3c c0       	rjmp	.+120    	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '8':
				LCD_SEND_CHAR_FUNC(press_key);
 720:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 724:	6f 2d       	mov	r22, r15
 726:	ce 01       	movw	r24, r28
 728:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 72c:	21 96       	adiw	r28, 0x01	; 1
				break;
 72e:	34 c0       	rjmp	.+104    	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '9':
				LCD_SEND_CHAR_FUNC(press_key);
 730:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 734:	6f 2d       	mov	r22, r15
 736:	ce 01       	movw	r24, r28
 738:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 73c:	21 96       	adiw	r28, 0x01	; 1
				break;
 73e:	2c c0       	rjmp	.+88     	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '+':
				LCD_SEND_CHAR_FUNC(press_key);
 740:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				sum = 1;
 744:	cc 24       	eor	r12, r12
 746:	c3 94       	inc	r12
 748:	d1 2c       	mov	r13, r1
				flag_1 = 0;
 74a:	00 e0       	ldi	r16, 0x00	; 0
 74c:	10 e0       	ldi	r17, 0x00	; 0
				break;
 74e:	24 c0       	rjmp	.+72     	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '-':
				LCD_SEND_CHAR_FUNC(press_key);
 750:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				sub = 1;
 754:	aa 24       	eor	r10, r10
 756:	a3 94       	inc	r10
 758:	b1 2c       	mov	r11, r1
				flag_1 = 0;
 75a:	00 e0       	ldi	r16, 0x00	; 0
 75c:	10 e0       	ldi	r17, 0x00	; 0
				break;
 75e:	1c c0       	rjmp	.+56     	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '*':
				LCD_SEND_CHAR_FUNC(press_key);
 760:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				multi = 1;
 764:	88 24       	eor	r8, r8
 766:	83 94       	inc	r8
 768:	91 2c       	mov	r9, r1
				flag_1 = 0;
 76a:	00 e0       	ldi	r16, 0x00	; 0
 76c:	10 e0       	ldi	r17, 0x00	; 0
				break;
 76e:	14 c0       	rjmp	.+40     	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '/':
				LCD_SEND_CHAR_FUNC(press_key);
 770:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				div = 1;
 774:	44 24       	eor	r4, r4
 776:	43 94       	inc	r4
 778:	51 2c       	mov	r5, r1
				flag_1 = 0;
 77a:	00 e0       	ldi	r16, 0x00	; 0
 77c:	10 e0       	ldi	r17, 0x00	; 0
				break;
 77e:	0c c0       	rjmp	.+24     	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case 'R':
				LCD_SEND_CHAR_FUNC(press_key);
 780:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				root = 1;
				flag_1 = 0;
 784:	00 e0       	ldi	r16, 0x00	; 0
 786:	10 e0       	ldi	r17, 0x00	; 0
				break;
 788:	07 c0       	rjmp	.+14     	; 0x798 <main+0x13a>
			/////////////////////////////////////////////
			case '%':
				LCD_SEND_CHAR_FUNC(press_key);
 78a:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				mod = 1;
 78e:	66 24       	eor	r6, r6
 790:	63 94       	inc	r6
 792:	71 2c       	mov	r7, r1
				flag_1 = 0;
 794:	00 e0       	ldi	r16, 0x00	; 0
 796:	10 e0       	ldi	r17, 0x00	; 0
	int number_counter = 0;
	LCD_INIT_FUNC();
	KPAD_INIT_FUNC();
	while (1)
	{
		while (flag_1)
 798:	01 15       	cp	r16, r1
 79a:	11 05       	cpc	r17, r1
 79c:	09 f0       	breq	.+2      	; 0x7a0 <main+0x142>
 79e:	72 cf       	rjmp	.-284    	; 0x684 <main+0x26>
				flag_1 = 0;
				break;
				/////////////////////////////////////////////
			}
		}
		first_number = temp_0 + temp_1 + temp_2 + temp_3 + temp_4;
 7a0:	e0 90 6c 00 	lds	r14, 0x006C	; 0x80006c <temp_0>
 7a4:	f0 90 6d 00 	lds	r15, 0x006D	; 0x80006d <temp_0+0x1>
 7a8:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp_1>
 7ac:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp_1+0x1>
 7b0:	e8 0e       	add	r14, r24
 7b2:	f9 1e       	adc	r15, r25
 7b4:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <temp_2>
 7b8:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <temp_2+0x1>
 7bc:	e8 0e       	add	r14, r24
 7be:	f9 1e       	adc	r15, r25
 7c0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <temp_3>
 7c4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <temp_3+0x1>
 7c8:	e8 0e       	add	r14, r24
 7ca:	f9 1e       	adc	r15, r25
 7cc:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 7d0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 7d4:	e8 0e       	add	r14, r24
 7d6:	f9 1e       	adc	r15, r25
		temp_0 = 0, temp_1 = 0, temp_2 = 0, temp_3 = 0, temp_4 = 0;
 7d8:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <temp_0+0x1>
 7dc:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <temp_0>
 7e0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <temp_1+0x1>
 7e4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <temp_1>
 7e8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <temp_2+0x1>
 7ec:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <temp_2>
 7f0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <temp_3+0x1>
 7f4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <temp_3>
 7f8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 7fc:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
		number_counter = 0;
 800:	c0 e0       	ldi	r28, 0x00	; 0
 802:	d0 e0       	ldi	r29, 0x00	; 0
		while (flag_2)
 804:	01 e0       	ldi	r16, 0x01	; 1
 806:	10 e0       	ldi	r17, 0x00	; 0
 808:	66 c0       	rjmp	.+204    	; 0x8d6 <__stack+0x77>
		{
			press_key = KPAD_GET_CHAR();
 80a:	0e 94 8c 00 	call	0x118	; 0x118 <KPAD_GET_CHAR>
 80e:	38 2e       	mov	r3, r24
			switch (press_key)
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	fc 01       	movw	r30, r24
 814:	f0 97       	sbiw	r30, 0x30	; 48
 816:	ee 30       	cpi	r30, 0x0E	; 14
 818:	f1 05       	cpc	r31, r1
 81a:	08 f0       	brcs	.+2      	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 81c:	5c c0       	rjmp	.+184    	; 0x8d6 <__stack+0x77>
 81e:	e8 5a       	subi	r30, 0xA8	; 168
 820:	ff 4f       	sbci	r31, 0xFF	; 255
 822:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__tablejump2__>
			{
			case '0':
				LCD_SEND_CHAR_FUNC(press_key);
 826:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 82a:	63 2d       	mov	r22, r3
 82c:	ce 01       	movw	r24, r28
 82e:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 832:	21 96       	adiw	r28, 0x01	; 1
				break;
 834:	50 c0       	rjmp	.+160    	; 0x8d6 <__stack+0x77>
			/////////////////////////////////////////////
			case '1':
				LCD_SEND_CHAR_FUNC(press_key);
 836:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 83a:	63 2d       	mov	r22, r3
 83c:	ce 01       	movw	r24, r28
 83e:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 842:	21 96       	adiw	r28, 0x01	; 1
				break;
 844:	48 c0       	rjmp	.+144    	; 0x8d6 <__stack+0x77>
			/////////////////////////////////////////////
			case '2':
				LCD_SEND_CHAR_FUNC(press_key);
 846:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 84a:	63 2d       	mov	r22, r3
 84c:	ce 01       	movw	r24, r28
 84e:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 852:	21 96       	adiw	r28, 0x01	; 1
				break;
 854:	40 c0       	rjmp	.+128    	; 0x8d6 <__stack+0x77>
			/////////////////////////////////////////////
			case '3':
				LCD_SEND_CHAR_FUNC(press_key);
 856:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 85a:	63 2d       	mov	r22, r3
 85c:	ce 01       	movw	r24, r28
 85e:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 862:	21 96       	adiw	r28, 0x01	; 1
				break;
 864:	38 c0       	rjmp	.+112    	; 0x8d6 <__stack+0x77>
			/////////////////////////////////////////////
			case '4':
				LCD_SEND_CHAR_FUNC(press_key);
 866:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 86a:	63 2d       	mov	r22, r3
 86c:	ce 01       	movw	r24, r28
 86e:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 872:	21 96       	adiw	r28, 0x01	; 1
				break;
 874:	30 c0       	rjmp	.+96     	; 0x8d6 <__stack+0x77>
			/////////////////////////////////////////////
			case '5':
				LCD_SEND_CHAR_FUNC(press_key);
 876:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 87a:	63 2d       	mov	r22, r3
 87c:	ce 01       	movw	r24, r28
 87e:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 882:	21 96       	adiw	r28, 0x01	; 1
				break;
 884:	28 c0       	rjmp	.+80     	; 0x8d6 <__stack+0x77>
			/////////////////////////////////////////////
			case '6':
				LCD_SEND_CHAR_FUNC(press_key);
 886:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 88a:	63 2d       	mov	r22, r3
 88c:	ce 01       	movw	r24, r28
 88e:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 892:	21 96       	adiw	r28, 0x01	; 1
				break;
 894:	20 c0       	rjmp	.+64     	; 0x8d6 <__stack+0x77>
			/////////////////////////////////////////////
			case '7':
				LCD_SEND_CHAR_FUNC(press_key);
 896:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 89a:	63 2d       	mov	r22, r3
 89c:	ce 01       	movw	r24, r28
 89e:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 8a2:	21 96       	adiw	r28, 0x01	; 1
				break;
 8a4:	18 c0       	rjmp	.+48     	; 0x8d6 <__stack+0x77>
			/////////////////////////////////////////////
			case '8':
				LCD_SEND_CHAR_FUNC(press_key);
 8a6:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 8aa:	63 2d       	mov	r22, r3
 8ac:	ce 01       	movw	r24, r28
 8ae:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 8b2:	21 96       	adiw	r28, 0x01	; 1
				break;
 8b4:	10 c0       	rjmp	.+32     	; 0x8d6 <__stack+0x77>
			/////////////////////////////////////////////
			case '9':
				LCD_SEND_CHAR_FUNC(press_key);
 8b6:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 8ba:	63 2d       	mov	r22, r3
 8bc:	ce 01       	movw	r24, r28
 8be:	0e 94 38 02 	call	0x470	; 0x470 <modify_number>
				number_counter++;
 8c2:	21 96       	adiw	r28, 0x01	; 1
				break;
 8c4:	08 c0       	rjmp	.+16     	; 0x8d6 <__stack+0x77>
			case '=':
				LCD_SEND_CHAR_FUNC(press_key);
 8c6:	0e 94 c6 01 	call	0x38c	; 0x38c <LCD_SEND_CHAR_FUNC>
				flag_2 = 0;
				LCD_SET_CURSOR_FUNC(1, 0);
 8ca:	60 e0       	ldi	r22, 0x00	; 0
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_SET_CURSOR_FUNC>
				modify_number(number_counter, press_key);
				number_counter++;
				break;
			case '=':
				LCD_SEND_CHAR_FUNC(press_key);
				flag_2 = 0;
 8d2:	00 e0       	ldi	r16, 0x00	; 0
 8d4:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		first_number = temp_0 + temp_1 + temp_2 + temp_3 + temp_4;
		temp_0 = 0, temp_1 = 0, temp_2 = 0, temp_3 = 0, temp_4 = 0;
		number_counter = 0;
		while (flag_2)
 8d6:	01 15       	cp	r16, r1
 8d8:	11 05       	cpc	r17, r1
 8da:	09 f0       	breq	.+2      	; 0x8de <__stack+0x7f>
 8dc:	96 cf       	rjmp	.-212    	; 0x80a <__DATA_REGION_LENGTH__+0xa>
				flag_2 = 0;
				LCD_SET_CURSOR_FUNC(1, 0);
				break;
			}
		}
		second_number = temp_0 + temp_1 + temp_2 + temp_3 + temp_4;
 8de:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <temp_0>
 8e2:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <temp_0+0x1>
 8e6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp_1>
 8ea:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp_1+0x1>
 8ee:	82 0f       	add	r24, r18
 8f0:	93 1f       	adc	r25, r19
 8f2:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <temp_2>
 8f6:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <temp_2+0x1>
 8fa:	82 0f       	add	r24, r18
 8fc:	93 1f       	adc	r25, r19
 8fe:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <temp_3>
 902:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <temp_3+0x1>
 906:	82 0f       	add	r24, r18
 908:	93 1f       	adc	r25, r19
 90a:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_end>
 90e:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_end+0x1>
 912:	68 0f       	add	r22, r24
 914:	79 1f       	adc	r23, r25
		if (sum)
 916:	c1 14       	cp	r12, r1
 918:	d1 04       	cpc	r13, r1
 91a:	31 f0       	breq	.+12     	; 0x928 <__stack+0xc9>
		{
			res = second_number + first_number;
			LCD_DISPLAY_NUMBER_FUNC(res);
 91c:	c7 01       	movw	r24, r14
 91e:	86 0f       	add	r24, r22
 920:	97 1f       	adc	r25, r23
 922:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_DISPLAY_NUMBER_FUNC>
 926:	28 c0       	rjmp	.+80     	; 0x978 <__stack+0x119>
		}
		else if (sub)
 928:	a1 14       	cp	r10, r1
 92a:	b1 04       	cpc	r11, r1
 92c:	31 f0       	breq	.+12     	; 0x93a <__stack+0xdb>
		{
			res = first_number - second_number;
			LCD_DISPLAY_NUMBER_FUNC(res);
 92e:	c7 01       	movw	r24, r14
 930:	86 1b       	sub	r24, r22
 932:	97 0b       	sbc	r25, r23
 934:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_DISPLAY_NUMBER_FUNC>
 938:	1f c0       	rjmp	.+62     	; 0x978 <__stack+0x119>
		}
		else if (multi)
 93a:	81 14       	cp	r8, r1
 93c:	91 04       	cpc	r9, r1
 93e:	51 f0       	breq	.+20     	; 0x954 <__stack+0xf5>
		{
			res = second_number * first_number;
			LCD_DISPLAY_NUMBER_FUNC(res);
 940:	e6 9e       	mul	r14, r22
 942:	c0 01       	movw	r24, r0
 944:	e7 9e       	mul	r14, r23
 946:	90 0d       	add	r25, r0
 948:	f6 9e       	mul	r15, r22
 94a:	90 0d       	add	r25, r0
 94c:	11 24       	eor	r1, r1
 94e:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_DISPLAY_NUMBER_FUNC>
 952:	12 c0       	rjmp	.+36     	; 0x978 <__stack+0x119>
		}
		else if (mod)
 954:	61 14       	cp	r6, r1
 956:	71 04       	cpc	r7, r1
 958:	31 f0       	breq	.+12     	; 0x966 <__stack+0x107>
		{
			res = first_number % second_number;
 95a:	c7 01       	movw	r24, r14
 95c:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__divmodhi4>
			LCD_DISPLAY_NUMBER_FUNC(res);
 960:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_DISPLAY_NUMBER_FUNC>
 964:	09 c0       	rjmp	.+18     	; 0x978 <__stack+0x119>
		}
		else if (div)
 966:	41 14       	cp	r4, r1
 968:	51 04       	cpc	r5, r1
 96a:	31 f0       	breq	.+12     	; 0x978 <__stack+0x119>
		{
			res = first_number / second_number;
 96c:	c7 01       	movw	r24, r14
 96e:	0e 94 dd 04 	call	0x9ba	; 0x9ba <__divmodhi4>
 972:	cb 01       	movw	r24, r22
			LCD_DISPLAY_NUMBER_FUNC(res);
 974:	0e 94 0b 02 	call	0x416	; 0x416 <LCD_DISPLAY_NUMBER_FUNC>
		}
		while (KPAD_GET_CHAR() != '!')
 978:	0e 94 8c 00 	call	0x118	; 0x118 <KPAD_GET_CHAR>
 97c:	81 32       	cpi	r24, 0x21	; 33
 97e:	e1 f7       	brne	.-8      	; 0x978 <__stack+0x119>
			;
		LCD_CLEAR_SCREEN_FUNC();
 980:	0e 94 9c 01 	call	0x338	; 0x338 <LCD_CLEAR_SCREEN_FUNC>
		LCD_SET_CURSOR_FUNC(0, 0);
 984:	60 e0       	ldi	r22, 0x00	; 0
 986:	80 e0       	ldi	r24, 0x00	; 0
 988:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_SET_CURSOR_FUNC>
		flag_2 = 1;
		flag_1 = 1;
		temp_0 = 0, temp_1 = 0, temp_2 = 0, temp_3 = 0, temp_4 = 0;
 98c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <temp_0+0x1>
 990:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <temp_0>
 994:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <temp_1+0x1>
 998:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <temp_1>
 99c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <temp_2+0x1>
 9a0:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <temp_2>
 9a4:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <temp_3+0x1>
 9a8:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <temp_3>
 9ac:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 9b0:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
		while (KPAD_GET_CHAR() != '!')
			;
		LCD_CLEAR_SCREEN_FUNC();
		LCD_SET_CURSOR_FUNC(0, 0);
		flag_2 = 1;
		flag_1 = 1;
 9b4:	01 e0       	ldi	r16, 0x01	; 1
 9b6:	10 e0       	ldi	r17, 0x00	; 0
		temp_0 = 0, temp_1 = 0, temp_2 = 0, temp_3 = 0, temp_4 = 0;
		first_number = 0;
		second_number = 0;
	}
 9b8:	ef ce       	rjmp	.-546    	; 0x798 <main+0x13a>

000009ba <__divmodhi4>:
 9ba:	97 fb       	bst	r25, 7
 9bc:	07 2e       	mov	r0, r23
 9be:	16 f4       	brtc	.+4      	; 0x9c4 <__divmodhi4+0xa>
 9c0:	00 94       	com	r0
 9c2:	07 d0       	rcall	.+14     	; 0x9d2 <__divmodhi4_neg1>
 9c4:	77 fd       	sbrc	r23, 7
 9c6:	09 d0       	rcall	.+18     	; 0x9da <__divmodhi4_neg2>
 9c8:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__udivmodhi4>
 9cc:	07 fc       	sbrc	r0, 7
 9ce:	05 d0       	rcall	.+10     	; 0x9da <__divmodhi4_neg2>
 9d0:	3e f4       	brtc	.+14     	; 0x9e0 <__divmodhi4_exit>

000009d2 <__divmodhi4_neg1>:
 9d2:	90 95       	com	r25
 9d4:	81 95       	neg	r24
 9d6:	9f 4f       	sbci	r25, 0xFF	; 255
 9d8:	08 95       	ret

000009da <__divmodhi4_neg2>:
 9da:	70 95       	com	r23
 9dc:	61 95       	neg	r22
 9de:	7f 4f       	sbci	r23, 0xFF	; 255

000009e0 <__divmodhi4_exit>:
 9e0:	08 95       	ret

000009e2 <__tablejump2__>:
 9e2:	ee 0f       	add	r30, r30
 9e4:	ff 1f       	adc	r31, r31
 9e6:	05 90       	lpm	r0, Z+
 9e8:	f4 91       	lpm	r31, Z
 9ea:	e0 2d       	mov	r30, r0
 9ec:	09 94       	ijmp

000009ee <__udivmodhi4>:
 9ee:	aa 1b       	sub	r26, r26
 9f0:	bb 1b       	sub	r27, r27
 9f2:	51 e1       	ldi	r21, 0x11	; 17
 9f4:	07 c0       	rjmp	.+14     	; 0xa04 <__udivmodhi4_ep>

000009f6 <__udivmodhi4_loop>:
 9f6:	aa 1f       	adc	r26, r26
 9f8:	bb 1f       	adc	r27, r27
 9fa:	a6 17       	cp	r26, r22
 9fc:	b7 07       	cpc	r27, r23
 9fe:	10 f0       	brcs	.+4      	; 0xa04 <__udivmodhi4_ep>
 a00:	a6 1b       	sub	r26, r22
 a02:	b7 0b       	sbc	r27, r23

00000a04 <__udivmodhi4_ep>:
 a04:	88 1f       	adc	r24, r24
 a06:	99 1f       	adc	r25, r25
 a08:	5a 95       	dec	r21
 a0a:	a9 f7       	brne	.-22     	; 0x9f6 <__udivmodhi4_loop>
 a0c:	80 95       	com	r24
 a0e:	90 95       	com	r25
 a10:	bc 01       	movw	r22, r24
 a12:	cd 01       	movw	r24, r26
 a14:	08 95       	ret

00000a16 <sprintf>:
 a16:	ae e0       	ldi	r26, 0x0E	; 14
 a18:	b0 e0       	ldi	r27, 0x00	; 0
 a1a:	e1 e1       	ldi	r30, 0x11	; 17
 a1c:	f5 e0       	ldi	r31, 0x05	; 5
 a1e:	0c 94 cc 07 	jmp	0xf98	; 0xf98 <__prologue_saves__+0x1c>
 a22:	0d 89       	ldd	r16, Y+21	; 0x15
 a24:	1e 89       	ldd	r17, Y+22	; 0x16
 a26:	86 e0       	ldi	r24, 0x06	; 6
 a28:	8c 83       	std	Y+4, r24	; 0x04
 a2a:	1a 83       	std	Y+2, r17	; 0x02
 a2c:	09 83       	std	Y+1, r16	; 0x01
 a2e:	8f ef       	ldi	r24, 0xFF	; 255
 a30:	9f e7       	ldi	r25, 0x7F	; 127
 a32:	9e 83       	std	Y+6, r25	; 0x06
 a34:	8d 83       	std	Y+5, r24	; 0x05
 a36:	ae 01       	movw	r20, r28
 a38:	47 5e       	subi	r20, 0xE7	; 231
 a3a:	5f 4f       	sbci	r21, 0xFF	; 255
 a3c:	6f 89       	ldd	r22, Y+23	; 0x17
 a3e:	78 8d       	ldd	r23, Y+24	; 0x18
 a40:	ce 01       	movw	r24, r28
 a42:	01 96       	adiw	r24, 0x01	; 1
 a44:	0e 94 2d 05 	call	0xa5a	; 0xa5a <vfprintf>
 a48:	ef 81       	ldd	r30, Y+7	; 0x07
 a4a:	f8 85       	ldd	r31, Y+8	; 0x08
 a4c:	e0 0f       	add	r30, r16
 a4e:	f1 1f       	adc	r31, r17
 a50:	10 82       	st	Z, r1
 a52:	2e 96       	adiw	r28, 0x0e	; 14
 a54:	e4 e0       	ldi	r30, 0x04	; 4
 a56:	0c 94 e8 07 	jmp	0xfd0	; 0xfd0 <__epilogue_restores__+0x1c>

00000a5a <vfprintf>:
 a5a:	ab e0       	ldi	r26, 0x0B	; 11
 a5c:	b0 e0       	ldi	r27, 0x00	; 0
 a5e:	e3 e3       	ldi	r30, 0x33	; 51
 a60:	f5 e0       	ldi	r31, 0x05	; 5
 a62:	0c 94 be 07 	jmp	0xf7c	; 0xf7c <__prologue_saves__>
 a66:	6c 01       	movw	r12, r24
 a68:	7b 01       	movw	r14, r22
 a6a:	8a 01       	movw	r16, r20
 a6c:	fc 01       	movw	r30, r24
 a6e:	17 82       	std	Z+7, r1	; 0x07
 a70:	16 82       	std	Z+6, r1	; 0x06
 a72:	83 81       	ldd	r24, Z+3	; 0x03
 a74:	81 ff       	sbrs	r24, 1
 a76:	cc c1       	rjmp	.+920    	; 0xe10 <vfprintf+0x3b6>
 a78:	ce 01       	movw	r24, r28
 a7a:	01 96       	adiw	r24, 0x01	; 1
 a7c:	3c 01       	movw	r6, r24
 a7e:	f6 01       	movw	r30, r12
 a80:	93 81       	ldd	r25, Z+3	; 0x03
 a82:	f7 01       	movw	r30, r14
 a84:	93 fd       	sbrc	r25, 3
 a86:	85 91       	lpm	r24, Z+
 a88:	93 ff       	sbrs	r25, 3
 a8a:	81 91       	ld	r24, Z+
 a8c:	7f 01       	movw	r14, r30
 a8e:	88 23       	and	r24, r24
 a90:	09 f4       	brne	.+2      	; 0xa94 <vfprintf+0x3a>
 a92:	ba c1       	rjmp	.+884    	; 0xe08 <vfprintf+0x3ae>
 a94:	85 32       	cpi	r24, 0x25	; 37
 a96:	39 f4       	brne	.+14     	; 0xaa6 <vfprintf+0x4c>
 a98:	93 fd       	sbrc	r25, 3
 a9a:	85 91       	lpm	r24, Z+
 a9c:	93 ff       	sbrs	r25, 3
 a9e:	81 91       	ld	r24, Z+
 aa0:	7f 01       	movw	r14, r30
 aa2:	85 32       	cpi	r24, 0x25	; 37
 aa4:	29 f4       	brne	.+10     	; 0xab0 <vfprintf+0x56>
 aa6:	b6 01       	movw	r22, r12
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	0e 94 24 07 	call	0xe48	; 0xe48 <fputc>
 aae:	e7 cf       	rjmp	.-50     	; 0xa7e <vfprintf+0x24>
 ab0:	91 2c       	mov	r9, r1
 ab2:	21 2c       	mov	r2, r1
 ab4:	31 2c       	mov	r3, r1
 ab6:	ff e1       	ldi	r31, 0x1F	; 31
 ab8:	f3 15       	cp	r31, r3
 aba:	d8 f0       	brcs	.+54     	; 0xaf2 <vfprintf+0x98>
 abc:	8b 32       	cpi	r24, 0x2B	; 43
 abe:	79 f0       	breq	.+30     	; 0xade <vfprintf+0x84>
 ac0:	38 f4       	brcc	.+14     	; 0xad0 <vfprintf+0x76>
 ac2:	80 32       	cpi	r24, 0x20	; 32
 ac4:	79 f0       	breq	.+30     	; 0xae4 <vfprintf+0x8a>
 ac6:	83 32       	cpi	r24, 0x23	; 35
 ac8:	a1 f4       	brne	.+40     	; 0xaf2 <vfprintf+0x98>
 aca:	23 2d       	mov	r18, r3
 acc:	20 61       	ori	r18, 0x10	; 16
 ace:	1d c0       	rjmp	.+58     	; 0xb0a <vfprintf+0xb0>
 ad0:	8d 32       	cpi	r24, 0x2D	; 45
 ad2:	61 f0       	breq	.+24     	; 0xaec <vfprintf+0x92>
 ad4:	80 33       	cpi	r24, 0x30	; 48
 ad6:	69 f4       	brne	.+26     	; 0xaf2 <vfprintf+0x98>
 ad8:	23 2d       	mov	r18, r3
 ada:	21 60       	ori	r18, 0x01	; 1
 adc:	16 c0       	rjmp	.+44     	; 0xb0a <vfprintf+0xb0>
 ade:	83 2d       	mov	r24, r3
 ae0:	82 60       	ori	r24, 0x02	; 2
 ae2:	38 2e       	mov	r3, r24
 ae4:	e3 2d       	mov	r30, r3
 ae6:	e4 60       	ori	r30, 0x04	; 4
 ae8:	3e 2e       	mov	r3, r30
 aea:	2a c0       	rjmp	.+84     	; 0xb40 <vfprintf+0xe6>
 aec:	f3 2d       	mov	r31, r3
 aee:	f8 60       	ori	r31, 0x08	; 8
 af0:	1d c0       	rjmp	.+58     	; 0xb2c <vfprintf+0xd2>
 af2:	37 fc       	sbrc	r3, 7
 af4:	2d c0       	rjmp	.+90     	; 0xb50 <vfprintf+0xf6>
 af6:	20 ed       	ldi	r18, 0xD0	; 208
 af8:	28 0f       	add	r18, r24
 afa:	2a 30       	cpi	r18, 0x0A	; 10
 afc:	40 f0       	brcs	.+16     	; 0xb0e <vfprintf+0xb4>
 afe:	8e 32       	cpi	r24, 0x2E	; 46
 b00:	b9 f4       	brne	.+46     	; 0xb30 <vfprintf+0xd6>
 b02:	36 fc       	sbrc	r3, 6
 b04:	81 c1       	rjmp	.+770    	; 0xe08 <vfprintf+0x3ae>
 b06:	23 2d       	mov	r18, r3
 b08:	20 64       	ori	r18, 0x40	; 64
 b0a:	32 2e       	mov	r3, r18
 b0c:	19 c0       	rjmp	.+50     	; 0xb40 <vfprintf+0xe6>
 b0e:	36 fe       	sbrs	r3, 6
 b10:	06 c0       	rjmp	.+12     	; 0xb1e <vfprintf+0xc4>
 b12:	8a e0       	ldi	r24, 0x0A	; 10
 b14:	98 9e       	mul	r9, r24
 b16:	20 0d       	add	r18, r0
 b18:	11 24       	eor	r1, r1
 b1a:	92 2e       	mov	r9, r18
 b1c:	11 c0       	rjmp	.+34     	; 0xb40 <vfprintf+0xe6>
 b1e:	ea e0       	ldi	r30, 0x0A	; 10
 b20:	2e 9e       	mul	r2, r30
 b22:	20 0d       	add	r18, r0
 b24:	11 24       	eor	r1, r1
 b26:	22 2e       	mov	r2, r18
 b28:	f3 2d       	mov	r31, r3
 b2a:	f0 62       	ori	r31, 0x20	; 32
 b2c:	3f 2e       	mov	r3, r31
 b2e:	08 c0       	rjmp	.+16     	; 0xb40 <vfprintf+0xe6>
 b30:	8c 36       	cpi	r24, 0x6C	; 108
 b32:	21 f4       	brne	.+8      	; 0xb3c <vfprintf+0xe2>
 b34:	83 2d       	mov	r24, r3
 b36:	80 68       	ori	r24, 0x80	; 128
 b38:	38 2e       	mov	r3, r24
 b3a:	02 c0       	rjmp	.+4      	; 0xb40 <vfprintf+0xe6>
 b3c:	88 36       	cpi	r24, 0x68	; 104
 b3e:	41 f4       	brne	.+16     	; 0xb50 <vfprintf+0xf6>
 b40:	f7 01       	movw	r30, r14
 b42:	93 fd       	sbrc	r25, 3
 b44:	85 91       	lpm	r24, Z+
 b46:	93 ff       	sbrs	r25, 3
 b48:	81 91       	ld	r24, Z+
 b4a:	7f 01       	movw	r14, r30
 b4c:	81 11       	cpse	r24, r1
 b4e:	b3 cf       	rjmp	.-154    	; 0xab6 <vfprintf+0x5c>
 b50:	98 2f       	mov	r25, r24
 b52:	9f 7d       	andi	r25, 0xDF	; 223
 b54:	95 54       	subi	r25, 0x45	; 69
 b56:	93 30       	cpi	r25, 0x03	; 3
 b58:	28 f4       	brcc	.+10     	; 0xb64 <vfprintf+0x10a>
 b5a:	0c 5f       	subi	r16, 0xFC	; 252
 b5c:	1f 4f       	sbci	r17, 0xFF	; 255
 b5e:	9f e3       	ldi	r25, 0x3F	; 63
 b60:	99 83       	std	Y+1, r25	; 0x01
 b62:	0d c0       	rjmp	.+26     	; 0xb7e <vfprintf+0x124>
 b64:	83 36       	cpi	r24, 0x63	; 99
 b66:	31 f0       	breq	.+12     	; 0xb74 <vfprintf+0x11a>
 b68:	83 37       	cpi	r24, 0x73	; 115
 b6a:	71 f0       	breq	.+28     	; 0xb88 <vfprintf+0x12e>
 b6c:	83 35       	cpi	r24, 0x53	; 83
 b6e:	09 f0       	breq	.+2      	; 0xb72 <vfprintf+0x118>
 b70:	59 c0       	rjmp	.+178    	; 0xc24 <vfprintf+0x1ca>
 b72:	21 c0       	rjmp	.+66     	; 0xbb6 <vfprintf+0x15c>
 b74:	f8 01       	movw	r30, r16
 b76:	80 81       	ld	r24, Z
 b78:	89 83       	std	Y+1, r24	; 0x01
 b7a:	0e 5f       	subi	r16, 0xFE	; 254
 b7c:	1f 4f       	sbci	r17, 0xFF	; 255
 b7e:	88 24       	eor	r8, r8
 b80:	83 94       	inc	r8
 b82:	91 2c       	mov	r9, r1
 b84:	53 01       	movw	r10, r6
 b86:	13 c0       	rjmp	.+38     	; 0xbae <vfprintf+0x154>
 b88:	28 01       	movw	r4, r16
 b8a:	f2 e0       	ldi	r31, 0x02	; 2
 b8c:	4f 0e       	add	r4, r31
 b8e:	51 1c       	adc	r5, r1
 b90:	f8 01       	movw	r30, r16
 b92:	a0 80       	ld	r10, Z
 b94:	b1 80       	ldd	r11, Z+1	; 0x01
 b96:	36 fe       	sbrs	r3, 6
 b98:	03 c0       	rjmp	.+6      	; 0xba0 <vfprintf+0x146>
 b9a:	69 2d       	mov	r22, r9
 b9c:	70 e0       	ldi	r23, 0x00	; 0
 b9e:	02 c0       	rjmp	.+4      	; 0xba4 <vfprintf+0x14a>
 ba0:	6f ef       	ldi	r22, 0xFF	; 255
 ba2:	7f ef       	ldi	r23, 0xFF	; 255
 ba4:	c5 01       	movw	r24, r10
 ba6:	0e 94 19 07 	call	0xe32	; 0xe32 <strnlen>
 baa:	4c 01       	movw	r8, r24
 bac:	82 01       	movw	r16, r4
 bae:	f3 2d       	mov	r31, r3
 bb0:	ff 77       	andi	r31, 0x7F	; 127
 bb2:	3f 2e       	mov	r3, r31
 bb4:	16 c0       	rjmp	.+44     	; 0xbe2 <vfprintf+0x188>
 bb6:	28 01       	movw	r4, r16
 bb8:	22 e0       	ldi	r18, 0x02	; 2
 bba:	42 0e       	add	r4, r18
 bbc:	51 1c       	adc	r5, r1
 bbe:	f8 01       	movw	r30, r16
 bc0:	a0 80       	ld	r10, Z
 bc2:	b1 80       	ldd	r11, Z+1	; 0x01
 bc4:	36 fe       	sbrs	r3, 6
 bc6:	03 c0       	rjmp	.+6      	; 0xbce <vfprintf+0x174>
 bc8:	69 2d       	mov	r22, r9
 bca:	70 e0       	ldi	r23, 0x00	; 0
 bcc:	02 c0       	rjmp	.+4      	; 0xbd2 <vfprintf+0x178>
 bce:	6f ef       	ldi	r22, 0xFF	; 255
 bd0:	7f ef       	ldi	r23, 0xFF	; 255
 bd2:	c5 01       	movw	r24, r10
 bd4:	0e 94 0e 07 	call	0xe1c	; 0xe1c <strnlen_P>
 bd8:	4c 01       	movw	r8, r24
 bda:	f3 2d       	mov	r31, r3
 bdc:	f0 68       	ori	r31, 0x80	; 128
 bde:	3f 2e       	mov	r3, r31
 be0:	82 01       	movw	r16, r4
 be2:	33 fc       	sbrc	r3, 3
 be4:	1b c0       	rjmp	.+54     	; 0xc1c <vfprintf+0x1c2>
 be6:	82 2d       	mov	r24, r2
 be8:	90 e0       	ldi	r25, 0x00	; 0
 bea:	88 16       	cp	r8, r24
 bec:	99 06       	cpc	r9, r25
 bee:	b0 f4       	brcc	.+44     	; 0xc1c <vfprintf+0x1c2>
 bf0:	b6 01       	movw	r22, r12
 bf2:	80 e2       	ldi	r24, 0x20	; 32
 bf4:	90 e0       	ldi	r25, 0x00	; 0
 bf6:	0e 94 24 07 	call	0xe48	; 0xe48 <fputc>
 bfa:	2a 94       	dec	r2
 bfc:	f4 cf       	rjmp	.-24     	; 0xbe6 <vfprintf+0x18c>
 bfe:	f5 01       	movw	r30, r10
 c00:	37 fc       	sbrc	r3, 7
 c02:	85 91       	lpm	r24, Z+
 c04:	37 fe       	sbrs	r3, 7
 c06:	81 91       	ld	r24, Z+
 c08:	5f 01       	movw	r10, r30
 c0a:	b6 01       	movw	r22, r12
 c0c:	90 e0       	ldi	r25, 0x00	; 0
 c0e:	0e 94 24 07 	call	0xe48	; 0xe48 <fputc>
 c12:	21 10       	cpse	r2, r1
 c14:	2a 94       	dec	r2
 c16:	21 e0       	ldi	r18, 0x01	; 1
 c18:	82 1a       	sub	r8, r18
 c1a:	91 08       	sbc	r9, r1
 c1c:	81 14       	cp	r8, r1
 c1e:	91 04       	cpc	r9, r1
 c20:	71 f7       	brne	.-36     	; 0xbfe <vfprintf+0x1a4>
 c22:	e8 c0       	rjmp	.+464    	; 0xdf4 <vfprintf+0x39a>
 c24:	84 36       	cpi	r24, 0x64	; 100
 c26:	11 f0       	breq	.+4      	; 0xc2c <vfprintf+0x1d2>
 c28:	89 36       	cpi	r24, 0x69	; 105
 c2a:	41 f5       	brne	.+80     	; 0xc7c <vfprintf+0x222>
 c2c:	f8 01       	movw	r30, r16
 c2e:	37 fe       	sbrs	r3, 7
 c30:	07 c0       	rjmp	.+14     	; 0xc40 <vfprintf+0x1e6>
 c32:	60 81       	ld	r22, Z
 c34:	71 81       	ldd	r23, Z+1	; 0x01
 c36:	82 81       	ldd	r24, Z+2	; 0x02
 c38:	93 81       	ldd	r25, Z+3	; 0x03
 c3a:	0c 5f       	subi	r16, 0xFC	; 252
 c3c:	1f 4f       	sbci	r17, 0xFF	; 255
 c3e:	08 c0       	rjmp	.+16     	; 0xc50 <vfprintf+0x1f6>
 c40:	60 81       	ld	r22, Z
 c42:	71 81       	ldd	r23, Z+1	; 0x01
 c44:	07 2e       	mov	r0, r23
 c46:	00 0c       	add	r0, r0
 c48:	88 0b       	sbc	r24, r24
 c4a:	99 0b       	sbc	r25, r25
 c4c:	0e 5f       	subi	r16, 0xFE	; 254
 c4e:	1f 4f       	sbci	r17, 0xFF	; 255
 c50:	f3 2d       	mov	r31, r3
 c52:	ff 76       	andi	r31, 0x6F	; 111
 c54:	3f 2e       	mov	r3, r31
 c56:	97 ff       	sbrs	r25, 7
 c58:	09 c0       	rjmp	.+18     	; 0xc6c <vfprintf+0x212>
 c5a:	90 95       	com	r25
 c5c:	80 95       	com	r24
 c5e:	70 95       	com	r23
 c60:	61 95       	neg	r22
 c62:	7f 4f       	sbci	r23, 0xFF	; 255
 c64:	8f 4f       	sbci	r24, 0xFF	; 255
 c66:	9f 4f       	sbci	r25, 0xFF	; 255
 c68:	f0 68       	ori	r31, 0x80	; 128
 c6a:	3f 2e       	mov	r3, r31
 c6c:	2a e0       	ldi	r18, 0x0A	; 10
 c6e:	30 e0       	ldi	r19, 0x00	; 0
 c70:	a3 01       	movw	r20, r6
 c72:	0e 94 60 07 	call	0xec0	; 0xec0 <__ultoa_invert>
 c76:	88 2e       	mov	r8, r24
 c78:	86 18       	sub	r8, r6
 c7a:	45 c0       	rjmp	.+138    	; 0xd06 <vfprintf+0x2ac>
 c7c:	85 37       	cpi	r24, 0x75	; 117
 c7e:	31 f4       	brne	.+12     	; 0xc8c <vfprintf+0x232>
 c80:	23 2d       	mov	r18, r3
 c82:	2f 7e       	andi	r18, 0xEF	; 239
 c84:	b2 2e       	mov	r11, r18
 c86:	2a e0       	ldi	r18, 0x0A	; 10
 c88:	30 e0       	ldi	r19, 0x00	; 0
 c8a:	25 c0       	rjmp	.+74     	; 0xcd6 <vfprintf+0x27c>
 c8c:	93 2d       	mov	r25, r3
 c8e:	99 7f       	andi	r25, 0xF9	; 249
 c90:	b9 2e       	mov	r11, r25
 c92:	8f 36       	cpi	r24, 0x6F	; 111
 c94:	c1 f0       	breq	.+48     	; 0xcc6 <vfprintf+0x26c>
 c96:	18 f4       	brcc	.+6      	; 0xc9e <vfprintf+0x244>
 c98:	88 35       	cpi	r24, 0x58	; 88
 c9a:	79 f0       	breq	.+30     	; 0xcba <vfprintf+0x260>
 c9c:	b5 c0       	rjmp	.+362    	; 0xe08 <vfprintf+0x3ae>
 c9e:	80 37       	cpi	r24, 0x70	; 112
 ca0:	19 f0       	breq	.+6      	; 0xca8 <vfprintf+0x24e>
 ca2:	88 37       	cpi	r24, 0x78	; 120
 ca4:	21 f0       	breq	.+8      	; 0xcae <vfprintf+0x254>
 ca6:	b0 c0       	rjmp	.+352    	; 0xe08 <vfprintf+0x3ae>
 ca8:	e9 2f       	mov	r30, r25
 caa:	e0 61       	ori	r30, 0x10	; 16
 cac:	be 2e       	mov	r11, r30
 cae:	b4 fe       	sbrs	r11, 4
 cb0:	0d c0       	rjmp	.+26     	; 0xccc <vfprintf+0x272>
 cb2:	fb 2d       	mov	r31, r11
 cb4:	f4 60       	ori	r31, 0x04	; 4
 cb6:	bf 2e       	mov	r11, r31
 cb8:	09 c0       	rjmp	.+18     	; 0xccc <vfprintf+0x272>
 cba:	34 fe       	sbrs	r3, 4
 cbc:	0a c0       	rjmp	.+20     	; 0xcd2 <vfprintf+0x278>
 cbe:	29 2f       	mov	r18, r25
 cc0:	26 60       	ori	r18, 0x06	; 6
 cc2:	b2 2e       	mov	r11, r18
 cc4:	06 c0       	rjmp	.+12     	; 0xcd2 <vfprintf+0x278>
 cc6:	28 e0       	ldi	r18, 0x08	; 8
 cc8:	30 e0       	ldi	r19, 0x00	; 0
 cca:	05 c0       	rjmp	.+10     	; 0xcd6 <vfprintf+0x27c>
 ccc:	20 e1       	ldi	r18, 0x10	; 16
 cce:	30 e0       	ldi	r19, 0x00	; 0
 cd0:	02 c0       	rjmp	.+4      	; 0xcd6 <vfprintf+0x27c>
 cd2:	20 e1       	ldi	r18, 0x10	; 16
 cd4:	32 e0       	ldi	r19, 0x02	; 2
 cd6:	f8 01       	movw	r30, r16
 cd8:	b7 fe       	sbrs	r11, 7
 cda:	07 c0       	rjmp	.+14     	; 0xcea <vfprintf+0x290>
 cdc:	60 81       	ld	r22, Z
 cde:	71 81       	ldd	r23, Z+1	; 0x01
 ce0:	82 81       	ldd	r24, Z+2	; 0x02
 ce2:	93 81       	ldd	r25, Z+3	; 0x03
 ce4:	0c 5f       	subi	r16, 0xFC	; 252
 ce6:	1f 4f       	sbci	r17, 0xFF	; 255
 ce8:	06 c0       	rjmp	.+12     	; 0xcf6 <vfprintf+0x29c>
 cea:	60 81       	ld	r22, Z
 cec:	71 81       	ldd	r23, Z+1	; 0x01
 cee:	80 e0       	ldi	r24, 0x00	; 0
 cf0:	90 e0       	ldi	r25, 0x00	; 0
 cf2:	0e 5f       	subi	r16, 0xFE	; 254
 cf4:	1f 4f       	sbci	r17, 0xFF	; 255
 cf6:	a3 01       	movw	r20, r6
 cf8:	0e 94 60 07 	call	0xec0	; 0xec0 <__ultoa_invert>
 cfc:	88 2e       	mov	r8, r24
 cfe:	86 18       	sub	r8, r6
 d00:	fb 2d       	mov	r31, r11
 d02:	ff 77       	andi	r31, 0x7F	; 127
 d04:	3f 2e       	mov	r3, r31
 d06:	36 fe       	sbrs	r3, 6
 d08:	0d c0       	rjmp	.+26     	; 0xd24 <vfprintf+0x2ca>
 d0a:	23 2d       	mov	r18, r3
 d0c:	2e 7f       	andi	r18, 0xFE	; 254
 d0e:	a2 2e       	mov	r10, r18
 d10:	89 14       	cp	r8, r9
 d12:	58 f4       	brcc	.+22     	; 0xd2a <vfprintf+0x2d0>
 d14:	34 fe       	sbrs	r3, 4
 d16:	0b c0       	rjmp	.+22     	; 0xd2e <vfprintf+0x2d4>
 d18:	32 fc       	sbrc	r3, 2
 d1a:	09 c0       	rjmp	.+18     	; 0xd2e <vfprintf+0x2d4>
 d1c:	83 2d       	mov	r24, r3
 d1e:	8e 7e       	andi	r24, 0xEE	; 238
 d20:	a8 2e       	mov	r10, r24
 d22:	05 c0       	rjmp	.+10     	; 0xd2e <vfprintf+0x2d4>
 d24:	b8 2c       	mov	r11, r8
 d26:	a3 2c       	mov	r10, r3
 d28:	03 c0       	rjmp	.+6      	; 0xd30 <vfprintf+0x2d6>
 d2a:	b8 2c       	mov	r11, r8
 d2c:	01 c0       	rjmp	.+2      	; 0xd30 <vfprintf+0x2d6>
 d2e:	b9 2c       	mov	r11, r9
 d30:	a4 fe       	sbrs	r10, 4
 d32:	0f c0       	rjmp	.+30     	; 0xd52 <vfprintf+0x2f8>
 d34:	fe 01       	movw	r30, r28
 d36:	e8 0d       	add	r30, r8
 d38:	f1 1d       	adc	r31, r1
 d3a:	80 81       	ld	r24, Z
 d3c:	80 33       	cpi	r24, 0x30	; 48
 d3e:	21 f4       	brne	.+8      	; 0xd48 <vfprintf+0x2ee>
 d40:	9a 2d       	mov	r25, r10
 d42:	99 7e       	andi	r25, 0xE9	; 233
 d44:	a9 2e       	mov	r10, r25
 d46:	09 c0       	rjmp	.+18     	; 0xd5a <vfprintf+0x300>
 d48:	a2 fe       	sbrs	r10, 2
 d4a:	06 c0       	rjmp	.+12     	; 0xd58 <vfprintf+0x2fe>
 d4c:	b3 94       	inc	r11
 d4e:	b3 94       	inc	r11
 d50:	04 c0       	rjmp	.+8      	; 0xd5a <vfprintf+0x300>
 d52:	8a 2d       	mov	r24, r10
 d54:	86 78       	andi	r24, 0x86	; 134
 d56:	09 f0       	breq	.+2      	; 0xd5a <vfprintf+0x300>
 d58:	b3 94       	inc	r11
 d5a:	a3 fc       	sbrc	r10, 3
 d5c:	11 c0       	rjmp	.+34     	; 0xd80 <vfprintf+0x326>
 d5e:	a0 fe       	sbrs	r10, 0
 d60:	06 c0       	rjmp	.+12     	; 0xd6e <vfprintf+0x314>
 d62:	b2 14       	cp	r11, r2
 d64:	88 f4       	brcc	.+34     	; 0xd88 <vfprintf+0x32e>
 d66:	28 0c       	add	r2, r8
 d68:	92 2c       	mov	r9, r2
 d6a:	9b 18       	sub	r9, r11
 d6c:	0e c0       	rjmp	.+28     	; 0xd8a <vfprintf+0x330>
 d6e:	b2 14       	cp	r11, r2
 d70:	60 f4       	brcc	.+24     	; 0xd8a <vfprintf+0x330>
 d72:	b6 01       	movw	r22, r12
 d74:	80 e2       	ldi	r24, 0x20	; 32
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	0e 94 24 07 	call	0xe48	; 0xe48 <fputc>
 d7c:	b3 94       	inc	r11
 d7e:	f7 cf       	rjmp	.-18     	; 0xd6e <vfprintf+0x314>
 d80:	b2 14       	cp	r11, r2
 d82:	18 f4       	brcc	.+6      	; 0xd8a <vfprintf+0x330>
 d84:	2b 18       	sub	r2, r11
 d86:	02 c0       	rjmp	.+4      	; 0xd8c <vfprintf+0x332>
 d88:	98 2c       	mov	r9, r8
 d8a:	21 2c       	mov	r2, r1
 d8c:	a4 fe       	sbrs	r10, 4
 d8e:	10 c0       	rjmp	.+32     	; 0xdb0 <vfprintf+0x356>
 d90:	b6 01       	movw	r22, r12
 d92:	80 e3       	ldi	r24, 0x30	; 48
 d94:	90 e0       	ldi	r25, 0x00	; 0
 d96:	0e 94 24 07 	call	0xe48	; 0xe48 <fputc>
 d9a:	a2 fe       	sbrs	r10, 2
 d9c:	17 c0       	rjmp	.+46     	; 0xdcc <vfprintf+0x372>
 d9e:	a1 fc       	sbrc	r10, 1
 da0:	03 c0       	rjmp	.+6      	; 0xda8 <vfprintf+0x34e>
 da2:	88 e7       	ldi	r24, 0x78	; 120
 da4:	90 e0       	ldi	r25, 0x00	; 0
 da6:	02 c0       	rjmp	.+4      	; 0xdac <vfprintf+0x352>
 da8:	88 e5       	ldi	r24, 0x58	; 88
 daa:	90 e0       	ldi	r25, 0x00	; 0
 dac:	b6 01       	movw	r22, r12
 dae:	0c c0       	rjmp	.+24     	; 0xdc8 <vfprintf+0x36e>
 db0:	8a 2d       	mov	r24, r10
 db2:	86 78       	andi	r24, 0x86	; 134
 db4:	59 f0       	breq	.+22     	; 0xdcc <vfprintf+0x372>
 db6:	a1 fe       	sbrs	r10, 1
 db8:	02 c0       	rjmp	.+4      	; 0xdbe <vfprintf+0x364>
 dba:	8b e2       	ldi	r24, 0x2B	; 43
 dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <vfprintf+0x366>
 dbe:	80 e2       	ldi	r24, 0x20	; 32
 dc0:	a7 fc       	sbrc	r10, 7
 dc2:	8d e2       	ldi	r24, 0x2D	; 45
 dc4:	b6 01       	movw	r22, r12
 dc6:	90 e0       	ldi	r25, 0x00	; 0
 dc8:	0e 94 24 07 	call	0xe48	; 0xe48 <fputc>
 dcc:	89 14       	cp	r8, r9
 dce:	38 f4       	brcc	.+14     	; 0xdde <vfprintf+0x384>
 dd0:	b6 01       	movw	r22, r12
 dd2:	80 e3       	ldi	r24, 0x30	; 48
 dd4:	90 e0       	ldi	r25, 0x00	; 0
 dd6:	0e 94 24 07 	call	0xe48	; 0xe48 <fputc>
 dda:	9a 94       	dec	r9
 ddc:	f7 cf       	rjmp	.-18     	; 0xdcc <vfprintf+0x372>
 dde:	8a 94       	dec	r8
 de0:	f3 01       	movw	r30, r6
 de2:	e8 0d       	add	r30, r8
 de4:	f1 1d       	adc	r31, r1
 de6:	80 81       	ld	r24, Z
 de8:	b6 01       	movw	r22, r12
 dea:	90 e0       	ldi	r25, 0x00	; 0
 dec:	0e 94 24 07 	call	0xe48	; 0xe48 <fputc>
 df0:	81 10       	cpse	r8, r1
 df2:	f5 cf       	rjmp	.-22     	; 0xdde <vfprintf+0x384>
 df4:	22 20       	and	r2, r2
 df6:	09 f4       	brne	.+2      	; 0xdfa <vfprintf+0x3a0>
 df8:	42 ce       	rjmp	.-892    	; 0xa7e <vfprintf+0x24>
 dfa:	b6 01       	movw	r22, r12
 dfc:	80 e2       	ldi	r24, 0x20	; 32
 dfe:	90 e0       	ldi	r25, 0x00	; 0
 e00:	0e 94 24 07 	call	0xe48	; 0xe48 <fputc>
 e04:	2a 94       	dec	r2
 e06:	f6 cf       	rjmp	.-20     	; 0xdf4 <vfprintf+0x39a>
 e08:	f6 01       	movw	r30, r12
 e0a:	86 81       	ldd	r24, Z+6	; 0x06
 e0c:	97 81       	ldd	r25, Z+7	; 0x07
 e0e:	02 c0       	rjmp	.+4      	; 0xe14 <vfprintf+0x3ba>
 e10:	8f ef       	ldi	r24, 0xFF	; 255
 e12:	9f ef       	ldi	r25, 0xFF	; 255
 e14:	2b 96       	adiw	r28, 0x0b	; 11
 e16:	e2 e1       	ldi	r30, 0x12	; 18
 e18:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <__epilogue_restores__>

00000e1c <strnlen_P>:
 e1c:	fc 01       	movw	r30, r24
 e1e:	05 90       	lpm	r0, Z+
 e20:	61 50       	subi	r22, 0x01	; 1
 e22:	70 40       	sbci	r23, 0x00	; 0
 e24:	01 10       	cpse	r0, r1
 e26:	d8 f7       	brcc	.-10     	; 0xe1e <strnlen_P+0x2>
 e28:	80 95       	com	r24
 e2a:	90 95       	com	r25
 e2c:	8e 0f       	add	r24, r30
 e2e:	9f 1f       	adc	r25, r31
 e30:	08 95       	ret

00000e32 <strnlen>:
 e32:	fc 01       	movw	r30, r24
 e34:	61 50       	subi	r22, 0x01	; 1
 e36:	70 40       	sbci	r23, 0x00	; 0
 e38:	01 90       	ld	r0, Z+
 e3a:	01 10       	cpse	r0, r1
 e3c:	d8 f7       	brcc	.-10     	; 0xe34 <strnlen+0x2>
 e3e:	80 95       	com	r24
 e40:	90 95       	com	r25
 e42:	8e 0f       	add	r24, r30
 e44:	9f 1f       	adc	r25, r31
 e46:	08 95       	ret

00000e48 <fputc>:
 e48:	0f 93       	push	r16
 e4a:	1f 93       	push	r17
 e4c:	cf 93       	push	r28
 e4e:	df 93       	push	r29
 e50:	fb 01       	movw	r30, r22
 e52:	23 81       	ldd	r18, Z+3	; 0x03
 e54:	21 fd       	sbrc	r18, 1
 e56:	03 c0       	rjmp	.+6      	; 0xe5e <fputc+0x16>
 e58:	8f ef       	ldi	r24, 0xFF	; 255
 e5a:	9f ef       	ldi	r25, 0xFF	; 255
 e5c:	2c c0       	rjmp	.+88     	; 0xeb6 <fputc+0x6e>
 e5e:	22 ff       	sbrs	r18, 2
 e60:	16 c0       	rjmp	.+44     	; 0xe8e <fputc+0x46>
 e62:	46 81       	ldd	r20, Z+6	; 0x06
 e64:	57 81       	ldd	r21, Z+7	; 0x07
 e66:	24 81       	ldd	r18, Z+4	; 0x04
 e68:	35 81       	ldd	r19, Z+5	; 0x05
 e6a:	42 17       	cp	r20, r18
 e6c:	53 07       	cpc	r21, r19
 e6e:	44 f4       	brge	.+16     	; 0xe80 <fputc+0x38>
 e70:	a0 81       	ld	r26, Z
 e72:	b1 81       	ldd	r27, Z+1	; 0x01
 e74:	9d 01       	movw	r18, r26
 e76:	2f 5f       	subi	r18, 0xFF	; 255
 e78:	3f 4f       	sbci	r19, 0xFF	; 255
 e7a:	31 83       	std	Z+1, r19	; 0x01
 e7c:	20 83       	st	Z, r18
 e7e:	8c 93       	st	X, r24
 e80:	26 81       	ldd	r18, Z+6	; 0x06
 e82:	37 81       	ldd	r19, Z+7	; 0x07
 e84:	2f 5f       	subi	r18, 0xFF	; 255
 e86:	3f 4f       	sbci	r19, 0xFF	; 255
 e88:	37 83       	std	Z+7, r19	; 0x07
 e8a:	26 83       	std	Z+6, r18	; 0x06
 e8c:	14 c0       	rjmp	.+40     	; 0xeb6 <fputc+0x6e>
 e8e:	8b 01       	movw	r16, r22
 e90:	ec 01       	movw	r28, r24
 e92:	fb 01       	movw	r30, r22
 e94:	00 84       	ldd	r0, Z+8	; 0x08
 e96:	f1 85       	ldd	r31, Z+9	; 0x09
 e98:	e0 2d       	mov	r30, r0
 e9a:	09 95       	icall
 e9c:	89 2b       	or	r24, r25
 e9e:	e1 f6       	brne	.-72     	; 0xe58 <fputc+0x10>
 ea0:	d8 01       	movw	r26, r16
 ea2:	16 96       	adiw	r26, 0x06	; 6
 ea4:	8d 91       	ld	r24, X+
 ea6:	9c 91       	ld	r25, X
 ea8:	17 97       	sbiw	r26, 0x07	; 7
 eaa:	01 96       	adiw	r24, 0x01	; 1
 eac:	17 96       	adiw	r26, 0x07	; 7
 eae:	9c 93       	st	X, r25
 eb0:	8e 93       	st	-X, r24
 eb2:	16 97       	sbiw	r26, 0x06	; 6
 eb4:	ce 01       	movw	r24, r28
 eb6:	df 91       	pop	r29
 eb8:	cf 91       	pop	r28
 eba:	1f 91       	pop	r17
 ebc:	0f 91       	pop	r16
 ebe:	08 95       	ret

00000ec0 <__ultoa_invert>:
 ec0:	fa 01       	movw	r30, r20
 ec2:	aa 27       	eor	r26, r26
 ec4:	28 30       	cpi	r18, 0x08	; 8
 ec6:	51 f1       	breq	.+84     	; 0xf1c <__ultoa_invert+0x5c>
 ec8:	20 31       	cpi	r18, 0x10	; 16
 eca:	81 f1       	breq	.+96     	; 0xf2c <__ultoa_invert+0x6c>
 ecc:	e8 94       	clt
 ece:	6f 93       	push	r22
 ed0:	6e 7f       	andi	r22, 0xFE	; 254
 ed2:	6e 5f       	subi	r22, 0xFE	; 254
 ed4:	7f 4f       	sbci	r23, 0xFF	; 255
 ed6:	8f 4f       	sbci	r24, 0xFF	; 255
 ed8:	9f 4f       	sbci	r25, 0xFF	; 255
 eda:	af 4f       	sbci	r26, 0xFF	; 255
 edc:	b1 e0       	ldi	r27, 0x01	; 1
 ede:	3e d0       	rcall	.+124    	; 0xf5c <__ultoa_invert+0x9c>
 ee0:	b4 e0       	ldi	r27, 0x04	; 4
 ee2:	3c d0       	rcall	.+120    	; 0xf5c <__ultoa_invert+0x9c>
 ee4:	67 0f       	add	r22, r23
 ee6:	78 1f       	adc	r23, r24
 ee8:	89 1f       	adc	r24, r25
 eea:	9a 1f       	adc	r25, r26
 eec:	a1 1d       	adc	r26, r1
 eee:	68 0f       	add	r22, r24
 ef0:	79 1f       	adc	r23, r25
 ef2:	8a 1f       	adc	r24, r26
 ef4:	91 1d       	adc	r25, r1
 ef6:	a1 1d       	adc	r26, r1
 ef8:	6a 0f       	add	r22, r26
 efa:	71 1d       	adc	r23, r1
 efc:	81 1d       	adc	r24, r1
 efe:	91 1d       	adc	r25, r1
 f00:	a1 1d       	adc	r26, r1
 f02:	20 d0       	rcall	.+64     	; 0xf44 <__ultoa_invert+0x84>
 f04:	09 f4       	brne	.+2      	; 0xf08 <__ultoa_invert+0x48>
 f06:	68 94       	set
 f08:	3f 91       	pop	r19
 f0a:	2a e0       	ldi	r18, 0x0A	; 10
 f0c:	26 9f       	mul	r18, r22
 f0e:	11 24       	eor	r1, r1
 f10:	30 19       	sub	r19, r0
 f12:	30 5d       	subi	r19, 0xD0	; 208
 f14:	31 93       	st	Z+, r19
 f16:	de f6       	brtc	.-74     	; 0xece <__ultoa_invert+0xe>
 f18:	cf 01       	movw	r24, r30
 f1a:	08 95       	ret
 f1c:	46 2f       	mov	r20, r22
 f1e:	47 70       	andi	r20, 0x07	; 7
 f20:	40 5d       	subi	r20, 0xD0	; 208
 f22:	41 93       	st	Z+, r20
 f24:	b3 e0       	ldi	r27, 0x03	; 3
 f26:	0f d0       	rcall	.+30     	; 0xf46 <__ultoa_invert+0x86>
 f28:	c9 f7       	brne	.-14     	; 0xf1c <__ultoa_invert+0x5c>
 f2a:	f6 cf       	rjmp	.-20     	; 0xf18 <__ultoa_invert+0x58>
 f2c:	46 2f       	mov	r20, r22
 f2e:	4f 70       	andi	r20, 0x0F	; 15
 f30:	40 5d       	subi	r20, 0xD0	; 208
 f32:	4a 33       	cpi	r20, 0x3A	; 58
 f34:	18 f0       	brcs	.+6      	; 0xf3c <__ultoa_invert+0x7c>
 f36:	49 5d       	subi	r20, 0xD9	; 217
 f38:	31 fd       	sbrc	r19, 1
 f3a:	40 52       	subi	r20, 0x20	; 32
 f3c:	41 93       	st	Z+, r20
 f3e:	02 d0       	rcall	.+4      	; 0xf44 <__ultoa_invert+0x84>
 f40:	a9 f7       	brne	.-22     	; 0xf2c <__ultoa_invert+0x6c>
 f42:	ea cf       	rjmp	.-44     	; 0xf18 <__ultoa_invert+0x58>
 f44:	b4 e0       	ldi	r27, 0x04	; 4
 f46:	a6 95       	lsr	r26
 f48:	97 95       	ror	r25
 f4a:	87 95       	ror	r24
 f4c:	77 95       	ror	r23
 f4e:	67 95       	ror	r22
 f50:	ba 95       	dec	r27
 f52:	c9 f7       	brne	.-14     	; 0xf46 <__ultoa_invert+0x86>
 f54:	00 97       	sbiw	r24, 0x00	; 0
 f56:	61 05       	cpc	r22, r1
 f58:	71 05       	cpc	r23, r1
 f5a:	08 95       	ret
 f5c:	9b 01       	movw	r18, r22
 f5e:	ac 01       	movw	r20, r24
 f60:	0a 2e       	mov	r0, r26
 f62:	06 94       	lsr	r0
 f64:	57 95       	ror	r21
 f66:	47 95       	ror	r20
 f68:	37 95       	ror	r19
 f6a:	27 95       	ror	r18
 f6c:	ba 95       	dec	r27
 f6e:	c9 f7       	brne	.-14     	; 0xf62 <__ultoa_invert+0xa2>
 f70:	62 0f       	add	r22, r18
 f72:	73 1f       	adc	r23, r19
 f74:	84 1f       	adc	r24, r20
 f76:	95 1f       	adc	r25, r21
 f78:	a0 1d       	adc	r26, r0
 f7a:	08 95       	ret

00000f7c <__prologue_saves__>:
 f7c:	2f 92       	push	r2
 f7e:	3f 92       	push	r3
 f80:	4f 92       	push	r4
 f82:	5f 92       	push	r5
 f84:	6f 92       	push	r6
 f86:	7f 92       	push	r7
 f88:	8f 92       	push	r8
 f8a:	9f 92       	push	r9
 f8c:	af 92       	push	r10
 f8e:	bf 92       	push	r11
 f90:	cf 92       	push	r12
 f92:	df 92       	push	r13
 f94:	ef 92       	push	r14
 f96:	ff 92       	push	r15
 f98:	0f 93       	push	r16
 f9a:	1f 93       	push	r17
 f9c:	cf 93       	push	r28
 f9e:	df 93       	push	r29
 fa0:	cd b7       	in	r28, 0x3d	; 61
 fa2:	de b7       	in	r29, 0x3e	; 62
 fa4:	ca 1b       	sub	r28, r26
 fa6:	db 0b       	sbc	r29, r27
 fa8:	0f b6       	in	r0, 0x3f	; 63
 faa:	f8 94       	cli
 fac:	de bf       	out	0x3e, r29	; 62
 fae:	0f be       	out	0x3f, r0	; 63
 fb0:	cd bf       	out	0x3d, r28	; 61
 fb2:	09 94       	ijmp

00000fb4 <__epilogue_restores__>:
 fb4:	2a 88       	ldd	r2, Y+18	; 0x12
 fb6:	39 88       	ldd	r3, Y+17	; 0x11
 fb8:	48 88       	ldd	r4, Y+16	; 0x10
 fba:	5f 84       	ldd	r5, Y+15	; 0x0f
 fbc:	6e 84       	ldd	r6, Y+14	; 0x0e
 fbe:	7d 84       	ldd	r7, Y+13	; 0x0d
 fc0:	8c 84       	ldd	r8, Y+12	; 0x0c
 fc2:	9b 84       	ldd	r9, Y+11	; 0x0b
 fc4:	aa 84       	ldd	r10, Y+10	; 0x0a
 fc6:	b9 84       	ldd	r11, Y+9	; 0x09
 fc8:	c8 84       	ldd	r12, Y+8	; 0x08
 fca:	df 80       	ldd	r13, Y+7	; 0x07
 fcc:	ee 80       	ldd	r14, Y+6	; 0x06
 fce:	fd 80       	ldd	r15, Y+5	; 0x05
 fd0:	0c 81       	ldd	r16, Y+4	; 0x04
 fd2:	1b 81       	ldd	r17, Y+3	; 0x03
 fd4:	aa 81       	ldd	r26, Y+2	; 0x02
 fd6:	b9 81       	ldd	r27, Y+1	; 0x01
 fd8:	ce 0f       	add	r28, r30
 fda:	d1 1d       	adc	r29, r1
 fdc:	0f b6       	in	r0, 0x3f	; 63
 fde:	f8 94       	cli
 fe0:	de bf       	out	0x3e, r29	; 62
 fe2:	0f be       	out	0x3f, r0	; 63
 fe4:	cd bf       	out	0x3d, r28	; 61
 fe6:	ed 01       	movw	r28, r26
 fe8:	08 95       	ret

00000fea <_exit>:
 fea:	f8 94       	cli

00000fec <__stop_program>:
 fec:	ff cf       	rjmp	.-2      	; 0xfec <__stop_program>


calculator_project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000fce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000fce  00001062  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  00800064  00800064  00001066  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001066  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000010c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  00001100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000fea  00000000  00000000  000011b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000796  00000000  00000000  0000219a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a9d  00000000  00000000  00002930  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000013c  00000000  00000000  000033d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000507  00000000  00000000  0000350c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000088b  00000000  00000000  00003a13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000429e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   8:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
   c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  10:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  14:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  18:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  1c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  20:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  24:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  28:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  2c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  30:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  34:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  38:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  3c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  40:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  44:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  48:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  4c:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  50:	0c 94 83 00 	jmp	0x106	; 0x106 <__bad_interrupt>
  54:	b5 03       	fmuls	r19, r21
  56:	bc 03       	fmulsu	r19, r20
  58:	bc 03       	fmulsu	r19, r20
  5a:	bc 03       	fmulsu	r19, r20
  5c:	bc 03       	fmulsu	r19, r20
  5e:	a0 03       	fmuls	r18, r16
  60:	90 03       	fmuls	r17, r16
  62:	bc 03       	fmulsu	r19, r20
  64:	98 03       	fmulsu	r17, r16
  66:	bc 03       	fmulsu	r19, r20
  68:	a8 03       	fmulsu	r18, r16
  6a:	40 03       	mulsu	r20, r16
  6c:	48 03       	fmul	r20, r16
  6e:	50 03       	mulsu	r21, r16
  70:	58 03       	fmul	r21, r16
  72:	60 03       	mulsu	r22, r16
  74:	68 03       	fmul	r22, r16
  76:	70 03       	mulsu	r23, r16
  78:	78 03       	fmul	r23, r16
  7a:	80 03       	fmuls	r16, r16
  7c:	88 03       	fmulsu	r16, r16
  7e:	bc 03       	fmulsu	r19, r20
  80:	bc 03       	fmulsu	r19, r20
  82:	bc 03       	fmulsu	r19, r20
  84:	bc 03       	fmulsu	r19, r20
  86:	bc 03       	fmulsu	r19, r20
  88:	bc 03       	fmulsu	r19, r20
  8a:	bc 03       	fmulsu	r19, r20
  8c:	bc 03       	fmulsu	r19, r20
  8e:	bc 03       	fmulsu	r19, r20
  90:	bc 03       	fmulsu	r19, r20
  92:	bc 03       	fmulsu	r19, r20
  94:	bc 03       	fmulsu	r19, r20
  96:	bc 03       	fmulsu	r19, r20
  98:	bc 03       	fmulsu	r19, r20
  9a:	bc 03       	fmulsu	r19, r20
  9c:	bc 03       	fmulsu	r19, r20
  9e:	bc 03       	fmulsu	r19, r20
  a0:	bc 03       	fmulsu	r19, r20
  a2:	bc 03       	fmulsu	r19, r20
  a4:	bc 03       	fmulsu	r19, r20
  a6:	bc 03       	fmulsu	r19, r20
  a8:	bc 03       	fmulsu	r19, r20
  aa:	bc 03       	fmulsu	r19, r20
  ac:	bc 03       	fmulsu	r19, r20
  ae:	b0 03       	fmuls	r19, r16
  b0:	03 04       	cpc	r0, r3
  b2:	0b 04       	cpc	r0, r11
  b4:	13 04       	cpc	r1, r3
  b6:	1b 04       	cpc	r1, r11
  b8:	23 04       	cpc	r2, r3
  ba:	2b 04       	cpc	r2, r11
  bc:	33 04       	cpc	r3, r3
  be:	3b 04       	cpc	r3, r11
  c0:	43 04       	cpc	r4, r3
  c2:	4b 04       	cpc	r4, r11
  c4:	5b 04       	cpc	r5, r11
  c6:	5b 04       	cpc	r5, r11
  c8:	5b 04       	cpc	r5, r11
  ca:	53 04       	cpc	r5, r3

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf e5       	ldi	r28, 0x5F	; 95
  d2:	d8 e0       	ldi	r29, 0x08	; 8
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	10 e0       	ldi	r17, 0x00	; 0
  da:	a0 e6       	ldi	r26, 0x60	; 96
  dc:	b0 e0       	ldi	r27, 0x00	; 0
  de:	ee ec       	ldi	r30, 0xCE	; 206
  e0:	ff e0       	ldi	r31, 0x0F	; 15
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <__do_copy_data+0x10>
  e4:	05 90       	lpm	r0, Z+
  e6:	0d 92       	st	X+, r0
  e8:	a4 36       	cpi	r26, 0x64	; 100
  ea:	b1 07       	cpc	r27, r17
  ec:	d9 f7       	brne	.-10     	; 0xe4 <__do_copy_data+0xc>

000000ee <__do_clear_bss>:
  ee:	20 e0       	ldi	r18, 0x00	; 0
  f0:	a4 e6       	ldi	r26, 0x64	; 100
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	01 c0       	rjmp	.+2      	; 0xf8 <.do_clear_bss_start>

000000f6 <.do_clear_bss_loop>:
  f6:	1d 92       	st	X+, r1

000000f8 <.do_clear_bss_start>:
  f8:	ae 36       	cpi	r26, 0x6E	; 110
  fa:	b2 07       	cpc	r27, r18
  fc:	e1 f7       	brne	.-8      	; 0xf6 <.do_clear_bss_loop>
  fe:	0e 94 1f 03 	call	0x63e	; 0x63e <main>
 102:	0c 94 e5 07 	jmp	0xfca	; 0xfca <_exit>

00000106 <__bad_interrupt>:
 106:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010a <KPAD_INIT_FUNC>:

#include "kpad.h"

void KPAD_INIT_FUNC()
{
	KPAD_ROW_PORT_DIRECTION = 0X00;
 10a:	11 ba       	out	0x11, r1	; 17
	KPAD_COL_PORT_DIRECTION = 0X3F;
 10c:	8f e3       	ldi	r24, 0x3F	; 63
 10e:	84 bb       	out	0x14, r24	; 20
	
	KPAD_COL_PORT_VALUE = 0x3F;
 110:	85 bb       	out	0x15, r24	; 21
	KPAD_ROW_PORT_VALUE = 0x0F;
 112:	8f e0       	ldi	r24, 0x0F	; 15
 114:	82 bb       	out	0x12, r24	; 18
 116:	08 95       	ret

00000118 <KPAD_GET_CHAR>:
}


char KPAD_GET_CHAR()
{
	for(int i = 0; i<6; i++)//col
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	70 e0       	ldi	r23, 0x00	; 0
 11c:	ad c0       	rjmp	.+346    	; 0x278 <KPAD_GET_CHAR+0x160>
	{
		KPAD_COL_PORT_VALUE = 0x3F;		
 11e:	8f e3       	ldi	r24, 0x3F	; 63
 120:	85 bb       	out	0x15, r24	; 21

		RESET_BIT(KPAD_COL_PORT_VALUE,i);
 122:	25 b3       	in	r18, 0x15	; 21
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	06 2e       	mov	r0, r22
 12a:	02 c0       	rjmp	.+4      	; 0x130 <KPAD_GET_CHAR+0x18>
 12c:	88 0f       	add	r24, r24
 12e:	99 1f       	adc	r25, r25
 130:	0a 94       	dec	r0
 132:	e2 f7       	brpl	.-8      	; 0x12c <KPAD_GET_CHAR+0x14>
 134:	80 95       	com	r24
 136:	82 23       	and	r24, r18
 138:	85 bb       	out	0x15, r24	; 21
		for(int j = 0; j<4; j++)
 13a:	20 e0       	ldi	r18, 0x00	; 0
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	96 c0       	rjmp	.+300    	; 0x26c <KPAD_GET_CHAR+0x154>
		{
			 if(!READ_BIT(KPAD_ROW_PORT_PIN, j))
 140:	80 b3       	in	r24, 0x10	; 16
 142:	41 e0       	ldi	r20, 0x01	; 1
 144:	50 e0       	ldi	r21, 0x00	; 0
 146:	02 2e       	mov	r0, r18
 148:	02 c0       	rjmp	.+4      	; 0x14e <KPAD_GET_CHAR+0x36>
 14a:	44 0f       	add	r20, r20
 14c:	55 1f       	adc	r21, r21
 14e:	0a 94       	dec	r0
 150:	e2 f7       	brpl	.-8      	; 0x14a <KPAD_GET_CHAR+0x32>
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	84 23       	and	r24, r20
 156:	95 23       	and	r25, r21
 158:	02 2e       	mov	r0, r18
 15a:	02 c0       	rjmp	.+4      	; 0x160 <KPAD_GET_CHAR+0x48>
 15c:	95 95       	asr	r25
 15e:	87 95       	ror	r24
 160:	0a 94       	dec	r0
 162:	e2 f7       	brpl	.-8      	; 0x15c <KPAD_GET_CHAR+0x44>
 164:	89 2b       	or	r24, r25
 166:	09 f0       	breq	.+2      	; 0x16a <KPAD_GET_CHAR+0x52>
 168:	7f c0       	rjmp	.+254    	; 0x268 <KPAD_GET_CHAR+0x150>
			 {
				 while(!READ_BIT(KPAD_ROW_PORT_PIN, j));
 16a:	80 b3       	in	r24, 0x10	; 16
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	84 23       	and	r24, r20
 170:	95 23       	and	r25, r21
 172:	02 2e       	mov	r0, r18
 174:	02 c0       	rjmp	.+4      	; 0x17a <KPAD_GET_CHAR+0x62>
 176:	95 95       	asr	r25
 178:	87 95       	ror	r24
 17a:	0a 94       	dec	r0
 17c:	e2 f7       	brpl	.-8      	; 0x176 <KPAD_GET_CHAR+0x5e>
 17e:	89 2b       	or	r24, r25
 180:	a1 f3       	breq	.-24     	; 0x16a <KPAD_GET_CHAR+0x52>
				 switch(i)
 182:	62 30       	cpi	r22, 0x02	; 2
 184:	71 05       	cpc	r23, r1
 186:	99 f1       	breq	.+102    	; 0x1ee <KPAD_GET_CHAR+0xd6>
 188:	3c f4       	brge	.+14     	; 0x198 <KPAD_GET_CHAR+0x80>
 18a:	61 15       	cp	r22, r1
 18c:	71 05       	cpc	r23, r1
 18e:	71 f0       	breq	.+28     	; 0x1ac <KPAD_GET_CHAR+0x94>
 190:	61 30       	cpi	r22, 0x01	; 1
 192:	71 05       	cpc	r23, r1
 194:	e1 f0       	breq	.+56     	; 0x1ce <KPAD_GET_CHAR+0xb6>
 196:	68 c0       	rjmp	.+208    	; 0x268 <KPAD_GET_CHAR+0x150>
 198:	64 30       	cpi	r22, 0x04	; 4
 19a:	71 05       	cpc	r23, r1
 19c:	09 f4       	brne	.+2      	; 0x1a0 <KPAD_GET_CHAR+0x88>
 19e:	47 c0       	rjmp	.+142    	; 0x22e <KPAD_GET_CHAR+0x116>
 1a0:	b4 f1       	brlt	.+108    	; 0x20e <KPAD_GET_CHAR+0xf6>
 1a2:	65 30       	cpi	r22, 0x05	; 5
 1a4:	71 05       	cpc	r23, r1
 1a6:	09 f4       	brne	.+2      	; 0x1aa <KPAD_GET_CHAR+0x92>
 1a8:	52 c0       	rjmp	.+164    	; 0x24e <KPAD_GET_CHAR+0x136>
 1aa:	5e c0       	rjmp	.+188    	; 0x268 <KPAD_GET_CHAR+0x150>
				 {
					 //====================================
					 case 0:
					 if(j==0)
 1ac:	21 15       	cp	r18, r1
 1ae:	31 05       	cpc	r19, r1
 1b0:	09 f4       	brne	.+2      	; 0x1b4 <KPAD_GET_CHAR+0x9c>
 1b2:	68 c0       	rjmp	.+208    	; 0x284 <KPAD_GET_CHAR+0x16c>
					 return '!';
					 else if(j==1)
 1b4:	21 30       	cpi	r18, 0x01	; 1
 1b6:	31 05       	cpc	r19, r1
 1b8:	09 f4       	brne	.+2      	; 0x1bc <KPAD_GET_CHAR+0xa4>
 1ba:	66 c0       	rjmp	.+204    	; 0x288 <KPAD_GET_CHAR+0x170>
					 return 'N';
					 else if(j==2)
 1bc:	22 30       	cpi	r18, 0x02	; 2
 1be:	31 05       	cpc	r19, r1
 1c0:	09 f4       	brne	.+2      	; 0x1c4 <KPAD_GET_CHAR+0xac>
 1c2:	64 c0       	rjmp	.+200    	; 0x28c <KPAD_GET_CHAR+0x174>
					 return '%';
					 else if(j==3)
 1c4:	23 30       	cpi	r18, 0x03	; 3
 1c6:	31 05       	cpc	r19, r1
 1c8:	09 f0       	breq	.+2      	; 0x1cc <KPAD_GET_CHAR+0xb4>
 1ca:	4e c0       	rjmp	.+156    	; 0x268 <KPAD_GET_CHAR+0x150>
 1cc:	61 c0       	rjmp	.+194    	; 0x290 <KPAD_GET_CHAR+0x178>
					 return 'R';
					 break;
					 //======================================
					 case 1:
					 if(j==0)
 1ce:	21 15       	cp	r18, r1
 1d0:	31 05       	cpc	r19, r1
 1d2:	09 f4       	brne	.+2      	; 0x1d6 <KPAD_GET_CHAR+0xbe>
 1d4:	5f c0       	rjmp	.+190    	; 0x294 <KPAD_GET_CHAR+0x17c>
					 return '7';
					 else if(j==1)
 1d6:	21 30       	cpi	r18, 0x01	; 1
 1d8:	31 05       	cpc	r19, r1
 1da:	09 f4       	brne	.+2      	; 0x1de <KPAD_GET_CHAR+0xc6>
 1dc:	5d c0       	rjmp	.+186    	; 0x298 <KPAD_GET_CHAR+0x180>
					 return '4';
					 else if(j==2)
 1de:	22 30       	cpi	r18, 0x02	; 2
 1e0:	31 05       	cpc	r19, r1
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <KPAD_GET_CHAR+0xce>
 1e4:	5b c0       	rjmp	.+182    	; 0x29c <KPAD_GET_CHAR+0x184>
					 return '1';
					 else if(j==3)
 1e6:	23 30       	cpi	r18, 0x03	; 3
 1e8:	31 05       	cpc	r19, r1
 1ea:	f1 f5       	brne	.+124    	; 0x268 <KPAD_GET_CHAR+0x150>
 1ec:	59 c0       	rjmp	.+178    	; 0x2a0 <KPAD_GET_CHAR+0x188>
					 return '0';
					 break;
					 //========================================
					 case 2:
					 if(j==0)
 1ee:	21 15       	cp	r18, r1
 1f0:	31 05       	cpc	r19, r1
 1f2:	09 f4       	brne	.+2      	; 0x1f6 <KPAD_GET_CHAR+0xde>
 1f4:	57 c0       	rjmp	.+174    	; 0x2a4 <KPAD_GET_CHAR+0x18c>
					 return '8';
					 else if(j==1)
 1f6:	21 30       	cpi	r18, 0x01	; 1
 1f8:	31 05       	cpc	r19, r1
 1fa:	09 f4       	brne	.+2      	; 0x1fe <KPAD_GET_CHAR+0xe6>
 1fc:	55 c0       	rjmp	.+170    	; 0x2a8 <KPAD_GET_CHAR+0x190>
					 return '5';
					 else if(j==2)
 1fe:	22 30       	cpi	r18, 0x02	; 2
 200:	31 05       	cpc	r19, r1
 202:	09 f4       	brne	.+2      	; 0x206 <KPAD_GET_CHAR+0xee>
 204:	53 c0       	rjmp	.+166    	; 0x2ac <KPAD_GET_CHAR+0x194>
					 return '2';
					 else if(j==3)
 206:	23 30       	cpi	r18, 0x03	; 3
 208:	31 05       	cpc	r19, r1
 20a:	71 f5       	brne	.+92     	; 0x268 <KPAD_GET_CHAR+0x150>
 20c:	51 c0       	rjmp	.+162    	; 0x2b0 <KPAD_GET_CHAR+0x198>
					 return '.';
					 break;
					 //=======================================
					 case 3:
					 if(j==0)
 20e:	21 15       	cp	r18, r1
 210:	31 05       	cpc	r19, r1
 212:	09 f4       	brne	.+2      	; 0x216 <KPAD_GET_CHAR+0xfe>
 214:	4f c0       	rjmp	.+158    	; 0x2b4 <KPAD_GET_CHAR+0x19c>
					 return '9';
					 else if(j==1)
 216:	21 30       	cpi	r18, 0x01	; 1
 218:	31 05       	cpc	r19, r1
 21a:	09 f4       	brne	.+2      	; 0x21e <KPAD_GET_CHAR+0x106>
 21c:	4d c0       	rjmp	.+154    	; 0x2b8 <KPAD_GET_CHAR+0x1a0>
					 return '6';
					 else if(j==2)
 21e:	22 30       	cpi	r18, 0x02	; 2
 220:	31 05       	cpc	r19, r1
 222:	09 f4       	brne	.+2      	; 0x226 <KPAD_GET_CHAR+0x10e>
 224:	4b c0       	rjmp	.+150    	; 0x2bc <KPAD_GET_CHAR+0x1a4>
					 return '3';
					 else if(j==3)
 226:	23 30       	cpi	r18, 0x03	; 3
 228:	31 05       	cpc	r19, r1
 22a:	f1 f4       	brne	.+60     	; 0x268 <KPAD_GET_CHAR+0x150>
 22c:	49 c0       	rjmp	.+146    	; 0x2c0 <KPAD_GET_CHAR+0x1a8>
					 return '=';
					 break;
					 //=======================================
					 case 4:
					 if(j==0)
 22e:	21 15       	cp	r18, r1
 230:	31 05       	cpc	r19, r1
 232:	09 f4       	brne	.+2      	; 0x236 <KPAD_GET_CHAR+0x11e>
 234:	47 c0       	rjmp	.+142    	; 0x2c4 <KPAD_GET_CHAR+0x1ac>
					 return '*';
					 else if(j==1)
 236:	21 30       	cpi	r18, 0x01	; 1
 238:	31 05       	cpc	r19, r1
 23a:	09 f4       	brne	.+2      	; 0x23e <KPAD_GET_CHAR+0x126>
 23c:	45 c0       	rjmp	.+138    	; 0x2c8 <KPAD_GET_CHAR+0x1b0>
					 return '-';
					 else if(j==2)
 23e:	22 30       	cpi	r18, 0x02	; 2
 240:	31 05       	cpc	r19, r1
 242:	09 f4       	brne	.+2      	; 0x246 <KPAD_GET_CHAR+0x12e>
 244:	43 c0       	rjmp	.+134    	; 0x2cc <KPAD_GET_CHAR+0x1b4>
					 return '+';
					 else if(j==3)
 246:	23 30       	cpi	r18, 0x03	; 3
 248:	31 05       	cpc	r19, r1
 24a:	71 f4       	brne	.+28     	; 0x268 <KPAD_GET_CHAR+0x150>
 24c:	41 c0       	rjmp	.+130    	; 0x2d0 <KPAD_GET_CHAR+0x1b8>
					 return '+';
					 break;
					 //=======================================
					 case 5:
					 if(j==0)
 24e:	21 15       	cp	r18, r1
 250:	31 05       	cpc	r19, r1
 252:	09 f4       	brne	.+2      	; 0x256 <KPAD_GET_CHAR+0x13e>
 254:	3f c0       	rjmp	.+126    	; 0x2d4 <KPAD_GET_CHAR+0x1bc>
					 return '/';
					 else if(j==1)
 256:	21 30       	cpi	r18, 0x01	; 1
 258:	31 05       	cpc	r19, r1
 25a:	f1 f1       	breq	.+124    	; 0x2d8 <KPAD_GET_CHAR+0x1c0>
					 return 'N';
					 else if(j==2)
 25c:	22 30       	cpi	r18, 0x02	; 2
 25e:	31 05       	cpc	r19, r1
 260:	e9 f1       	breq	.+122    	; 0x2dc <KPAD_GET_CHAR+0x1c4>
					 return 'M';
					 else if(j==3)
 262:	23 30       	cpi	r18, 0x03	; 3
 264:	31 05       	cpc	r19, r1
 266:	e1 f1       	breq	.+120    	; 0x2e0 <KPAD_GET_CHAR+0x1c8>
	for(int i = 0; i<6; i++)//col
	{
		KPAD_COL_PORT_VALUE = 0x3F;		

		RESET_BIT(KPAD_COL_PORT_VALUE,i);
		for(int j = 0; j<4; j++)
 268:	2f 5f       	subi	r18, 0xFF	; 255
 26a:	3f 4f       	sbci	r19, 0xFF	; 255
 26c:	24 30       	cpi	r18, 0x04	; 4
 26e:	31 05       	cpc	r19, r1
 270:	0c f4       	brge	.+2      	; 0x274 <KPAD_GET_CHAR+0x15c>
 272:	66 cf       	rjmp	.-308    	; 0x140 <KPAD_GET_CHAR+0x28>
}


char KPAD_GET_CHAR()
{
	for(int i = 0; i<6; i++)//col
 274:	6f 5f       	subi	r22, 0xFF	; 255
 276:	7f 4f       	sbci	r23, 0xFF	; 255
 278:	66 30       	cpi	r22, 0x06	; 6
 27a:	71 05       	cpc	r23, r1
 27c:	0c f4       	brge	.+2      	; 0x280 <KPAD_GET_CHAR+0x168>
 27e:	4f cf       	rjmp	.-354    	; 0x11e <KPAD_GET_CHAR+0x6>
					 break;
				 }
			 }
		 }
	 }
	 return 'N';
 280:	8e e4       	ldi	r24, 0x4E	; 78
 282:	08 95       	ret
				 switch(i)
				 {
					 //====================================
					 case 0:
					 if(j==0)
					 return '!';
 284:	81 e2       	ldi	r24, 0x21	; 33
 286:	08 95       	ret
					 else if(j==1)
					 return 'N';
 288:	8e e4       	ldi	r24, 0x4E	; 78
 28a:	08 95       	ret
					 else if(j==2)
					 return '%';
 28c:	85 e2       	ldi	r24, 0x25	; 37
 28e:	08 95       	ret
					 else if(j==3)
					 return 'R';
 290:	82 e5       	ldi	r24, 0x52	; 82
 292:	08 95       	ret
					 break;
					 //======================================
					 case 1:
					 if(j==0)
					 return '7';
 294:	87 e3       	ldi	r24, 0x37	; 55
 296:	08 95       	ret
					 else if(j==1)
					 return '4';
 298:	84 e3       	ldi	r24, 0x34	; 52
 29a:	08 95       	ret
					 else if(j==2)
					 return '1';
 29c:	81 e3       	ldi	r24, 0x31	; 49
 29e:	08 95       	ret
					 else if(j==3)
					 return '0';
 2a0:	80 e3       	ldi	r24, 0x30	; 48
 2a2:	08 95       	ret
					 break;
					 //========================================
					 case 2:
					 if(j==0)
					 return '8';
 2a4:	88 e3       	ldi	r24, 0x38	; 56
 2a6:	08 95       	ret
					 else if(j==1)
					 return '5';
 2a8:	85 e3       	ldi	r24, 0x35	; 53
 2aa:	08 95       	ret
					 else if(j==2)
					 return '2';
 2ac:	82 e3       	ldi	r24, 0x32	; 50
 2ae:	08 95       	ret
					 else if(j==3)
					 return '.';
 2b0:	8e e2       	ldi	r24, 0x2E	; 46
 2b2:	08 95       	ret
					 break;
					 //=======================================
					 case 3:
					 if(j==0)
					 return '9';
 2b4:	89 e3       	ldi	r24, 0x39	; 57
 2b6:	08 95       	ret
					 else if(j==1)
					 return '6';
 2b8:	86 e3       	ldi	r24, 0x36	; 54
 2ba:	08 95       	ret
					 else if(j==2)
					 return '3';
 2bc:	83 e3       	ldi	r24, 0x33	; 51
 2be:	08 95       	ret
					 else if(j==3)
					 return '=';
 2c0:	8d e3       	ldi	r24, 0x3D	; 61
 2c2:	08 95       	ret
					 break;
					 //=======================================
					 case 4:
					 if(j==0)
					 return '*';
 2c4:	8a e2       	ldi	r24, 0x2A	; 42
 2c6:	08 95       	ret
					 else if(j==1)
					 return '-';
 2c8:	8d e2       	ldi	r24, 0x2D	; 45
 2ca:	08 95       	ret
					 else if(j==2)
					 return '+';
 2cc:	8b e2       	ldi	r24, 0x2B	; 43
 2ce:	08 95       	ret
					 else if(j==3)
					 return '+';
 2d0:	8b e2       	ldi	r24, 0x2B	; 43
 2d2:	08 95       	ret
					 break;
					 //=======================================
					 case 5:
					 if(j==0)
					 return '/';
 2d4:	8f e2       	ldi	r24, 0x2F	; 47
 2d6:	08 95       	ret
					 else if(j==1)
					 return 'N';
 2d8:	8e e4       	ldi	r24, 0x4E	; 78
 2da:	08 95       	ret
					 else if(j==2)
					 return 'M';
 2dc:	8d e4       	ldi	r24, 0x4D	; 77
 2de:	08 95       	ret
					 else if(j==3)
					 return 'M';
 2e0:	8d e4       	ldi	r24, 0x4D	; 77
				 }
			 }
		 }
	 }
	 return 'N';
 2e2:	08 95       	ret

000002e4 <LCD_ENABLE_PULSE_FUNC>:
	SET_BIT(LCD_CTRL_PORT_VALUE,RW);
	LCD_ENABLE_PULSE_FUNC();
	
	/*Make PORTA as an output*/
	#if ACTIVE_MODE == EIGHT_BIT_MODE
	LCD_PORT_DIRECTION = 0xff;
 2e4:	88 b3       	in	r24, 0x18	; 24
 2e6:	8d 7f       	andi	r24, 0xFD	; 253
 2e8:	88 bb       	out	0x18, r24	; 24
 2ea:	2f e7       	ldi	r18, 0x7F	; 127
 2ec:	88 e3       	ldi	r24, 0x38	; 56
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	21 50       	subi	r18, 0x01	; 1
 2f2:	80 40       	sbci	r24, 0x00	; 0
 2f4:	90 40       	sbci	r25, 0x00	; 0
 2f6:	e1 f7       	brne	.-8      	; 0x2f0 <LCD_ENABLE_PULSE_FUNC+0xc>
 2f8:	00 c0       	rjmp	.+0      	; 0x2fa <LCD_ENABLE_PULSE_FUNC+0x16>
 2fa:	00 00       	nop
 2fc:	88 b3       	in	r24, 0x18	; 24
 2fe:	82 60       	ori	r24, 0x02	; 2
 300:	88 bb       	out	0x18, r24	; 24
 302:	08 95       	ret

00000304 <LCD_SEND_COMMAND_FUNC>:
	//LCD_Busy();
	
	/*RESET RS and RW*/
	//RS = 0 ---> to take Instruction
	//RW = 0 ---> to write on screen, choose 0 not 1 because we don't need Read any data from LCD poat
	RESET_BIT(LCD_CTRL_PORT_VALUE,RW);
 304:	98 b3       	in	r25, 0x18	; 24
 306:	9b 7f       	andi	r25, 0xFB	; 251
 308:	98 bb       	out	0x18, r25	; 24
	RESET_BIT(LCD_CTRL_PORT_VALUE,RS);
 30a:	98 b3       	in	r25, 0x18	; 24
 30c:	97 7f       	andi	r25, 0xF7	; 247
 30e:	98 bb       	out	0x18, r25	; 24
	
	/*set LCD PORT = COMMAND*/
	#if ACTIVE_MODE == EIGHT_BIT_MODE
	LCD_PORT_VALUE = command;
 310:	8b bb       	out	0x1b, r24	; 27
	LCD_ENABLE_PULSE_FUNC();
 312:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_ENABLE_PULSE_FUNC>
 316:	08 95       	ret

00000318 <LCD_CLEAR_SCREEN_FUNC>:
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_CLEAR_SCREEN_FUNC()
{
	/*Clear return counter to zero*/
	LCD_SEND_COMMAND_FUNC(LCD_CLEAR_SCREEN);
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	0e 94 82 01 	call	0x304	; 0x304 <LCD_SEND_COMMAND_FUNC>
 31e:	08 95       	ret

00000320 <LCD_INIT_FUNC>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 320:	8f e3       	ldi	r24, 0x3F	; 63
 322:	9c e9       	ldi	r25, 0x9C	; 156
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <LCD_INIT_FUNC+0x4>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCD_INIT_FUNC+0xa>
 32a:	00 00       	nop
void LCD_INIT_FUNC()
{
	_delay_ms(20);
	/*INITTIALIZE LCD TO CLEAR SCREEN, LOOK AT TRM IN PAGES 8 AND 28*/
	/*Make ENABLE, RS AND RW AS OUTPUT AND GIVE THEM ZERO VALUE*/
	LCD_CTRL_PORT_DIRECTION |=  ((1 << RS) | (1 << RW) | (1 << ENABLE));   //Set all CTRL bits as output
 32c:	87 b3       	in	r24, 0x17	; 23
 32e:	8e 60       	ori	r24, 0x0E	; 14
 330:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL_PORT_VALUE     &= ~((1 << RS) | (1 << RW) | (1 << ENABLE));  //Give them zero value
 332:	88 b3       	in	r24, 0x18	; 24
 334:	81 7f       	andi	r24, 0xF1	; 241
 336:	88 bb       	out	0x18, r24	; 24
 338:	8f e2       	ldi	r24, 0x2F	; 47
 33a:	95 e7       	ldi	r25, 0x75	; 117
 33c:	01 97       	sbiw	r24, 0x01	; 1
 33e:	f1 f7       	brne	.-4      	; 0x33c <LCD_INIT_FUNC+0x1c>
 340:	00 c0       	rjmp	.+0      	; 0x342 <LCD_INIT_FUNC+0x22>
 342:	00 00       	nop
	
	_delay_ms(15);
	#if ACTIVE_MODE == EIGHT_BIT_MODE
	LCD_PORT_DIRECTION = 0xff; //Set all LCD PORT "PORTA" as an output
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	8a bb       	out	0x1a, r24	; 26
	LCD_CLEAR_SCREEN_FUNC();
 348:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_CLEAR_SCREEN_FUNC>
	LCD_SEND_COMMAND_FUNC(LCD_MOVE_CURSOR_TO_THE_HOME_POSITION);
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	0e 94 82 01 	call	0x304	; 0x304 <LCD_SEND_COMMAND_FUNC>
	LCD_SEND_COMMAND_FUNC(LCD_FUNCTION_8BIT_2LINES);
 352:	88 e3       	ldi	r24, 0x38	; 56
 354:	0e 94 82 01 	call	0x304	; 0x304 <LCD_SEND_COMMAND_FUNC>
	LCD_CLEAR_SCREEN_FUNC();
	LCD_SEND_COMMAND_FUNC(LCD_MOVE_CURSOR_TO_THE_HOME_POSITION);
	LCD_SEND_COMMAND_FUNC(LCD_FUNCTION_4BIT_2LINES);
	#endif
		
	LCD_SEND_COMMAND_FUNC(LCD_ENTRY_MODE);
 358:	86 e0       	ldi	r24, 0x06	; 6
 35a:	0e 94 82 01 	call	0x304	; 0x304 <LCD_SEND_COMMAND_FUNC>
	LCD_SEND_COMMAND_FUNC(LCD_BEGIN_AT_FIRST_ROW);
 35e:	80 e8       	ldi	r24, 0x80	; 128
 360:	0e 94 82 01 	call	0x304	; 0x304 <LCD_SEND_COMMAND_FUNC>
	LCD_SEND_COMMAND_FUNC(LCD_DISP_ON_CURSOR_BLINK);
 364:	8f e0       	ldi	r24, 0x0F	; 15
 366:	0e 94 82 01 	call	0x304	; 0x304 <LCD_SEND_COMMAND_FUNC>
 36a:	08 95       	ret

0000036c <LCD_SEND_CHAR_FUNC>:
		//LCD_Busy();
		
		/*RESET RW*/
		//RS = 1 ---> to take Instruction
		//RW = 0 ---> to write on screen, choose 0 not 1 because we don't need Read any data from LCD poat
		RESET_BIT(LCD_CTRL_PORT_VALUE,RW);
 36c:	98 b3       	in	r25, 0x18	; 24
 36e:	9b 7f       	andi	r25, 0xFB	; 251
 370:	98 bb       	out	0x18, r25	; 24
		SET_BIT(LCD_CTRL_PORT_VALUE,RS);
 372:	98 b3       	in	r25, 0x18	; 24
 374:	98 60       	ori	r25, 0x08	; 8
 376:	98 bb       	out	0x18, r25	; 24
		
		/*set LCD PORT = DATA*/
		#if ACTIVE_MODE == EIGHT_BIT_MODE
		LCD_PORT_VALUE = data;
 378:	8b bb       	out	0x1b, r24	; 27
		LCD_ENABLE_PULSE_FUNC();
 37a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <LCD_ENABLE_PULSE_FUNC>
 37e:	08 95       	ret

00000380 <LCD_SET_CURSOR_FUNC>:
	}
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_SET_CURSOR_FUNC(uint8_t line, uint8_t col)
{
	if(line == 0)
 380:	81 11       	cpse	r24, r1
 382:	07 c0       	rjmp	.+14     	; 0x392 <LCD_SET_CURSOR_FUNC+0x12>
	{
		if(col < 16 && col >=0)
 384:	60 31       	cpi	r22, 0x10	; 16
 386:	68 f4       	brcc	.+26     	; 0x3a2 <LCD_SET_CURSOR_FUNC+0x22>
		LCD_SEND_COMMAND_FUNC(LCD_BEGIN_AT_FIRST_ROW + col);
 388:	80 e8       	ldi	r24, 0x80	; 128
 38a:	86 0f       	add	r24, r22
 38c:	0e 94 82 01 	call	0x304	; 0x304 <LCD_SEND_COMMAND_FUNC>
 390:	08 95       	ret
	}
	else if(line == 1)
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	31 f4       	brne	.+12     	; 0x3a2 <LCD_SET_CURSOR_FUNC+0x22>
	{
		if(col < 16 && col >=0)
 396:	60 31       	cpi	r22, 0x10	; 16
 398:	20 f4       	brcc	.+8      	; 0x3a2 <LCD_SET_CURSOR_FUNC+0x22>
		LCD_SEND_COMMAND_FUNC(LCD_BEGIN_AT_SECOND_ROW + col);
 39a:	80 ec       	ldi	r24, 0xC0	; 192
 39c:	86 0f       	add	r24, r22
 39e:	0e 94 82 01 	call	0x304	; 0x304 <LCD_SEND_COMMAND_FUNC>
 3a2:	08 95       	ret

000003a4 <LCD_SEND_STRING_FUNC>:
		LCD_ENABLE_PULSE_FUNC();
		#endif	
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_SEND_STRING_FUNC(char* string)
{
 3a4:	0f 93       	push	r16
 3a6:	1f 93       	push	r17
 3a8:	cf 93       	push	r28
 3aa:	df 93       	push	r29
 3ac:	8c 01       	movw	r16, r24
	int counter = 0;
 3ae:	c0 e0       	ldi	r28, 0x00	; 0
 3b0:	d0 e0       	ldi	r29, 0x00	; 0
	while(*string > 0)
 3b2:	18 c0       	rjmp	.+48     	; 0x3e4 <LCD_SEND_STRING_FUNC+0x40>
	{
		counter++;
 3b4:	21 96       	adiw	r28, 0x01	; 1
		LCD_SEND_CHAR_FUNC(*string++);
 3b6:	0f 5f       	subi	r16, 0xFF	; 255
 3b8:	1f 4f       	sbci	r17, 0xFF	; 255
 3ba:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
		if(counter == 16)
 3be:	c0 31       	cpi	r28, 0x10	; 16
 3c0:	d1 05       	cpc	r29, r1
 3c2:	29 f4       	brne	.+10     	; 0x3ce <LCD_SEND_STRING_FUNC+0x2a>
		LCD_SET_CURSOR_FUNC(1,0);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_SET_CURSOR_FUNC>
 3cc:	0b c0       	rjmp	.+22     	; 0x3e4 <LCD_SEND_STRING_FUNC+0x40>
		else if(counter == 33)
 3ce:	c1 32       	cpi	r28, 0x21	; 33
 3d0:	d1 05       	cpc	r29, r1
 3d2:	41 f4       	brne	.+16     	; 0x3e4 <LCD_SEND_STRING_FUNC+0x40>
		{
			LCD_CLEAR_SCREEN_FUNC();
 3d4:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_CLEAR_SCREEN_FUNC>
			LCD_SET_CURSOR_FUNC(0,0);
 3d8:	60 e0       	ldi	r22, 0x00	; 0
 3da:	80 e0       	ldi	r24, 0x00	; 0
 3dc:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_SET_CURSOR_FUNC>
			counter = 0;
 3e0:	c0 e0       	ldi	r28, 0x00	; 0
 3e2:	d0 e0       	ldi	r29, 0x00	; 0
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_SEND_STRING_FUNC(char* string)
{
	int counter = 0;
	while(*string > 0)
 3e4:	f8 01       	movw	r30, r16
 3e6:	80 81       	ld	r24, Z
 3e8:	81 11       	cpse	r24, r1
 3ea:	e4 cf       	rjmp	.-56     	; 0x3b4 <LCD_SEND_STRING_FUNC+0x10>
			LCD_CLEAR_SCREEN_FUNC();
			LCD_SET_CURSOR_FUNC(0,0);
			counter = 0;
		}
	}
}
 3ec:	df 91       	pop	r29
 3ee:	cf 91       	pop	r28
 3f0:	1f 91       	pop	r17
 3f2:	0f 91       	pop	r16
 3f4:	08 95       	ret

000003f6 <LCD_DISPLAY_NUMBER_FUNC>:
		LCD_SEND_COMMAND_FUNC(LCD_BEGIN_AT_SECOND_ROW + col);
	}
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_DISPLAY_NUMBER_FUNC(int n)
{
 3f6:	0f 93       	push	r16
 3f8:	1f 93       	push	r17
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	cd b7       	in	r28, 0x3d	; 61
 400:	de b7       	in	r29, 0x3e	; 62
 402:	2a 97       	sbiw	r28, 0x0a	; 10
 404:	0f b6       	in	r0, 0x3f	; 63
 406:	f8 94       	cli
 408:	de bf       	out	0x3e, r29	; 62
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	cd bf       	out	0x3d, r28	; 61
	char int_to_string[10];
	sprintf(int_to_string,"%d",n);
 40e:	9f 93       	push	r25
 410:	8f 93       	push	r24
 412:	80 e6       	ldi	r24, 0x60	; 96
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	9f 93       	push	r25
 418:	8f 93       	push	r24
 41a:	8e 01       	movw	r16, r28
 41c:	0f 5f       	subi	r16, 0xFF	; 255
 41e:	1f 4f       	sbci	r17, 0xFF	; 255
 420:	1f 93       	push	r17
 422:	0f 93       	push	r16
 424:	0e 94 fb 04 	call	0x9f6	; 0x9f6 <sprintf>
	LCD_SEND_STRING_FUNC(int_to_string);
 428:	c8 01       	movw	r24, r16
 42a:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <LCD_SEND_STRING_FUNC>
}
 42e:	0f 90       	pop	r0
 430:	0f 90       	pop	r0
 432:	0f 90       	pop	r0
 434:	0f 90       	pop	r0
 436:	0f 90       	pop	r0
 438:	0f 90       	pop	r0
 43a:	2a 96       	adiw	r28, 0x0a	; 10
 43c:	0f b6       	in	r0, 0x3f	; 63
 43e:	f8 94       	cli
 440:	de bf       	out	0x3e, r29	; 62
 442:	0f be       	out	0x3f, r0	; 63
 444:	cd bf       	out	0x3d, r28	; 61
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	0f 91       	pop	r16
 44e:	08 95       	ret

00000450 <modify_number>:
	}
}

void modify_number(int number_counter, char press_key)
{
	switch (number_counter)
 450:	82 30       	cpi	r24, 0x02	; 2
 452:	91 05       	cpc	r25, r1
 454:	89 f1       	breq	.+98     	; 0x4b8 <modify_number+0x68>
 456:	2c f4       	brge	.+10     	; 0x462 <modify_number+0x12>
 458:	00 97       	sbiw	r24, 0x00	; 0
 45a:	59 f0       	breq	.+22     	; 0x472 <modify_number+0x22>
 45c:	01 97       	sbiw	r24, 0x01	; 1
 45e:	89 f0       	breq	.+34     	; 0x482 <modify_number+0x32>
 460:	08 95       	ret
 462:	83 30       	cpi	r24, 0x03	; 3
 464:	91 05       	cpc	r25, r1
 466:	09 f4       	brne	.+2      	; 0x46a <modify_number+0x1a>
 468:	55 c0       	rjmp	.+170    	; 0x514 <modify_number+0xc4>
 46a:	04 97       	sbiw	r24, 0x04	; 4
 46c:	09 f4       	brne	.+2      	; 0x470 <modify_number+0x20>
 46e:	93 c0       	rjmp	.+294    	; 0x596 <modify_number+0x146>
 470:	08 95       	ret
	{
	case 0:
		temp_0 = (press_key - 48) * 1;
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	60 53       	subi	r22, 0x30	; 48
 476:	71 09       	sbc	r23, r1
 478:	70 93 6d 00 	sts	0x006D, r23	; 0x80006d <temp_0+0x1>
 47c:	60 93 6c 00 	sts	0x006C, r22	; 0x80006c <temp_0>
		break;
 480:	08 95       	ret
	case 1:
		temp_0 *= 10;
 482:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <temp_0>
 486:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <temp_0+0x1>
 48a:	9c 01       	movw	r18, r24
 48c:	22 0f       	add	r18, r18
 48e:	33 1f       	adc	r19, r19
 490:	88 0f       	add	r24, r24
 492:	99 1f       	adc	r25, r25
 494:	88 0f       	add	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	88 0f       	add	r24, r24
 49a:	99 1f       	adc	r25, r25
 49c:	82 0f       	add	r24, r18
 49e:	93 1f       	adc	r25, r19
 4a0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <temp_0+0x1>
 4a4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <temp_0>
		temp_1 = (press_key - 48) * 1;
 4a8:	70 e0       	ldi	r23, 0x00	; 0
 4aa:	60 53       	subi	r22, 0x30	; 48
 4ac:	71 09       	sbc	r23, r1
 4ae:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <temp_1+0x1>
 4b2:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <temp_1>
		break;
 4b6:	08 95       	ret
	case 2:
		temp_0 *= 10;
 4b8:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <temp_0>
 4bc:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <temp_0+0x1>
 4c0:	9c 01       	movw	r18, r24
 4c2:	22 0f       	add	r18, r18
 4c4:	33 1f       	adc	r19, r19
 4c6:	88 0f       	add	r24, r24
 4c8:	99 1f       	adc	r25, r25
 4ca:	88 0f       	add	r24, r24
 4cc:	99 1f       	adc	r25, r25
 4ce:	88 0f       	add	r24, r24
 4d0:	99 1f       	adc	r25, r25
 4d2:	82 0f       	add	r24, r18
 4d4:	93 1f       	adc	r25, r19
 4d6:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <temp_0+0x1>
 4da:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <temp_0>
		temp_1 *= 10;
 4de:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp_1>
 4e2:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp_1+0x1>
 4e6:	9c 01       	movw	r18, r24
 4e8:	22 0f       	add	r18, r18
 4ea:	33 1f       	adc	r19, r19
 4ec:	88 0f       	add	r24, r24
 4ee:	99 1f       	adc	r25, r25
 4f0:	88 0f       	add	r24, r24
 4f2:	99 1f       	adc	r25, r25
 4f4:	88 0f       	add	r24, r24
 4f6:	99 1f       	adc	r25, r25
 4f8:	82 0f       	add	r24, r18
 4fa:	93 1f       	adc	r25, r19
 4fc:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <temp_1+0x1>
 500:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <temp_1>
		temp_2 = (press_key - 48) * 1;
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	60 53       	subi	r22, 0x30	; 48
 508:	71 09       	sbc	r23, r1
 50a:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <temp_2+0x1>
 50e:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <temp_2>
		break;
 512:	08 95       	ret
	case 3:
		temp_0 *= 10;
 514:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <temp_0>
 518:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <temp_0+0x1>
 51c:	9c 01       	movw	r18, r24
 51e:	22 0f       	add	r18, r18
 520:	33 1f       	adc	r19, r19
 522:	88 0f       	add	r24, r24
 524:	99 1f       	adc	r25, r25
 526:	88 0f       	add	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	82 0f       	add	r24, r18
 530:	93 1f       	adc	r25, r19
 532:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <temp_0+0x1>
 536:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <temp_0>
		temp_1 *= 10;
 53a:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp_1>
 53e:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp_1+0x1>
 542:	9c 01       	movw	r18, r24
 544:	22 0f       	add	r18, r18
 546:	33 1f       	adc	r19, r19
 548:	88 0f       	add	r24, r24
 54a:	99 1f       	adc	r25, r25
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	88 0f       	add	r24, r24
 552:	99 1f       	adc	r25, r25
 554:	82 0f       	add	r24, r18
 556:	93 1f       	adc	r25, r19
 558:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <temp_1+0x1>
 55c:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <temp_1>
		temp_2 *= 10;
 560:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <temp_2>
 564:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <temp_2+0x1>
 568:	9c 01       	movw	r18, r24
 56a:	22 0f       	add	r18, r18
 56c:	33 1f       	adc	r19, r19
 56e:	88 0f       	add	r24, r24
 570:	99 1f       	adc	r25, r25
 572:	88 0f       	add	r24, r24
 574:	99 1f       	adc	r25, r25
 576:	88 0f       	add	r24, r24
 578:	99 1f       	adc	r25, r25
 57a:	82 0f       	add	r24, r18
 57c:	93 1f       	adc	r25, r19
 57e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <temp_2+0x1>
 582:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <temp_2>
		temp_3 = (press_key - 48) * 1;
 586:	70 e0       	ldi	r23, 0x00	; 0
 588:	60 53       	subi	r22, 0x30	; 48
 58a:	71 09       	sbc	r23, r1
 58c:	70 93 67 00 	sts	0x0067, r23	; 0x800067 <temp_3+0x1>
 590:	60 93 66 00 	sts	0x0066, r22	; 0x800066 <temp_3>
		break;
 594:	08 95       	ret
	case 4:
		temp_0 *= 10;
 596:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <temp_0>
 59a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <temp_0+0x1>
 59e:	9c 01       	movw	r18, r24
 5a0:	22 0f       	add	r18, r18
 5a2:	33 1f       	adc	r19, r19
 5a4:	88 0f       	add	r24, r24
 5a6:	99 1f       	adc	r25, r25
 5a8:	88 0f       	add	r24, r24
 5aa:	99 1f       	adc	r25, r25
 5ac:	88 0f       	add	r24, r24
 5ae:	99 1f       	adc	r25, r25
 5b0:	82 0f       	add	r24, r18
 5b2:	93 1f       	adc	r25, r19
 5b4:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <temp_0+0x1>
 5b8:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <temp_0>
		temp_1 *= 10;
 5bc:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp_1>
 5c0:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp_1+0x1>
 5c4:	9c 01       	movw	r18, r24
 5c6:	22 0f       	add	r18, r18
 5c8:	33 1f       	adc	r19, r19
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	88 0f       	add	r24, r24
 5d0:	99 1f       	adc	r25, r25
 5d2:	88 0f       	add	r24, r24
 5d4:	99 1f       	adc	r25, r25
 5d6:	82 0f       	add	r24, r18
 5d8:	93 1f       	adc	r25, r19
 5da:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <temp_1+0x1>
 5de:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <temp_1>
		temp_2 *= 10;
 5e2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <temp_2>
 5e6:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <temp_2+0x1>
 5ea:	9c 01       	movw	r18, r24
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	88 0f       	add	r24, r24
 5f6:	99 1f       	adc	r25, r25
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	82 0f       	add	r24, r18
 5fe:	93 1f       	adc	r25, r19
 600:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <temp_2+0x1>
 604:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <temp_2>
		temp_3 *= 10;
 608:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <temp_3>
 60c:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <temp_3+0x1>
 610:	9c 01       	movw	r18, r24
 612:	22 0f       	add	r18, r18
 614:	33 1f       	adc	r19, r19
 616:	88 0f       	add	r24, r24
 618:	99 1f       	adc	r25, r25
 61a:	88 0f       	add	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	88 0f       	add	r24, r24
 620:	99 1f       	adc	r25, r25
 622:	82 0f       	add	r24, r18
 624:	93 1f       	adc	r25, r19
 626:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <temp_3+0x1>
 62a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <temp_3>
		temp_4 = (press_key - 48) * 1;
 62e:	70 e0       	ldi	r23, 0x00	; 0
 630:	60 53       	subi	r22, 0x30	; 48
 632:	71 09       	sbc	r23, r1
 634:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__data_end+0x1>
 638:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__data_end>
 63c:	08 95       	ret

0000063e <main>:
{
	int flag_1 = 1, flag_2 = 1, sum = 0, sub = 0, multi = 0, div = 0, mod = 0, root = 0, res = 0;
	int first_number, second_number;
	char press_key;
	int number_counter = 0;
	LCD_INIT_FUNC();
 63e:	0e 94 90 01 	call	0x320	; 0x320 <LCD_INIT_FUNC>
	KPAD_INIT_FUNC();
 642:	0e 94 85 00 	call	0x10a	; 0x10a <KPAD_INIT_FUNC>
int main(void)
{
	int flag_1 = 1, flag_2 = 1, sum = 0, sub = 0, multi = 0, div = 0, mod = 0, root = 0, res = 0;
	int first_number, second_number;
	char press_key;
	int number_counter = 0;
 646:	c0 e0       	ldi	r28, 0x00	; 0
 648:	d0 e0       	ldi	r29, 0x00	; 0

static int temp_0 = 0, temp_1 = 0, temp_2 = 0, temp_3 = 0, temp_4 = 0;
void modify_number(int number_counter, char press_key);
int main(void)
{
	int flag_1 = 1, flag_2 = 1, sum = 0, sub = 0, multi = 0, div = 0, mod = 0, root = 0, res = 0;
 64a:	61 2c       	mov	r6, r1
 64c:	71 2c       	mov	r7, r1
 64e:	41 2c       	mov	r4, r1
 650:	51 2c       	mov	r5, r1
 652:	81 2c       	mov	r8, r1
 654:	91 2c       	mov	r9, r1
 656:	a1 2c       	mov	r10, r1
 658:	b1 2c       	mov	r11, r1
 65a:	c1 2c       	mov	r12, r1
 65c:	d1 2c       	mov	r13, r1
 65e:	01 e0       	ldi	r16, 0x01	; 1
 660:	10 e0       	ldi	r17, 0x00	; 0
 662:	8a c0       	rjmp	.+276    	; 0x778 <main+0x13a>
	KPAD_INIT_FUNC();
	while (1)
	{
		while (flag_1)
		{
			press_key = KPAD_GET_CHAR();
 664:	0e 94 8c 00 	call	0x118	; 0x118 <KPAD_GET_CHAR>
 668:	f8 2e       	mov	r15, r24
			switch (press_key)
 66a:	90 e0       	ldi	r25, 0x00	; 0
 66c:	fc 01       	movw	r30, r24
 66e:	b5 97       	sbiw	r30, 0x25	; 37
 670:	ee 32       	cpi	r30, 0x2E	; 46
 672:	f1 05       	cpc	r31, r1
 674:	08 f0       	brcs	.+2      	; 0x678 <main+0x3a>
 676:	80 c0       	rjmp	.+256    	; 0x778 <main+0x13a>
 678:	e6 5d       	subi	r30, 0xD6	; 214
 67a:	ff 4f       	sbci	r31, 0xFF	; 255
 67c:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__tablejump2__>
			{
			case '0':
				LCD_SEND_CHAR_FUNC(press_key);
 680:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 684:	6f 2d       	mov	r22, r15
 686:	ce 01       	movw	r24, r28
 688:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 68c:	21 96       	adiw	r28, 0x01	; 1
				break;
 68e:	74 c0       	rjmp	.+232    	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '1':
				LCD_SEND_CHAR_FUNC(press_key);
 690:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 694:	6f 2d       	mov	r22, r15
 696:	ce 01       	movw	r24, r28
 698:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 69c:	21 96       	adiw	r28, 0x01	; 1
				break;
 69e:	6c c0       	rjmp	.+216    	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '2':
				LCD_SEND_CHAR_FUNC(press_key);
 6a0:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 6a4:	6f 2d       	mov	r22, r15
 6a6:	ce 01       	movw	r24, r28
 6a8:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 6ac:	21 96       	adiw	r28, 0x01	; 1
				break;
 6ae:	64 c0       	rjmp	.+200    	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '3':
				LCD_SEND_CHAR_FUNC(press_key);
 6b0:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 6b4:	6f 2d       	mov	r22, r15
 6b6:	ce 01       	movw	r24, r28
 6b8:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 6bc:	21 96       	adiw	r28, 0x01	; 1
				break;
 6be:	5c c0       	rjmp	.+184    	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '4':
				LCD_SEND_CHAR_FUNC(press_key);
 6c0:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 6c4:	6f 2d       	mov	r22, r15
 6c6:	ce 01       	movw	r24, r28
 6c8:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 6cc:	21 96       	adiw	r28, 0x01	; 1
				break;
 6ce:	54 c0       	rjmp	.+168    	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '5':
				LCD_SEND_CHAR_FUNC(press_key);
 6d0:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 6d4:	6f 2d       	mov	r22, r15
 6d6:	ce 01       	movw	r24, r28
 6d8:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 6dc:	21 96       	adiw	r28, 0x01	; 1
				break;
 6de:	4c c0       	rjmp	.+152    	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '6':
				LCD_SEND_CHAR_FUNC(press_key);
 6e0:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 6e4:	6f 2d       	mov	r22, r15
 6e6:	ce 01       	movw	r24, r28
 6e8:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 6ec:	21 96       	adiw	r28, 0x01	; 1
				break;
 6ee:	44 c0       	rjmp	.+136    	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '7':
				LCD_SEND_CHAR_FUNC(press_key);
 6f0:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 6f4:	6f 2d       	mov	r22, r15
 6f6:	ce 01       	movw	r24, r28
 6f8:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 6fc:	21 96       	adiw	r28, 0x01	; 1
				break;
 6fe:	3c c0       	rjmp	.+120    	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '8':
				LCD_SEND_CHAR_FUNC(press_key);
 700:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 704:	6f 2d       	mov	r22, r15
 706:	ce 01       	movw	r24, r28
 708:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 70c:	21 96       	adiw	r28, 0x01	; 1
				break;
 70e:	34 c0       	rjmp	.+104    	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '9':
				LCD_SEND_CHAR_FUNC(press_key);
 710:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 714:	6f 2d       	mov	r22, r15
 716:	ce 01       	movw	r24, r28
 718:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 71c:	21 96       	adiw	r28, 0x01	; 1
				break;
 71e:	2c c0       	rjmp	.+88     	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '+':
				LCD_SEND_CHAR_FUNC(press_key);
 720:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				sum = 1;
 724:	cc 24       	eor	r12, r12
 726:	c3 94       	inc	r12
 728:	d1 2c       	mov	r13, r1
				flag_1 = 0;
 72a:	00 e0       	ldi	r16, 0x00	; 0
 72c:	10 e0       	ldi	r17, 0x00	; 0
				break;
 72e:	24 c0       	rjmp	.+72     	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '-':
				LCD_SEND_CHAR_FUNC(press_key);
 730:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				sub = 1;
 734:	aa 24       	eor	r10, r10
 736:	a3 94       	inc	r10
 738:	b1 2c       	mov	r11, r1
				flag_1 = 0;
 73a:	00 e0       	ldi	r16, 0x00	; 0
 73c:	10 e0       	ldi	r17, 0x00	; 0
				break;
 73e:	1c c0       	rjmp	.+56     	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '*':
				LCD_SEND_CHAR_FUNC(press_key);
 740:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				multi = 1;
 744:	88 24       	eor	r8, r8
 746:	83 94       	inc	r8
 748:	91 2c       	mov	r9, r1
				flag_1 = 0;
 74a:	00 e0       	ldi	r16, 0x00	; 0
 74c:	10 e0       	ldi	r17, 0x00	; 0
				break;
 74e:	14 c0       	rjmp	.+40     	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '/':
				LCD_SEND_CHAR_FUNC(press_key);
 750:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				div = 1;
 754:	44 24       	eor	r4, r4
 756:	43 94       	inc	r4
 758:	51 2c       	mov	r5, r1
				flag_1 = 0;
 75a:	00 e0       	ldi	r16, 0x00	; 0
 75c:	10 e0       	ldi	r17, 0x00	; 0
				break;
 75e:	0c c0       	rjmp	.+24     	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case 'R':
				LCD_SEND_CHAR_FUNC(press_key);
 760:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				root = 1;
				flag_1 = 0;
 764:	00 e0       	ldi	r16, 0x00	; 0
 766:	10 e0       	ldi	r17, 0x00	; 0
				break;
 768:	07 c0       	rjmp	.+14     	; 0x778 <main+0x13a>
			/////////////////////////////////////////////
			case '%':
				LCD_SEND_CHAR_FUNC(press_key);
 76a:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				mod = 1;
 76e:	66 24       	eor	r6, r6
 770:	63 94       	inc	r6
 772:	71 2c       	mov	r7, r1
				flag_1 = 0;
 774:	00 e0       	ldi	r16, 0x00	; 0
 776:	10 e0       	ldi	r17, 0x00	; 0
	int number_counter = 0;
	LCD_INIT_FUNC();
	KPAD_INIT_FUNC();
	while (1)
	{
		while (flag_1)
 778:	01 15       	cp	r16, r1
 77a:	11 05       	cpc	r17, r1
 77c:	09 f0       	breq	.+2      	; 0x780 <main+0x142>
 77e:	72 cf       	rjmp	.-284    	; 0x664 <main+0x26>
				flag_1 = 0;
				break;
				/////////////////////////////////////////////
			}
		}
		first_number = temp_0 + temp_1 + temp_2 + temp_3 + temp_4;
 780:	e0 90 6c 00 	lds	r14, 0x006C	; 0x80006c <temp_0>
 784:	f0 90 6d 00 	lds	r15, 0x006D	; 0x80006d <temp_0+0x1>
 788:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp_1>
 78c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp_1+0x1>
 790:	e8 0e       	add	r14, r24
 792:	f9 1e       	adc	r15, r25
 794:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <temp_2>
 798:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <temp_2+0x1>
 79c:	e8 0e       	add	r14, r24
 79e:	f9 1e       	adc	r15, r25
 7a0:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <temp_3>
 7a4:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <temp_3+0x1>
 7a8:	e8 0e       	add	r14, r24
 7aa:	f9 1e       	adc	r15, r25
 7ac:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 7b0:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 7b4:	e8 0e       	add	r14, r24
 7b6:	f9 1e       	adc	r15, r25
		temp_0 = 0; temp_1 = 0; temp_2 = 0; temp_3 = 0; temp_4 = 0;
 7b8:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <temp_0+0x1>
 7bc:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <temp_0>
 7c0:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <temp_1+0x1>
 7c4:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <temp_1>
 7c8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <temp_2+0x1>
 7cc:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <temp_2>
 7d0:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <temp_3+0x1>
 7d4:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <temp_3>
 7d8:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 7dc:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
		number_counter = 0;
 7e0:	c0 e0       	ldi	r28, 0x00	; 0
 7e2:	d0 e0       	ldi	r29, 0x00	; 0
		while (flag_2)
 7e4:	01 e0       	ldi	r16, 0x01	; 1
 7e6:	10 e0       	ldi	r17, 0x00	; 0
 7e8:	66 c0       	rjmp	.+204    	; 0x8b6 <__stack+0x57>
		{
			press_key = KPAD_GET_CHAR();
 7ea:	0e 94 8c 00 	call	0x118	; 0x118 <KPAD_GET_CHAR>
 7ee:	38 2e       	mov	r3, r24
			switch (press_key)
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	fc 01       	movw	r30, r24
 7f4:	f0 97       	sbiw	r30, 0x30	; 48
 7f6:	ee 30       	cpi	r30, 0x0E	; 14
 7f8:	f1 05       	cpc	r31, r1
 7fa:	08 f0       	brcs	.+2      	; 0x7fe <main+0x1c0>
 7fc:	5c c0       	rjmp	.+184    	; 0x8b6 <__stack+0x57>
 7fe:	e8 5a       	subi	r30, 0xA8	; 168
 800:	ff 4f       	sbci	r31, 0xFF	; 255
 802:	0c 94 e1 04 	jmp	0x9c2	; 0x9c2 <__tablejump2__>
			{
			case '0':
				LCD_SEND_CHAR_FUNC(press_key);
 806:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 80a:	63 2d       	mov	r22, r3
 80c:	ce 01       	movw	r24, r28
 80e:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 812:	21 96       	adiw	r28, 0x01	; 1
				break;
 814:	50 c0       	rjmp	.+160    	; 0x8b6 <__stack+0x57>
			/////////////////////////////////////////////
			case '1':
				LCD_SEND_CHAR_FUNC(press_key);
 816:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 81a:	63 2d       	mov	r22, r3
 81c:	ce 01       	movw	r24, r28
 81e:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 822:	21 96       	adiw	r28, 0x01	; 1
				break;
 824:	48 c0       	rjmp	.+144    	; 0x8b6 <__stack+0x57>
			/////////////////////////////////////////////
			case '2':
				LCD_SEND_CHAR_FUNC(press_key);
 826:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 82a:	63 2d       	mov	r22, r3
 82c:	ce 01       	movw	r24, r28
 82e:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 832:	21 96       	adiw	r28, 0x01	; 1
				break;
 834:	40 c0       	rjmp	.+128    	; 0x8b6 <__stack+0x57>
			/////////////////////////////////////////////
			case '3':
				LCD_SEND_CHAR_FUNC(press_key);
 836:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 83a:	63 2d       	mov	r22, r3
 83c:	ce 01       	movw	r24, r28
 83e:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 842:	21 96       	adiw	r28, 0x01	; 1
				break;
 844:	38 c0       	rjmp	.+112    	; 0x8b6 <__stack+0x57>
			/////////////////////////////////////////////
			case '4':
				LCD_SEND_CHAR_FUNC(press_key);
 846:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 84a:	63 2d       	mov	r22, r3
 84c:	ce 01       	movw	r24, r28
 84e:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 852:	21 96       	adiw	r28, 0x01	; 1
				break;
 854:	30 c0       	rjmp	.+96     	; 0x8b6 <__stack+0x57>
			/////////////////////////////////////////////
			case '5':
				LCD_SEND_CHAR_FUNC(press_key);
 856:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 85a:	63 2d       	mov	r22, r3
 85c:	ce 01       	movw	r24, r28
 85e:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 862:	21 96       	adiw	r28, 0x01	; 1
				break;
 864:	28 c0       	rjmp	.+80     	; 0x8b6 <__stack+0x57>
			/////////////////////////////////////////////
			case '6':
				LCD_SEND_CHAR_FUNC(press_key);
 866:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 86a:	63 2d       	mov	r22, r3
 86c:	ce 01       	movw	r24, r28
 86e:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 872:	21 96       	adiw	r28, 0x01	; 1
				break;
 874:	20 c0       	rjmp	.+64     	; 0x8b6 <__stack+0x57>
			/////////////////////////////////////////////
			case '7':
				LCD_SEND_CHAR_FUNC(press_key);
 876:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 87a:	63 2d       	mov	r22, r3
 87c:	ce 01       	movw	r24, r28
 87e:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 882:	21 96       	adiw	r28, 0x01	; 1
				break;
 884:	18 c0       	rjmp	.+48     	; 0x8b6 <__stack+0x57>
			/////////////////////////////////////////////
			case '8':
				LCD_SEND_CHAR_FUNC(press_key);
 886:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 88a:	63 2d       	mov	r22, r3
 88c:	ce 01       	movw	r24, r28
 88e:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 892:	21 96       	adiw	r28, 0x01	; 1
				break;
 894:	10 c0       	rjmp	.+32     	; 0x8b6 <__stack+0x57>
			/////////////////////////////////////////////
			case '9':
				LCD_SEND_CHAR_FUNC(press_key);
 896:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				modify_number(number_counter, press_key);
 89a:	63 2d       	mov	r22, r3
 89c:	ce 01       	movw	r24, r28
 89e:	0e 94 28 02 	call	0x450	; 0x450 <modify_number>
				number_counter++;
 8a2:	21 96       	adiw	r28, 0x01	; 1
				break;
 8a4:	08 c0       	rjmp	.+16     	; 0x8b6 <__stack+0x57>
			case '=':
				LCD_SEND_CHAR_FUNC(press_key);
 8a6:	0e 94 b6 01 	call	0x36c	; 0x36c <LCD_SEND_CHAR_FUNC>
				flag_2 = 0;
				LCD_SET_CURSOR_FUNC(1, 0);
 8aa:	60 e0       	ldi	r22, 0x00	; 0
 8ac:	81 e0       	ldi	r24, 0x01	; 1
 8ae:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_SET_CURSOR_FUNC>
				modify_number(number_counter, press_key);
				number_counter++;
				break;
			case '=':
				LCD_SEND_CHAR_FUNC(press_key);
				flag_2 = 0;
 8b2:	00 e0       	ldi	r16, 0x00	; 0
 8b4:	10 e0       	ldi	r17, 0x00	; 0
			}
		}
		first_number = temp_0 + temp_1 + temp_2 + temp_3 + temp_4;
		temp_0 = 0; temp_1 = 0; temp_2 = 0; temp_3 = 0; temp_4 = 0;
		number_counter = 0;
		while (flag_2)
 8b6:	01 15       	cp	r16, r1
 8b8:	11 05       	cpc	r17, r1
 8ba:	09 f0       	breq	.+2      	; 0x8be <__stack+0x5f>
 8bc:	96 cf       	rjmp	.-212    	; 0x7ea <main+0x1ac>
				flag_2 = 0;
				LCD_SET_CURSOR_FUNC(1, 0);
				break;
			}
		}
		second_number = temp_0 + temp_1 + temp_2 + temp_3 + temp_4;
 8be:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <temp_0>
 8c2:	30 91 6d 00 	lds	r19, 0x006D	; 0x80006d <temp_0+0x1>
 8c6:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <temp_1>
 8ca:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <temp_1+0x1>
 8ce:	82 0f       	add	r24, r18
 8d0:	93 1f       	adc	r25, r19
 8d2:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <temp_2>
 8d6:	30 91 69 00 	lds	r19, 0x0069	; 0x800069 <temp_2+0x1>
 8da:	82 0f       	add	r24, r18
 8dc:	93 1f       	adc	r25, r19
 8de:	20 91 66 00 	lds	r18, 0x0066	; 0x800066 <temp_3>
 8e2:	30 91 67 00 	lds	r19, 0x0067	; 0x800067 <temp_3+0x1>
 8e6:	82 0f       	add	r24, r18
 8e8:	93 1f       	adc	r25, r19
 8ea:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__data_end>
 8ee:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__data_end+0x1>
 8f2:	68 0f       	add	r22, r24
 8f4:	79 1f       	adc	r23, r25
		if (sum)
 8f6:	c1 14       	cp	r12, r1
 8f8:	d1 04       	cpc	r13, r1
 8fa:	31 f0       	breq	.+12     	; 0x908 <__stack+0xa9>
		{
			res = second_number + first_number;
			LCD_DISPLAY_NUMBER_FUNC(res);
 8fc:	c7 01       	movw	r24, r14
 8fe:	86 0f       	add	r24, r22
 900:	97 1f       	adc	r25, r23
 902:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_DISPLAY_NUMBER_FUNC>
 906:	28 c0       	rjmp	.+80     	; 0x958 <__stack+0xf9>
		}
		else if (sub)
 908:	a1 14       	cp	r10, r1
 90a:	b1 04       	cpc	r11, r1
 90c:	31 f0       	breq	.+12     	; 0x91a <__stack+0xbb>
		{
			res = first_number - second_number;
			LCD_DISPLAY_NUMBER_FUNC(res);
 90e:	c7 01       	movw	r24, r14
 910:	86 1b       	sub	r24, r22
 912:	97 0b       	sbc	r25, r23
 914:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_DISPLAY_NUMBER_FUNC>
 918:	1f c0       	rjmp	.+62     	; 0x958 <__stack+0xf9>
		}
		else if (multi)
 91a:	81 14       	cp	r8, r1
 91c:	91 04       	cpc	r9, r1
 91e:	51 f0       	breq	.+20     	; 0x934 <__stack+0xd5>
		{
			res = second_number * first_number;
			LCD_DISPLAY_NUMBER_FUNC(res);
 920:	e6 9e       	mul	r14, r22
 922:	c0 01       	movw	r24, r0
 924:	e7 9e       	mul	r14, r23
 926:	90 0d       	add	r25, r0
 928:	f6 9e       	mul	r15, r22
 92a:	90 0d       	add	r25, r0
 92c:	11 24       	eor	r1, r1
 92e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_DISPLAY_NUMBER_FUNC>
 932:	12 c0       	rjmp	.+36     	; 0x958 <__stack+0xf9>
		}
		else if (mod)
 934:	61 14       	cp	r6, r1
 936:	71 04       	cpc	r7, r1
 938:	31 f0       	breq	.+12     	; 0x946 <__stack+0xe7>
		{
			res = first_number % second_number;
 93a:	c7 01       	movw	r24, r14
 93c:	0e 94 cd 04 	call	0x99a	; 0x99a <__divmodhi4>
			LCD_DISPLAY_NUMBER_FUNC(res);
 940:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_DISPLAY_NUMBER_FUNC>
 944:	09 c0       	rjmp	.+18     	; 0x958 <__stack+0xf9>
		}
		else if (div)
 946:	41 14       	cp	r4, r1
 948:	51 04       	cpc	r5, r1
 94a:	31 f0       	breq	.+12     	; 0x958 <__stack+0xf9>
		{
			res = first_number / second_number;
 94c:	c7 01       	movw	r24, r14
 94e:	0e 94 cd 04 	call	0x99a	; 0x99a <__divmodhi4>
 952:	cb 01       	movw	r24, r22
			LCD_DISPLAY_NUMBER_FUNC(res);
 954:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <LCD_DISPLAY_NUMBER_FUNC>
		}
		while (KPAD_GET_CHAR() != '!')
 958:	0e 94 8c 00 	call	0x118	; 0x118 <KPAD_GET_CHAR>
 95c:	81 32       	cpi	r24, 0x21	; 33
 95e:	e1 f7       	brne	.-8      	; 0x958 <__stack+0xf9>
			;
		LCD_CLEAR_SCREEN_FUNC();
 960:	0e 94 8c 01 	call	0x318	; 0x318 <LCD_CLEAR_SCREEN_FUNC>
		LCD_SET_CURSOR_FUNC(0, 0);
 964:	60 e0       	ldi	r22, 0x00	; 0
 966:	80 e0       	ldi	r24, 0x00	; 0
 968:	0e 94 c0 01 	call	0x380	; 0x380 <LCD_SET_CURSOR_FUNC>
		flag_2 = 1;
		flag_1 = 1;
		temp_0 = 0; temp_1 = 0; temp_2 = 0; temp_3 = 0; temp_4 = 0;
 96c:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <temp_0+0x1>
 970:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <temp_0>
 974:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <temp_1+0x1>
 978:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <temp_1>
 97c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <temp_2+0x1>
 980:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <temp_2>
 984:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <temp_3+0x1>
 988:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <temp_3>
 98c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__data_end+0x1>
 990:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
		while (KPAD_GET_CHAR() != '!')
			;
		LCD_CLEAR_SCREEN_FUNC();
		LCD_SET_CURSOR_FUNC(0, 0);
		flag_2 = 1;
		flag_1 = 1;
 994:	01 e0       	ldi	r16, 0x01	; 1
 996:	10 e0       	ldi	r17, 0x00	; 0
		temp_0 = 0; temp_1 = 0; temp_2 = 0; temp_3 = 0; temp_4 = 0;
		first_number = 0;
		second_number = 0;
	}
 998:	ef ce       	rjmp	.-546    	; 0x778 <main+0x13a>

0000099a <__divmodhi4>:
 99a:	97 fb       	bst	r25, 7
 99c:	07 2e       	mov	r0, r23
 99e:	16 f4       	brtc	.+4      	; 0x9a4 <__divmodhi4+0xa>
 9a0:	00 94       	com	r0
 9a2:	07 d0       	rcall	.+14     	; 0x9b2 <__divmodhi4_neg1>
 9a4:	77 fd       	sbrc	r23, 7
 9a6:	09 d0       	rcall	.+18     	; 0x9ba <__divmodhi4_neg2>
 9a8:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__udivmodhi4>
 9ac:	07 fc       	sbrc	r0, 7
 9ae:	05 d0       	rcall	.+10     	; 0x9ba <__divmodhi4_neg2>
 9b0:	3e f4       	brtc	.+14     	; 0x9c0 <__divmodhi4_exit>

000009b2 <__divmodhi4_neg1>:
 9b2:	90 95       	com	r25
 9b4:	81 95       	neg	r24
 9b6:	9f 4f       	sbci	r25, 0xFF	; 255
 9b8:	08 95       	ret

000009ba <__divmodhi4_neg2>:
 9ba:	70 95       	com	r23
 9bc:	61 95       	neg	r22
 9be:	7f 4f       	sbci	r23, 0xFF	; 255

000009c0 <__divmodhi4_exit>:
 9c0:	08 95       	ret

000009c2 <__tablejump2__>:
 9c2:	ee 0f       	add	r30, r30
 9c4:	ff 1f       	adc	r31, r31
 9c6:	05 90       	lpm	r0, Z+
 9c8:	f4 91       	lpm	r31, Z
 9ca:	e0 2d       	mov	r30, r0
 9cc:	09 94       	ijmp

000009ce <__udivmodhi4>:
 9ce:	aa 1b       	sub	r26, r26
 9d0:	bb 1b       	sub	r27, r27
 9d2:	51 e1       	ldi	r21, 0x11	; 17
 9d4:	07 c0       	rjmp	.+14     	; 0x9e4 <__udivmodhi4_ep>

000009d6 <__udivmodhi4_loop>:
 9d6:	aa 1f       	adc	r26, r26
 9d8:	bb 1f       	adc	r27, r27
 9da:	a6 17       	cp	r26, r22
 9dc:	b7 07       	cpc	r27, r23
 9de:	10 f0       	brcs	.+4      	; 0x9e4 <__udivmodhi4_ep>
 9e0:	a6 1b       	sub	r26, r22
 9e2:	b7 0b       	sbc	r27, r23

000009e4 <__udivmodhi4_ep>:
 9e4:	88 1f       	adc	r24, r24
 9e6:	99 1f       	adc	r25, r25
 9e8:	5a 95       	dec	r21
 9ea:	a9 f7       	brne	.-22     	; 0x9d6 <__udivmodhi4_loop>
 9ec:	80 95       	com	r24
 9ee:	90 95       	com	r25
 9f0:	bc 01       	movw	r22, r24
 9f2:	cd 01       	movw	r24, r26
 9f4:	08 95       	ret

000009f6 <sprintf>:
 9f6:	ae e0       	ldi	r26, 0x0E	; 14
 9f8:	b0 e0       	ldi	r27, 0x00	; 0
 9fa:	e1 e0       	ldi	r30, 0x01	; 1
 9fc:	f5 e0       	ldi	r31, 0x05	; 5
 9fe:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__prologue_saves__+0x1c>
 a02:	0d 89       	ldd	r16, Y+21	; 0x15
 a04:	1e 89       	ldd	r17, Y+22	; 0x16
 a06:	86 e0       	ldi	r24, 0x06	; 6
 a08:	8c 83       	std	Y+4, r24	; 0x04
 a0a:	1a 83       	std	Y+2, r17	; 0x02
 a0c:	09 83       	std	Y+1, r16	; 0x01
 a0e:	8f ef       	ldi	r24, 0xFF	; 255
 a10:	9f e7       	ldi	r25, 0x7F	; 127
 a12:	9e 83       	std	Y+6, r25	; 0x06
 a14:	8d 83       	std	Y+5, r24	; 0x05
 a16:	ae 01       	movw	r20, r28
 a18:	47 5e       	subi	r20, 0xE7	; 231
 a1a:	5f 4f       	sbci	r21, 0xFF	; 255
 a1c:	6f 89       	ldd	r22, Y+23	; 0x17
 a1e:	78 8d       	ldd	r23, Y+24	; 0x18
 a20:	ce 01       	movw	r24, r28
 a22:	01 96       	adiw	r24, 0x01	; 1
 a24:	0e 94 1d 05 	call	0xa3a	; 0xa3a <vfprintf>
 a28:	ef 81       	ldd	r30, Y+7	; 0x07
 a2a:	f8 85       	ldd	r31, Y+8	; 0x08
 a2c:	e0 0f       	add	r30, r16
 a2e:	f1 1f       	adc	r31, r17
 a30:	10 82       	st	Z, r1
 a32:	2e 96       	adiw	r28, 0x0e	; 14
 a34:	e4 e0       	ldi	r30, 0x04	; 4
 a36:	0c 94 d8 07 	jmp	0xfb0	; 0xfb0 <__epilogue_restores__+0x1c>

00000a3a <vfprintf>:
 a3a:	ab e0       	ldi	r26, 0x0B	; 11
 a3c:	b0 e0       	ldi	r27, 0x00	; 0
 a3e:	e3 e2       	ldi	r30, 0x23	; 35
 a40:	f5 e0       	ldi	r31, 0x05	; 5
 a42:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__prologue_saves__>
 a46:	6c 01       	movw	r12, r24
 a48:	7b 01       	movw	r14, r22
 a4a:	8a 01       	movw	r16, r20
 a4c:	fc 01       	movw	r30, r24
 a4e:	17 82       	std	Z+7, r1	; 0x07
 a50:	16 82       	std	Z+6, r1	; 0x06
 a52:	83 81       	ldd	r24, Z+3	; 0x03
 a54:	81 ff       	sbrs	r24, 1
 a56:	cc c1       	rjmp	.+920    	; 0xdf0 <vfprintf+0x3b6>
 a58:	ce 01       	movw	r24, r28
 a5a:	01 96       	adiw	r24, 0x01	; 1
 a5c:	3c 01       	movw	r6, r24
 a5e:	f6 01       	movw	r30, r12
 a60:	93 81       	ldd	r25, Z+3	; 0x03
 a62:	f7 01       	movw	r30, r14
 a64:	93 fd       	sbrc	r25, 3
 a66:	85 91       	lpm	r24, Z+
 a68:	93 ff       	sbrs	r25, 3
 a6a:	81 91       	ld	r24, Z+
 a6c:	7f 01       	movw	r14, r30
 a6e:	88 23       	and	r24, r24
 a70:	09 f4       	brne	.+2      	; 0xa74 <vfprintf+0x3a>
 a72:	ba c1       	rjmp	.+884    	; 0xde8 <vfprintf+0x3ae>
 a74:	85 32       	cpi	r24, 0x25	; 37
 a76:	39 f4       	brne	.+14     	; 0xa86 <vfprintf+0x4c>
 a78:	93 fd       	sbrc	r25, 3
 a7a:	85 91       	lpm	r24, Z+
 a7c:	93 ff       	sbrs	r25, 3
 a7e:	81 91       	ld	r24, Z+
 a80:	7f 01       	movw	r14, r30
 a82:	85 32       	cpi	r24, 0x25	; 37
 a84:	29 f4       	brne	.+10     	; 0xa90 <vfprintf+0x56>
 a86:	b6 01       	movw	r22, r12
 a88:	90 e0       	ldi	r25, 0x00	; 0
 a8a:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 a8e:	e7 cf       	rjmp	.-50     	; 0xa5e <vfprintf+0x24>
 a90:	91 2c       	mov	r9, r1
 a92:	21 2c       	mov	r2, r1
 a94:	31 2c       	mov	r3, r1
 a96:	ff e1       	ldi	r31, 0x1F	; 31
 a98:	f3 15       	cp	r31, r3
 a9a:	d8 f0       	brcs	.+54     	; 0xad2 <vfprintf+0x98>
 a9c:	8b 32       	cpi	r24, 0x2B	; 43
 a9e:	79 f0       	breq	.+30     	; 0xabe <vfprintf+0x84>
 aa0:	38 f4       	brcc	.+14     	; 0xab0 <vfprintf+0x76>
 aa2:	80 32       	cpi	r24, 0x20	; 32
 aa4:	79 f0       	breq	.+30     	; 0xac4 <vfprintf+0x8a>
 aa6:	83 32       	cpi	r24, 0x23	; 35
 aa8:	a1 f4       	brne	.+40     	; 0xad2 <vfprintf+0x98>
 aaa:	23 2d       	mov	r18, r3
 aac:	20 61       	ori	r18, 0x10	; 16
 aae:	1d c0       	rjmp	.+58     	; 0xaea <vfprintf+0xb0>
 ab0:	8d 32       	cpi	r24, 0x2D	; 45
 ab2:	61 f0       	breq	.+24     	; 0xacc <vfprintf+0x92>
 ab4:	80 33       	cpi	r24, 0x30	; 48
 ab6:	69 f4       	brne	.+26     	; 0xad2 <vfprintf+0x98>
 ab8:	23 2d       	mov	r18, r3
 aba:	21 60       	ori	r18, 0x01	; 1
 abc:	16 c0       	rjmp	.+44     	; 0xaea <vfprintf+0xb0>
 abe:	83 2d       	mov	r24, r3
 ac0:	82 60       	ori	r24, 0x02	; 2
 ac2:	38 2e       	mov	r3, r24
 ac4:	e3 2d       	mov	r30, r3
 ac6:	e4 60       	ori	r30, 0x04	; 4
 ac8:	3e 2e       	mov	r3, r30
 aca:	2a c0       	rjmp	.+84     	; 0xb20 <vfprintf+0xe6>
 acc:	f3 2d       	mov	r31, r3
 ace:	f8 60       	ori	r31, 0x08	; 8
 ad0:	1d c0       	rjmp	.+58     	; 0xb0c <vfprintf+0xd2>
 ad2:	37 fc       	sbrc	r3, 7
 ad4:	2d c0       	rjmp	.+90     	; 0xb30 <vfprintf+0xf6>
 ad6:	20 ed       	ldi	r18, 0xD0	; 208
 ad8:	28 0f       	add	r18, r24
 ada:	2a 30       	cpi	r18, 0x0A	; 10
 adc:	40 f0       	brcs	.+16     	; 0xaee <vfprintf+0xb4>
 ade:	8e 32       	cpi	r24, 0x2E	; 46
 ae0:	b9 f4       	brne	.+46     	; 0xb10 <vfprintf+0xd6>
 ae2:	36 fc       	sbrc	r3, 6
 ae4:	81 c1       	rjmp	.+770    	; 0xde8 <vfprintf+0x3ae>
 ae6:	23 2d       	mov	r18, r3
 ae8:	20 64       	ori	r18, 0x40	; 64
 aea:	32 2e       	mov	r3, r18
 aec:	19 c0       	rjmp	.+50     	; 0xb20 <vfprintf+0xe6>
 aee:	36 fe       	sbrs	r3, 6
 af0:	06 c0       	rjmp	.+12     	; 0xafe <vfprintf+0xc4>
 af2:	8a e0       	ldi	r24, 0x0A	; 10
 af4:	98 9e       	mul	r9, r24
 af6:	20 0d       	add	r18, r0
 af8:	11 24       	eor	r1, r1
 afa:	92 2e       	mov	r9, r18
 afc:	11 c0       	rjmp	.+34     	; 0xb20 <vfprintf+0xe6>
 afe:	ea e0       	ldi	r30, 0x0A	; 10
 b00:	2e 9e       	mul	r2, r30
 b02:	20 0d       	add	r18, r0
 b04:	11 24       	eor	r1, r1
 b06:	22 2e       	mov	r2, r18
 b08:	f3 2d       	mov	r31, r3
 b0a:	f0 62       	ori	r31, 0x20	; 32
 b0c:	3f 2e       	mov	r3, r31
 b0e:	08 c0       	rjmp	.+16     	; 0xb20 <vfprintf+0xe6>
 b10:	8c 36       	cpi	r24, 0x6C	; 108
 b12:	21 f4       	brne	.+8      	; 0xb1c <vfprintf+0xe2>
 b14:	83 2d       	mov	r24, r3
 b16:	80 68       	ori	r24, 0x80	; 128
 b18:	38 2e       	mov	r3, r24
 b1a:	02 c0       	rjmp	.+4      	; 0xb20 <vfprintf+0xe6>
 b1c:	88 36       	cpi	r24, 0x68	; 104
 b1e:	41 f4       	brne	.+16     	; 0xb30 <vfprintf+0xf6>
 b20:	f7 01       	movw	r30, r14
 b22:	93 fd       	sbrc	r25, 3
 b24:	85 91       	lpm	r24, Z+
 b26:	93 ff       	sbrs	r25, 3
 b28:	81 91       	ld	r24, Z+
 b2a:	7f 01       	movw	r14, r30
 b2c:	81 11       	cpse	r24, r1
 b2e:	b3 cf       	rjmp	.-154    	; 0xa96 <vfprintf+0x5c>
 b30:	98 2f       	mov	r25, r24
 b32:	9f 7d       	andi	r25, 0xDF	; 223
 b34:	95 54       	subi	r25, 0x45	; 69
 b36:	93 30       	cpi	r25, 0x03	; 3
 b38:	28 f4       	brcc	.+10     	; 0xb44 <vfprintf+0x10a>
 b3a:	0c 5f       	subi	r16, 0xFC	; 252
 b3c:	1f 4f       	sbci	r17, 0xFF	; 255
 b3e:	9f e3       	ldi	r25, 0x3F	; 63
 b40:	99 83       	std	Y+1, r25	; 0x01
 b42:	0d c0       	rjmp	.+26     	; 0xb5e <vfprintf+0x124>
 b44:	83 36       	cpi	r24, 0x63	; 99
 b46:	31 f0       	breq	.+12     	; 0xb54 <vfprintf+0x11a>
 b48:	83 37       	cpi	r24, 0x73	; 115
 b4a:	71 f0       	breq	.+28     	; 0xb68 <vfprintf+0x12e>
 b4c:	83 35       	cpi	r24, 0x53	; 83
 b4e:	09 f0       	breq	.+2      	; 0xb52 <vfprintf+0x118>
 b50:	59 c0       	rjmp	.+178    	; 0xc04 <vfprintf+0x1ca>
 b52:	21 c0       	rjmp	.+66     	; 0xb96 <vfprintf+0x15c>
 b54:	f8 01       	movw	r30, r16
 b56:	80 81       	ld	r24, Z
 b58:	89 83       	std	Y+1, r24	; 0x01
 b5a:	0e 5f       	subi	r16, 0xFE	; 254
 b5c:	1f 4f       	sbci	r17, 0xFF	; 255
 b5e:	88 24       	eor	r8, r8
 b60:	83 94       	inc	r8
 b62:	91 2c       	mov	r9, r1
 b64:	53 01       	movw	r10, r6
 b66:	13 c0       	rjmp	.+38     	; 0xb8e <vfprintf+0x154>
 b68:	28 01       	movw	r4, r16
 b6a:	f2 e0       	ldi	r31, 0x02	; 2
 b6c:	4f 0e       	add	r4, r31
 b6e:	51 1c       	adc	r5, r1
 b70:	f8 01       	movw	r30, r16
 b72:	a0 80       	ld	r10, Z
 b74:	b1 80       	ldd	r11, Z+1	; 0x01
 b76:	36 fe       	sbrs	r3, 6
 b78:	03 c0       	rjmp	.+6      	; 0xb80 <vfprintf+0x146>
 b7a:	69 2d       	mov	r22, r9
 b7c:	70 e0       	ldi	r23, 0x00	; 0
 b7e:	02 c0       	rjmp	.+4      	; 0xb84 <vfprintf+0x14a>
 b80:	6f ef       	ldi	r22, 0xFF	; 255
 b82:	7f ef       	ldi	r23, 0xFF	; 255
 b84:	c5 01       	movw	r24, r10
 b86:	0e 94 09 07 	call	0xe12	; 0xe12 <strnlen>
 b8a:	4c 01       	movw	r8, r24
 b8c:	82 01       	movw	r16, r4
 b8e:	f3 2d       	mov	r31, r3
 b90:	ff 77       	andi	r31, 0x7F	; 127
 b92:	3f 2e       	mov	r3, r31
 b94:	16 c0       	rjmp	.+44     	; 0xbc2 <vfprintf+0x188>
 b96:	28 01       	movw	r4, r16
 b98:	22 e0       	ldi	r18, 0x02	; 2
 b9a:	42 0e       	add	r4, r18
 b9c:	51 1c       	adc	r5, r1
 b9e:	f8 01       	movw	r30, r16
 ba0:	a0 80       	ld	r10, Z
 ba2:	b1 80       	ldd	r11, Z+1	; 0x01
 ba4:	36 fe       	sbrs	r3, 6
 ba6:	03 c0       	rjmp	.+6      	; 0xbae <vfprintf+0x174>
 ba8:	69 2d       	mov	r22, r9
 baa:	70 e0       	ldi	r23, 0x00	; 0
 bac:	02 c0       	rjmp	.+4      	; 0xbb2 <vfprintf+0x178>
 bae:	6f ef       	ldi	r22, 0xFF	; 255
 bb0:	7f ef       	ldi	r23, 0xFF	; 255
 bb2:	c5 01       	movw	r24, r10
 bb4:	0e 94 fe 06 	call	0xdfc	; 0xdfc <strnlen_P>
 bb8:	4c 01       	movw	r8, r24
 bba:	f3 2d       	mov	r31, r3
 bbc:	f0 68       	ori	r31, 0x80	; 128
 bbe:	3f 2e       	mov	r3, r31
 bc0:	82 01       	movw	r16, r4
 bc2:	33 fc       	sbrc	r3, 3
 bc4:	1b c0       	rjmp	.+54     	; 0xbfc <vfprintf+0x1c2>
 bc6:	82 2d       	mov	r24, r2
 bc8:	90 e0       	ldi	r25, 0x00	; 0
 bca:	88 16       	cp	r8, r24
 bcc:	99 06       	cpc	r9, r25
 bce:	b0 f4       	brcc	.+44     	; 0xbfc <vfprintf+0x1c2>
 bd0:	b6 01       	movw	r22, r12
 bd2:	80 e2       	ldi	r24, 0x20	; 32
 bd4:	90 e0       	ldi	r25, 0x00	; 0
 bd6:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 bda:	2a 94       	dec	r2
 bdc:	f4 cf       	rjmp	.-24     	; 0xbc6 <vfprintf+0x18c>
 bde:	f5 01       	movw	r30, r10
 be0:	37 fc       	sbrc	r3, 7
 be2:	85 91       	lpm	r24, Z+
 be4:	37 fe       	sbrs	r3, 7
 be6:	81 91       	ld	r24, Z+
 be8:	5f 01       	movw	r10, r30
 bea:	b6 01       	movw	r22, r12
 bec:	90 e0       	ldi	r25, 0x00	; 0
 bee:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 bf2:	21 10       	cpse	r2, r1
 bf4:	2a 94       	dec	r2
 bf6:	21 e0       	ldi	r18, 0x01	; 1
 bf8:	82 1a       	sub	r8, r18
 bfa:	91 08       	sbc	r9, r1
 bfc:	81 14       	cp	r8, r1
 bfe:	91 04       	cpc	r9, r1
 c00:	71 f7       	brne	.-36     	; 0xbde <vfprintf+0x1a4>
 c02:	e8 c0       	rjmp	.+464    	; 0xdd4 <vfprintf+0x39a>
 c04:	84 36       	cpi	r24, 0x64	; 100
 c06:	11 f0       	breq	.+4      	; 0xc0c <vfprintf+0x1d2>
 c08:	89 36       	cpi	r24, 0x69	; 105
 c0a:	41 f5       	brne	.+80     	; 0xc5c <vfprintf+0x222>
 c0c:	f8 01       	movw	r30, r16
 c0e:	37 fe       	sbrs	r3, 7
 c10:	07 c0       	rjmp	.+14     	; 0xc20 <vfprintf+0x1e6>
 c12:	60 81       	ld	r22, Z
 c14:	71 81       	ldd	r23, Z+1	; 0x01
 c16:	82 81       	ldd	r24, Z+2	; 0x02
 c18:	93 81       	ldd	r25, Z+3	; 0x03
 c1a:	0c 5f       	subi	r16, 0xFC	; 252
 c1c:	1f 4f       	sbci	r17, 0xFF	; 255
 c1e:	08 c0       	rjmp	.+16     	; 0xc30 <vfprintf+0x1f6>
 c20:	60 81       	ld	r22, Z
 c22:	71 81       	ldd	r23, Z+1	; 0x01
 c24:	07 2e       	mov	r0, r23
 c26:	00 0c       	add	r0, r0
 c28:	88 0b       	sbc	r24, r24
 c2a:	99 0b       	sbc	r25, r25
 c2c:	0e 5f       	subi	r16, 0xFE	; 254
 c2e:	1f 4f       	sbci	r17, 0xFF	; 255
 c30:	f3 2d       	mov	r31, r3
 c32:	ff 76       	andi	r31, 0x6F	; 111
 c34:	3f 2e       	mov	r3, r31
 c36:	97 ff       	sbrs	r25, 7
 c38:	09 c0       	rjmp	.+18     	; 0xc4c <vfprintf+0x212>
 c3a:	90 95       	com	r25
 c3c:	80 95       	com	r24
 c3e:	70 95       	com	r23
 c40:	61 95       	neg	r22
 c42:	7f 4f       	sbci	r23, 0xFF	; 255
 c44:	8f 4f       	sbci	r24, 0xFF	; 255
 c46:	9f 4f       	sbci	r25, 0xFF	; 255
 c48:	f0 68       	ori	r31, 0x80	; 128
 c4a:	3f 2e       	mov	r3, r31
 c4c:	2a e0       	ldi	r18, 0x0A	; 10
 c4e:	30 e0       	ldi	r19, 0x00	; 0
 c50:	a3 01       	movw	r20, r6
 c52:	0e 94 50 07 	call	0xea0	; 0xea0 <__ultoa_invert>
 c56:	88 2e       	mov	r8, r24
 c58:	86 18       	sub	r8, r6
 c5a:	45 c0       	rjmp	.+138    	; 0xce6 <vfprintf+0x2ac>
 c5c:	85 37       	cpi	r24, 0x75	; 117
 c5e:	31 f4       	brne	.+12     	; 0xc6c <vfprintf+0x232>
 c60:	23 2d       	mov	r18, r3
 c62:	2f 7e       	andi	r18, 0xEF	; 239
 c64:	b2 2e       	mov	r11, r18
 c66:	2a e0       	ldi	r18, 0x0A	; 10
 c68:	30 e0       	ldi	r19, 0x00	; 0
 c6a:	25 c0       	rjmp	.+74     	; 0xcb6 <vfprintf+0x27c>
 c6c:	93 2d       	mov	r25, r3
 c6e:	99 7f       	andi	r25, 0xF9	; 249
 c70:	b9 2e       	mov	r11, r25
 c72:	8f 36       	cpi	r24, 0x6F	; 111
 c74:	c1 f0       	breq	.+48     	; 0xca6 <vfprintf+0x26c>
 c76:	18 f4       	brcc	.+6      	; 0xc7e <vfprintf+0x244>
 c78:	88 35       	cpi	r24, 0x58	; 88
 c7a:	79 f0       	breq	.+30     	; 0xc9a <vfprintf+0x260>
 c7c:	b5 c0       	rjmp	.+362    	; 0xde8 <vfprintf+0x3ae>
 c7e:	80 37       	cpi	r24, 0x70	; 112
 c80:	19 f0       	breq	.+6      	; 0xc88 <vfprintf+0x24e>
 c82:	88 37       	cpi	r24, 0x78	; 120
 c84:	21 f0       	breq	.+8      	; 0xc8e <vfprintf+0x254>
 c86:	b0 c0       	rjmp	.+352    	; 0xde8 <vfprintf+0x3ae>
 c88:	e9 2f       	mov	r30, r25
 c8a:	e0 61       	ori	r30, 0x10	; 16
 c8c:	be 2e       	mov	r11, r30
 c8e:	b4 fe       	sbrs	r11, 4
 c90:	0d c0       	rjmp	.+26     	; 0xcac <vfprintf+0x272>
 c92:	fb 2d       	mov	r31, r11
 c94:	f4 60       	ori	r31, 0x04	; 4
 c96:	bf 2e       	mov	r11, r31
 c98:	09 c0       	rjmp	.+18     	; 0xcac <vfprintf+0x272>
 c9a:	34 fe       	sbrs	r3, 4
 c9c:	0a c0       	rjmp	.+20     	; 0xcb2 <vfprintf+0x278>
 c9e:	29 2f       	mov	r18, r25
 ca0:	26 60       	ori	r18, 0x06	; 6
 ca2:	b2 2e       	mov	r11, r18
 ca4:	06 c0       	rjmp	.+12     	; 0xcb2 <vfprintf+0x278>
 ca6:	28 e0       	ldi	r18, 0x08	; 8
 ca8:	30 e0       	ldi	r19, 0x00	; 0
 caa:	05 c0       	rjmp	.+10     	; 0xcb6 <vfprintf+0x27c>
 cac:	20 e1       	ldi	r18, 0x10	; 16
 cae:	30 e0       	ldi	r19, 0x00	; 0
 cb0:	02 c0       	rjmp	.+4      	; 0xcb6 <vfprintf+0x27c>
 cb2:	20 e1       	ldi	r18, 0x10	; 16
 cb4:	32 e0       	ldi	r19, 0x02	; 2
 cb6:	f8 01       	movw	r30, r16
 cb8:	b7 fe       	sbrs	r11, 7
 cba:	07 c0       	rjmp	.+14     	; 0xcca <vfprintf+0x290>
 cbc:	60 81       	ld	r22, Z
 cbe:	71 81       	ldd	r23, Z+1	; 0x01
 cc0:	82 81       	ldd	r24, Z+2	; 0x02
 cc2:	93 81       	ldd	r25, Z+3	; 0x03
 cc4:	0c 5f       	subi	r16, 0xFC	; 252
 cc6:	1f 4f       	sbci	r17, 0xFF	; 255
 cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <vfprintf+0x29c>
 cca:	60 81       	ld	r22, Z
 ccc:	71 81       	ldd	r23, Z+1	; 0x01
 cce:	80 e0       	ldi	r24, 0x00	; 0
 cd0:	90 e0       	ldi	r25, 0x00	; 0
 cd2:	0e 5f       	subi	r16, 0xFE	; 254
 cd4:	1f 4f       	sbci	r17, 0xFF	; 255
 cd6:	a3 01       	movw	r20, r6
 cd8:	0e 94 50 07 	call	0xea0	; 0xea0 <__ultoa_invert>
 cdc:	88 2e       	mov	r8, r24
 cde:	86 18       	sub	r8, r6
 ce0:	fb 2d       	mov	r31, r11
 ce2:	ff 77       	andi	r31, 0x7F	; 127
 ce4:	3f 2e       	mov	r3, r31
 ce6:	36 fe       	sbrs	r3, 6
 ce8:	0d c0       	rjmp	.+26     	; 0xd04 <vfprintf+0x2ca>
 cea:	23 2d       	mov	r18, r3
 cec:	2e 7f       	andi	r18, 0xFE	; 254
 cee:	a2 2e       	mov	r10, r18
 cf0:	89 14       	cp	r8, r9
 cf2:	58 f4       	brcc	.+22     	; 0xd0a <vfprintf+0x2d0>
 cf4:	34 fe       	sbrs	r3, 4
 cf6:	0b c0       	rjmp	.+22     	; 0xd0e <vfprintf+0x2d4>
 cf8:	32 fc       	sbrc	r3, 2
 cfa:	09 c0       	rjmp	.+18     	; 0xd0e <vfprintf+0x2d4>
 cfc:	83 2d       	mov	r24, r3
 cfe:	8e 7e       	andi	r24, 0xEE	; 238
 d00:	a8 2e       	mov	r10, r24
 d02:	05 c0       	rjmp	.+10     	; 0xd0e <vfprintf+0x2d4>
 d04:	b8 2c       	mov	r11, r8
 d06:	a3 2c       	mov	r10, r3
 d08:	03 c0       	rjmp	.+6      	; 0xd10 <vfprintf+0x2d6>
 d0a:	b8 2c       	mov	r11, r8
 d0c:	01 c0       	rjmp	.+2      	; 0xd10 <vfprintf+0x2d6>
 d0e:	b9 2c       	mov	r11, r9
 d10:	a4 fe       	sbrs	r10, 4
 d12:	0f c0       	rjmp	.+30     	; 0xd32 <vfprintf+0x2f8>
 d14:	fe 01       	movw	r30, r28
 d16:	e8 0d       	add	r30, r8
 d18:	f1 1d       	adc	r31, r1
 d1a:	80 81       	ld	r24, Z
 d1c:	80 33       	cpi	r24, 0x30	; 48
 d1e:	21 f4       	brne	.+8      	; 0xd28 <vfprintf+0x2ee>
 d20:	9a 2d       	mov	r25, r10
 d22:	99 7e       	andi	r25, 0xE9	; 233
 d24:	a9 2e       	mov	r10, r25
 d26:	09 c0       	rjmp	.+18     	; 0xd3a <vfprintf+0x300>
 d28:	a2 fe       	sbrs	r10, 2
 d2a:	06 c0       	rjmp	.+12     	; 0xd38 <vfprintf+0x2fe>
 d2c:	b3 94       	inc	r11
 d2e:	b3 94       	inc	r11
 d30:	04 c0       	rjmp	.+8      	; 0xd3a <vfprintf+0x300>
 d32:	8a 2d       	mov	r24, r10
 d34:	86 78       	andi	r24, 0x86	; 134
 d36:	09 f0       	breq	.+2      	; 0xd3a <vfprintf+0x300>
 d38:	b3 94       	inc	r11
 d3a:	a3 fc       	sbrc	r10, 3
 d3c:	11 c0       	rjmp	.+34     	; 0xd60 <vfprintf+0x326>
 d3e:	a0 fe       	sbrs	r10, 0
 d40:	06 c0       	rjmp	.+12     	; 0xd4e <vfprintf+0x314>
 d42:	b2 14       	cp	r11, r2
 d44:	88 f4       	brcc	.+34     	; 0xd68 <vfprintf+0x32e>
 d46:	28 0c       	add	r2, r8
 d48:	92 2c       	mov	r9, r2
 d4a:	9b 18       	sub	r9, r11
 d4c:	0e c0       	rjmp	.+28     	; 0xd6a <vfprintf+0x330>
 d4e:	b2 14       	cp	r11, r2
 d50:	60 f4       	brcc	.+24     	; 0xd6a <vfprintf+0x330>
 d52:	b6 01       	movw	r22, r12
 d54:	80 e2       	ldi	r24, 0x20	; 32
 d56:	90 e0       	ldi	r25, 0x00	; 0
 d58:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 d5c:	b3 94       	inc	r11
 d5e:	f7 cf       	rjmp	.-18     	; 0xd4e <vfprintf+0x314>
 d60:	b2 14       	cp	r11, r2
 d62:	18 f4       	brcc	.+6      	; 0xd6a <vfprintf+0x330>
 d64:	2b 18       	sub	r2, r11
 d66:	02 c0       	rjmp	.+4      	; 0xd6c <vfprintf+0x332>
 d68:	98 2c       	mov	r9, r8
 d6a:	21 2c       	mov	r2, r1
 d6c:	a4 fe       	sbrs	r10, 4
 d6e:	10 c0       	rjmp	.+32     	; 0xd90 <vfprintf+0x356>
 d70:	b6 01       	movw	r22, r12
 d72:	80 e3       	ldi	r24, 0x30	; 48
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 d7a:	a2 fe       	sbrs	r10, 2
 d7c:	17 c0       	rjmp	.+46     	; 0xdac <vfprintf+0x372>
 d7e:	a1 fc       	sbrc	r10, 1
 d80:	03 c0       	rjmp	.+6      	; 0xd88 <vfprintf+0x34e>
 d82:	88 e7       	ldi	r24, 0x78	; 120
 d84:	90 e0       	ldi	r25, 0x00	; 0
 d86:	02 c0       	rjmp	.+4      	; 0xd8c <vfprintf+0x352>
 d88:	88 e5       	ldi	r24, 0x58	; 88
 d8a:	90 e0       	ldi	r25, 0x00	; 0
 d8c:	b6 01       	movw	r22, r12
 d8e:	0c c0       	rjmp	.+24     	; 0xda8 <vfprintf+0x36e>
 d90:	8a 2d       	mov	r24, r10
 d92:	86 78       	andi	r24, 0x86	; 134
 d94:	59 f0       	breq	.+22     	; 0xdac <vfprintf+0x372>
 d96:	a1 fe       	sbrs	r10, 1
 d98:	02 c0       	rjmp	.+4      	; 0xd9e <vfprintf+0x364>
 d9a:	8b e2       	ldi	r24, 0x2B	; 43
 d9c:	01 c0       	rjmp	.+2      	; 0xda0 <vfprintf+0x366>
 d9e:	80 e2       	ldi	r24, 0x20	; 32
 da0:	a7 fc       	sbrc	r10, 7
 da2:	8d e2       	ldi	r24, 0x2D	; 45
 da4:	b6 01       	movw	r22, r12
 da6:	90 e0       	ldi	r25, 0x00	; 0
 da8:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 dac:	89 14       	cp	r8, r9
 dae:	38 f4       	brcc	.+14     	; 0xdbe <vfprintf+0x384>
 db0:	b6 01       	movw	r22, r12
 db2:	80 e3       	ldi	r24, 0x30	; 48
 db4:	90 e0       	ldi	r25, 0x00	; 0
 db6:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 dba:	9a 94       	dec	r9
 dbc:	f7 cf       	rjmp	.-18     	; 0xdac <vfprintf+0x372>
 dbe:	8a 94       	dec	r8
 dc0:	f3 01       	movw	r30, r6
 dc2:	e8 0d       	add	r30, r8
 dc4:	f1 1d       	adc	r31, r1
 dc6:	80 81       	ld	r24, Z
 dc8:	b6 01       	movw	r22, r12
 dca:	90 e0       	ldi	r25, 0x00	; 0
 dcc:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 dd0:	81 10       	cpse	r8, r1
 dd2:	f5 cf       	rjmp	.-22     	; 0xdbe <vfprintf+0x384>
 dd4:	22 20       	and	r2, r2
 dd6:	09 f4       	brne	.+2      	; 0xdda <vfprintf+0x3a0>
 dd8:	42 ce       	rjmp	.-892    	; 0xa5e <vfprintf+0x24>
 dda:	b6 01       	movw	r22, r12
 ddc:	80 e2       	ldi	r24, 0x20	; 32
 dde:	90 e0       	ldi	r25, 0x00	; 0
 de0:	0e 94 14 07 	call	0xe28	; 0xe28 <fputc>
 de4:	2a 94       	dec	r2
 de6:	f6 cf       	rjmp	.-20     	; 0xdd4 <vfprintf+0x39a>
 de8:	f6 01       	movw	r30, r12
 dea:	86 81       	ldd	r24, Z+6	; 0x06
 dec:	97 81       	ldd	r25, Z+7	; 0x07
 dee:	02 c0       	rjmp	.+4      	; 0xdf4 <vfprintf+0x3ba>
 df0:	8f ef       	ldi	r24, 0xFF	; 255
 df2:	9f ef       	ldi	r25, 0xFF	; 255
 df4:	2b 96       	adiw	r28, 0x0b	; 11
 df6:	e2 e1       	ldi	r30, 0x12	; 18
 df8:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__epilogue_restores__>

00000dfc <strnlen_P>:
 dfc:	fc 01       	movw	r30, r24
 dfe:	05 90       	lpm	r0, Z+
 e00:	61 50       	subi	r22, 0x01	; 1
 e02:	70 40       	sbci	r23, 0x00	; 0
 e04:	01 10       	cpse	r0, r1
 e06:	d8 f7       	brcc	.-10     	; 0xdfe <strnlen_P+0x2>
 e08:	80 95       	com	r24
 e0a:	90 95       	com	r25
 e0c:	8e 0f       	add	r24, r30
 e0e:	9f 1f       	adc	r25, r31
 e10:	08 95       	ret

00000e12 <strnlen>:
 e12:	fc 01       	movw	r30, r24
 e14:	61 50       	subi	r22, 0x01	; 1
 e16:	70 40       	sbci	r23, 0x00	; 0
 e18:	01 90       	ld	r0, Z+
 e1a:	01 10       	cpse	r0, r1
 e1c:	d8 f7       	brcc	.-10     	; 0xe14 <strnlen+0x2>
 e1e:	80 95       	com	r24
 e20:	90 95       	com	r25
 e22:	8e 0f       	add	r24, r30
 e24:	9f 1f       	adc	r25, r31
 e26:	08 95       	ret

00000e28 <fputc>:
 e28:	0f 93       	push	r16
 e2a:	1f 93       	push	r17
 e2c:	cf 93       	push	r28
 e2e:	df 93       	push	r29
 e30:	fb 01       	movw	r30, r22
 e32:	23 81       	ldd	r18, Z+3	; 0x03
 e34:	21 fd       	sbrc	r18, 1
 e36:	03 c0       	rjmp	.+6      	; 0xe3e <fputc+0x16>
 e38:	8f ef       	ldi	r24, 0xFF	; 255
 e3a:	9f ef       	ldi	r25, 0xFF	; 255
 e3c:	2c c0       	rjmp	.+88     	; 0xe96 <fputc+0x6e>
 e3e:	22 ff       	sbrs	r18, 2
 e40:	16 c0       	rjmp	.+44     	; 0xe6e <fputc+0x46>
 e42:	46 81       	ldd	r20, Z+6	; 0x06
 e44:	57 81       	ldd	r21, Z+7	; 0x07
 e46:	24 81       	ldd	r18, Z+4	; 0x04
 e48:	35 81       	ldd	r19, Z+5	; 0x05
 e4a:	42 17       	cp	r20, r18
 e4c:	53 07       	cpc	r21, r19
 e4e:	44 f4       	brge	.+16     	; 0xe60 <fputc+0x38>
 e50:	a0 81       	ld	r26, Z
 e52:	b1 81       	ldd	r27, Z+1	; 0x01
 e54:	9d 01       	movw	r18, r26
 e56:	2f 5f       	subi	r18, 0xFF	; 255
 e58:	3f 4f       	sbci	r19, 0xFF	; 255
 e5a:	31 83       	std	Z+1, r19	; 0x01
 e5c:	20 83       	st	Z, r18
 e5e:	8c 93       	st	X, r24
 e60:	26 81       	ldd	r18, Z+6	; 0x06
 e62:	37 81       	ldd	r19, Z+7	; 0x07
 e64:	2f 5f       	subi	r18, 0xFF	; 255
 e66:	3f 4f       	sbci	r19, 0xFF	; 255
 e68:	37 83       	std	Z+7, r19	; 0x07
 e6a:	26 83       	std	Z+6, r18	; 0x06
 e6c:	14 c0       	rjmp	.+40     	; 0xe96 <fputc+0x6e>
 e6e:	8b 01       	movw	r16, r22
 e70:	ec 01       	movw	r28, r24
 e72:	fb 01       	movw	r30, r22
 e74:	00 84       	ldd	r0, Z+8	; 0x08
 e76:	f1 85       	ldd	r31, Z+9	; 0x09
 e78:	e0 2d       	mov	r30, r0
 e7a:	09 95       	icall
 e7c:	89 2b       	or	r24, r25
 e7e:	e1 f6       	brne	.-72     	; 0xe38 <fputc+0x10>
 e80:	d8 01       	movw	r26, r16
 e82:	16 96       	adiw	r26, 0x06	; 6
 e84:	8d 91       	ld	r24, X+
 e86:	9c 91       	ld	r25, X
 e88:	17 97       	sbiw	r26, 0x07	; 7
 e8a:	01 96       	adiw	r24, 0x01	; 1
 e8c:	17 96       	adiw	r26, 0x07	; 7
 e8e:	9c 93       	st	X, r25
 e90:	8e 93       	st	-X, r24
 e92:	16 97       	sbiw	r26, 0x06	; 6
 e94:	ce 01       	movw	r24, r28
 e96:	df 91       	pop	r29
 e98:	cf 91       	pop	r28
 e9a:	1f 91       	pop	r17
 e9c:	0f 91       	pop	r16
 e9e:	08 95       	ret

00000ea0 <__ultoa_invert>:
 ea0:	fa 01       	movw	r30, r20
 ea2:	aa 27       	eor	r26, r26
 ea4:	28 30       	cpi	r18, 0x08	; 8
 ea6:	51 f1       	breq	.+84     	; 0xefc <__ultoa_invert+0x5c>
 ea8:	20 31       	cpi	r18, 0x10	; 16
 eaa:	81 f1       	breq	.+96     	; 0xf0c <__ultoa_invert+0x6c>
 eac:	e8 94       	clt
 eae:	6f 93       	push	r22
 eb0:	6e 7f       	andi	r22, 0xFE	; 254
 eb2:	6e 5f       	subi	r22, 0xFE	; 254
 eb4:	7f 4f       	sbci	r23, 0xFF	; 255
 eb6:	8f 4f       	sbci	r24, 0xFF	; 255
 eb8:	9f 4f       	sbci	r25, 0xFF	; 255
 eba:	af 4f       	sbci	r26, 0xFF	; 255
 ebc:	b1 e0       	ldi	r27, 0x01	; 1
 ebe:	3e d0       	rcall	.+124    	; 0xf3c <__ultoa_invert+0x9c>
 ec0:	b4 e0       	ldi	r27, 0x04	; 4
 ec2:	3c d0       	rcall	.+120    	; 0xf3c <__ultoa_invert+0x9c>
 ec4:	67 0f       	add	r22, r23
 ec6:	78 1f       	adc	r23, r24
 ec8:	89 1f       	adc	r24, r25
 eca:	9a 1f       	adc	r25, r26
 ecc:	a1 1d       	adc	r26, r1
 ece:	68 0f       	add	r22, r24
 ed0:	79 1f       	adc	r23, r25
 ed2:	8a 1f       	adc	r24, r26
 ed4:	91 1d       	adc	r25, r1
 ed6:	a1 1d       	adc	r26, r1
 ed8:	6a 0f       	add	r22, r26
 eda:	71 1d       	adc	r23, r1
 edc:	81 1d       	adc	r24, r1
 ede:	91 1d       	adc	r25, r1
 ee0:	a1 1d       	adc	r26, r1
 ee2:	20 d0       	rcall	.+64     	; 0xf24 <__ultoa_invert+0x84>
 ee4:	09 f4       	brne	.+2      	; 0xee8 <__ultoa_invert+0x48>
 ee6:	68 94       	set
 ee8:	3f 91       	pop	r19
 eea:	2a e0       	ldi	r18, 0x0A	; 10
 eec:	26 9f       	mul	r18, r22
 eee:	11 24       	eor	r1, r1
 ef0:	30 19       	sub	r19, r0
 ef2:	30 5d       	subi	r19, 0xD0	; 208
 ef4:	31 93       	st	Z+, r19
 ef6:	de f6       	brtc	.-74     	; 0xeae <__ultoa_invert+0xe>
 ef8:	cf 01       	movw	r24, r30
 efa:	08 95       	ret
 efc:	46 2f       	mov	r20, r22
 efe:	47 70       	andi	r20, 0x07	; 7
 f00:	40 5d       	subi	r20, 0xD0	; 208
 f02:	41 93       	st	Z+, r20
 f04:	b3 e0       	ldi	r27, 0x03	; 3
 f06:	0f d0       	rcall	.+30     	; 0xf26 <__ultoa_invert+0x86>
 f08:	c9 f7       	brne	.-14     	; 0xefc <__ultoa_invert+0x5c>
 f0a:	f6 cf       	rjmp	.-20     	; 0xef8 <__ultoa_invert+0x58>
 f0c:	46 2f       	mov	r20, r22
 f0e:	4f 70       	andi	r20, 0x0F	; 15
 f10:	40 5d       	subi	r20, 0xD0	; 208
 f12:	4a 33       	cpi	r20, 0x3A	; 58
 f14:	18 f0       	brcs	.+6      	; 0xf1c <__ultoa_invert+0x7c>
 f16:	49 5d       	subi	r20, 0xD9	; 217
 f18:	31 fd       	sbrc	r19, 1
 f1a:	40 52       	subi	r20, 0x20	; 32
 f1c:	41 93       	st	Z+, r20
 f1e:	02 d0       	rcall	.+4      	; 0xf24 <__ultoa_invert+0x84>
 f20:	a9 f7       	brne	.-22     	; 0xf0c <__ultoa_invert+0x6c>
 f22:	ea cf       	rjmp	.-44     	; 0xef8 <__ultoa_invert+0x58>
 f24:	b4 e0       	ldi	r27, 0x04	; 4
 f26:	a6 95       	lsr	r26
 f28:	97 95       	ror	r25
 f2a:	87 95       	ror	r24
 f2c:	77 95       	ror	r23
 f2e:	67 95       	ror	r22
 f30:	ba 95       	dec	r27
 f32:	c9 f7       	brne	.-14     	; 0xf26 <__ultoa_invert+0x86>
 f34:	00 97       	sbiw	r24, 0x00	; 0
 f36:	61 05       	cpc	r22, r1
 f38:	71 05       	cpc	r23, r1
 f3a:	08 95       	ret
 f3c:	9b 01       	movw	r18, r22
 f3e:	ac 01       	movw	r20, r24
 f40:	0a 2e       	mov	r0, r26
 f42:	06 94       	lsr	r0
 f44:	57 95       	ror	r21
 f46:	47 95       	ror	r20
 f48:	37 95       	ror	r19
 f4a:	27 95       	ror	r18
 f4c:	ba 95       	dec	r27
 f4e:	c9 f7       	brne	.-14     	; 0xf42 <__ultoa_invert+0xa2>
 f50:	62 0f       	add	r22, r18
 f52:	73 1f       	adc	r23, r19
 f54:	84 1f       	adc	r24, r20
 f56:	95 1f       	adc	r25, r21
 f58:	a0 1d       	adc	r26, r0
 f5a:	08 95       	ret

00000f5c <__prologue_saves__>:
 f5c:	2f 92       	push	r2
 f5e:	3f 92       	push	r3
 f60:	4f 92       	push	r4
 f62:	5f 92       	push	r5
 f64:	6f 92       	push	r6
 f66:	7f 92       	push	r7
 f68:	8f 92       	push	r8
 f6a:	9f 92       	push	r9
 f6c:	af 92       	push	r10
 f6e:	bf 92       	push	r11
 f70:	cf 92       	push	r12
 f72:	df 92       	push	r13
 f74:	ef 92       	push	r14
 f76:	ff 92       	push	r15
 f78:	0f 93       	push	r16
 f7a:	1f 93       	push	r17
 f7c:	cf 93       	push	r28
 f7e:	df 93       	push	r29
 f80:	cd b7       	in	r28, 0x3d	; 61
 f82:	de b7       	in	r29, 0x3e	; 62
 f84:	ca 1b       	sub	r28, r26
 f86:	db 0b       	sbc	r29, r27
 f88:	0f b6       	in	r0, 0x3f	; 63
 f8a:	f8 94       	cli
 f8c:	de bf       	out	0x3e, r29	; 62
 f8e:	0f be       	out	0x3f, r0	; 63
 f90:	cd bf       	out	0x3d, r28	; 61
 f92:	09 94       	ijmp

00000f94 <__epilogue_restores__>:
 f94:	2a 88       	ldd	r2, Y+18	; 0x12
 f96:	39 88       	ldd	r3, Y+17	; 0x11
 f98:	48 88       	ldd	r4, Y+16	; 0x10
 f9a:	5f 84       	ldd	r5, Y+15	; 0x0f
 f9c:	6e 84       	ldd	r6, Y+14	; 0x0e
 f9e:	7d 84       	ldd	r7, Y+13	; 0x0d
 fa0:	8c 84       	ldd	r8, Y+12	; 0x0c
 fa2:	9b 84       	ldd	r9, Y+11	; 0x0b
 fa4:	aa 84       	ldd	r10, Y+10	; 0x0a
 fa6:	b9 84       	ldd	r11, Y+9	; 0x09
 fa8:	c8 84       	ldd	r12, Y+8	; 0x08
 faa:	df 80       	ldd	r13, Y+7	; 0x07
 fac:	ee 80       	ldd	r14, Y+6	; 0x06
 fae:	fd 80       	ldd	r15, Y+5	; 0x05
 fb0:	0c 81       	ldd	r16, Y+4	; 0x04
 fb2:	1b 81       	ldd	r17, Y+3	; 0x03
 fb4:	aa 81       	ldd	r26, Y+2	; 0x02
 fb6:	b9 81       	ldd	r27, Y+1	; 0x01
 fb8:	ce 0f       	add	r28, r30
 fba:	d1 1d       	adc	r29, r1
 fbc:	0f b6       	in	r0, 0x3f	; 63
 fbe:	f8 94       	cli
 fc0:	de bf       	out	0x3e, r29	; 62
 fc2:	0f be       	out	0x3f, r0	; 63
 fc4:	cd bf       	out	0x3d, r28	; 61
 fc6:	ed 01       	movw	r28, r26
 fc8:	08 95       	ret

00000fca <_exit>:
 fca:	f8 94       	cli

00000fcc <__stop_program>:
 fcc:	ff cf       	rjmp	.-2      	; 0xfcc <__stop_program>

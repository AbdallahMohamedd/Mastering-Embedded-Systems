
LCD_KPAD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000304  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  00000304  00000378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000003ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b6b  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000077f  00000000  00000000  00000fff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000006ad  00000000  00000000  0000177e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000012c  00000000  00000000  00001e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000045c  00000000  00000000  00001f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000037c  00000000  00000000  000023b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e0       	ldi	r30, 0x04	; 4
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <main>
  7a:	0c 94 80 01 	jmp	0x300	; 0x300 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <KPAD_INIT>:

int KPAD_R[] = {R0, R1, R2, R3}; 
int KPAD_C[] = {C0, C1, C2, C3};
void KPAD_INIT()
{
	KPAD_PORT_DIRECTION = 0XF0;
  82:	80 ef       	ldi	r24, 0xF0	; 240
  84:	84 bb       	out	0x14, r24	; 20
	KPAD_PORT_VALUE = 0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	85 bb       	out	0x15, r24	; 21
  8a:	08 95       	ret

0000008c <KPAD_GET_CHAR>:
}


char KPAD_GET_CHAR()
{
	for(int i = 0; i<4; i++)//col
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	70 e0       	ldi	r23, 0x00	; 0
  90:	8b c0       	rjmp	.+278    	; 0x1a8 <KPAD_GET_CHAR+0x11c>
	{
		SET_BIT(KPAD_PORT_VALUE,C0);
  92:	85 b3       	in	r24, 0x15	; 21
  94:	80 61       	ori	r24, 0x10	; 16
  96:	85 bb       	out	0x15, r24	; 21
		SET_BIT(KPAD_PORT_VALUE,C1);
  98:	85 b3       	in	r24, 0x15	; 21
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	85 bb       	out	0x15, r24	; 21
        SET_BIT(KPAD_PORT_VALUE,C2);
  9e:	85 b3       	in	r24, 0x15	; 21
  a0:	80 64       	ori	r24, 0x40	; 64
  a2:	85 bb       	out	0x15, r24	; 21
		SET_BIT(KPAD_PORT_VALUE,C3);
  a4:	85 b3       	in	r24, 0x15	; 21
  a6:	80 68       	ori	r24, 0x80	; 128
  a8:	85 bb       	out	0x15, r24	; 21
		RESET_BIT(KPAD_PORT_VALUE,KPAD_C[i]);
  aa:	25 b3       	in	r18, 0x15	; 21
  ac:	fb 01       	movw	r30, r22
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	e0 5a       	subi	r30, 0xA0	; 160
  b4:	ff 4f       	sbci	r31, 0xFF	; 255
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	00 80       	ld	r0, Z
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <KPAD_GET_CHAR+0x36>
  be:	88 0f       	add	r24, r24
  c0:	99 1f       	adc	r25, r25
  c2:	0a 94       	dec	r0
  c4:	e2 f7       	brpl	.-8      	; 0xbe <KPAD_GET_CHAR+0x32>
  c6:	80 95       	com	r24
  c8:	82 23       	and	r24, r18
  ca:	85 bb       	out	0x15, r24	; 21
		for(int j = 0; j<4; j++)
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	65 c0       	rjmp	.+202    	; 0x19c <KPAD_GET_CHAR+0x110>
		{
			 if(!READ_BIT(KPAD_PORT_PIN, j))
  d2:	83 b3       	in	r24, 0x13	; 19
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	02 2e       	mov	r0, r18
  da:	02 c0       	rjmp	.+4      	; 0xe0 <KPAD_GET_CHAR+0x54>
  dc:	44 0f       	add	r20, r20
  de:	55 1f       	adc	r21, r21
  e0:	0a 94       	dec	r0
  e2:	e2 f7       	brpl	.-8      	; 0xdc <KPAD_GET_CHAR+0x50>
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	84 23       	and	r24, r20
  e8:	95 23       	and	r25, r21
  ea:	02 2e       	mov	r0, r18
  ec:	02 c0       	rjmp	.+4      	; 0xf2 <KPAD_GET_CHAR+0x66>
  ee:	95 95       	asr	r25
  f0:	87 95       	ror	r24
  f2:	0a 94       	dec	r0
  f4:	e2 f7       	brpl	.-8      	; 0xee <KPAD_GET_CHAR+0x62>
  f6:	89 2b       	or	r24, r25
  f8:	09 f0       	breq	.+2      	; 0xfc <KPAD_GET_CHAR+0x70>
  fa:	4e c0       	rjmp	.+156    	; 0x198 <KPAD_GET_CHAR+0x10c>
			 {
				 while(!READ_BIT(KPAD_PORT_PIN, j));
  fc:	83 b3       	in	r24, 0x13	; 19
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	84 23       	and	r24, r20
 102:	95 23       	and	r25, r21
 104:	02 2e       	mov	r0, r18
 106:	02 c0       	rjmp	.+4      	; 0x10c <KPAD_GET_CHAR+0x80>
 108:	95 95       	asr	r25
 10a:	87 95       	ror	r24
 10c:	0a 94       	dec	r0
 10e:	e2 f7       	brpl	.-8      	; 0x108 <KPAD_GET_CHAR+0x7c>
 110:	89 2b       	or	r24, r25
 112:	a1 f3       	breq	.-24     	; 0xfc <KPAD_GET_CHAR+0x70>
				 switch(i)
 114:	61 30       	cpi	r22, 0x01	; 1
 116:	71 05       	cpc	r23, r1
 118:	c9 f0       	breq	.+50     	; 0x14c <KPAD_GET_CHAR+0xc0>
 11a:	24 f4       	brge	.+8      	; 0x124 <KPAD_GET_CHAR+0x98>
 11c:	61 15       	cp	r22, r1
 11e:	71 05       	cpc	r23, r1
 120:	41 f0       	breq	.+16     	; 0x132 <KPAD_GET_CHAR+0xa6>
 122:	3a c0       	rjmp	.+116    	; 0x198 <KPAD_GET_CHAR+0x10c>
 124:	62 30       	cpi	r22, 0x02	; 2
 126:	71 05       	cpc	r23, r1
 128:	f1 f0       	breq	.+60     	; 0x166 <KPAD_GET_CHAR+0xda>
 12a:	63 30       	cpi	r22, 0x03	; 3
 12c:	71 05       	cpc	r23, r1
 12e:	41 f1       	breq	.+80     	; 0x180 <KPAD_GET_CHAR+0xf4>
 130:	33 c0       	rjmp	.+102    	; 0x198 <KPAD_GET_CHAR+0x10c>
				 {
					 //====================================
					 case 0:
					 if(j==0)
 132:	21 15       	cp	r18, r1
 134:	31 05       	cpc	r19, r1
 136:	f1 f1       	breq	.+124    	; 0x1b4 <KPAD_GET_CHAR+0x128>
					 return '7';
					 else if(j==1)
 138:	21 30       	cpi	r18, 0x01	; 1
 13a:	31 05       	cpc	r19, r1
 13c:	e9 f1       	breq	.+122    	; 0x1b8 <KPAD_GET_CHAR+0x12c>
					 return '4';
					 else if(j==2)
 13e:	22 30       	cpi	r18, 0x02	; 2
 140:	31 05       	cpc	r19, r1
 142:	e1 f1       	breq	.+120    	; 0x1bc <KPAD_GET_CHAR+0x130>
					 return '1';
					 else if(j==3)
 144:	23 30       	cpi	r18, 0x03	; 3
 146:	31 05       	cpc	r19, r1
 148:	39 f5       	brne	.+78     	; 0x198 <KPAD_GET_CHAR+0x10c>
 14a:	3a c0       	rjmp	.+116    	; 0x1c0 <KPAD_GET_CHAR+0x134>
					 return '!';
					 break;
					 //======================================
					 case 1:
					 if(j==0)
 14c:	21 15       	cp	r18, r1
 14e:	31 05       	cpc	r19, r1
 150:	c9 f1       	breq	.+114    	; 0x1c4 <KPAD_GET_CHAR+0x138>
					 return '8';
					 else if(j==1)
 152:	21 30       	cpi	r18, 0x01	; 1
 154:	31 05       	cpc	r19, r1
 156:	c1 f1       	breq	.+112    	; 0x1c8 <KPAD_GET_CHAR+0x13c>
					 return '5';
					 else if(j==2)
 158:	22 30       	cpi	r18, 0x02	; 2
 15a:	31 05       	cpc	r19, r1
 15c:	b9 f1       	breq	.+110    	; 0x1cc <KPAD_GET_CHAR+0x140>
					 return '2';
					 else if(j==3)
 15e:	23 30       	cpi	r18, 0x03	; 3
 160:	31 05       	cpc	r19, r1
 162:	d1 f4       	brne	.+52     	; 0x198 <KPAD_GET_CHAR+0x10c>
 164:	35 c0       	rjmp	.+106    	; 0x1d0 <KPAD_GET_CHAR+0x144>
					 return '0';
					 break;
					 //========================================
					 case 2:
					 if(j==0)
 166:	21 15       	cp	r18, r1
 168:	31 05       	cpc	r19, r1
 16a:	a1 f1       	breq	.+104    	; 0x1d4 <KPAD_GET_CHAR+0x148>
					 return '9';
					 else if(j==1)
 16c:	21 30       	cpi	r18, 0x01	; 1
 16e:	31 05       	cpc	r19, r1
 170:	99 f1       	breq	.+102    	; 0x1d8 <KPAD_GET_CHAR+0x14c>
					 return '6';
					 else if(j==2)
 172:	22 30       	cpi	r18, 0x02	; 2
 174:	31 05       	cpc	r19, r1
 176:	91 f1       	breq	.+100    	; 0x1dc <KPAD_GET_CHAR+0x150>
					 return '3';
					 else if(j==3)
 178:	23 30       	cpi	r18, 0x03	; 3
 17a:	31 05       	cpc	r19, r1
 17c:	69 f4       	brne	.+26     	; 0x198 <KPAD_GET_CHAR+0x10c>
 17e:	30 c0       	rjmp	.+96     	; 0x1e0 <KPAD_GET_CHAR+0x154>
					 return '=';
					 break;
					 //=======================================
					 case 3:
					 if(j==0)
 180:	21 15       	cp	r18, r1
 182:	31 05       	cpc	r19, r1
 184:	79 f1       	breq	.+94     	; 0x1e4 <KPAD_GET_CHAR+0x158>
					 return '/';
					 else if(j==1)
 186:	21 30       	cpi	r18, 0x01	; 1
 188:	31 05       	cpc	r19, r1
 18a:	71 f1       	breq	.+92     	; 0x1e8 <KPAD_GET_CHAR+0x15c>
					 return '*';
					 else if(j==2)
 18c:	22 30       	cpi	r18, 0x02	; 2
 18e:	31 05       	cpc	r19, r1
 190:	69 f1       	breq	.+90     	; 0x1ec <KPAD_GET_CHAR+0x160>
					 return '-';
					 else if(j==3)
 192:	23 30       	cpi	r18, 0x03	; 3
 194:	31 05       	cpc	r19, r1
 196:	61 f1       	breq	.+88     	; 0x1f0 <KPAD_GET_CHAR+0x164>
		SET_BIT(KPAD_PORT_VALUE,C0);
		SET_BIT(KPAD_PORT_VALUE,C1);
        SET_BIT(KPAD_PORT_VALUE,C2);
		SET_BIT(KPAD_PORT_VALUE,C3);
		RESET_BIT(KPAD_PORT_VALUE,KPAD_C[i]);
		for(int j = 0; j<4; j++)
 198:	2f 5f       	subi	r18, 0xFF	; 255
 19a:	3f 4f       	sbci	r19, 0xFF	; 255
 19c:	24 30       	cpi	r18, 0x04	; 4
 19e:	31 05       	cpc	r19, r1
 1a0:	0c f4       	brge	.+2      	; 0x1a4 <KPAD_GET_CHAR+0x118>
 1a2:	97 cf       	rjmp	.-210    	; 0xd2 <KPAD_GET_CHAR+0x46>
}


char KPAD_GET_CHAR()
{
	for(int i = 0; i<4; i++)//col
 1a4:	6f 5f       	subi	r22, 0xFF	; 255
 1a6:	7f 4f       	sbci	r23, 0xFF	; 255
 1a8:	64 30       	cpi	r22, 0x04	; 4
 1aa:	71 05       	cpc	r23, r1
 1ac:	0c f4       	brge	.+2      	; 0x1b0 <KPAD_GET_CHAR+0x124>
 1ae:	71 cf       	rjmp	.-286    	; 0x92 <KPAD_GET_CHAR+0x6>
					 break;
				 }
			 }
		 }
	 }
	 return 'N';
 1b0:	8e e4       	ldi	r24, 0x4E	; 78
 1b2:	08 95       	ret
				 switch(i)
				 {
					 //====================================
					 case 0:
					 if(j==0)
					 return '7';
 1b4:	87 e3       	ldi	r24, 0x37	; 55
 1b6:	08 95       	ret
					 else if(j==1)
					 return '4';
 1b8:	84 e3       	ldi	r24, 0x34	; 52
 1ba:	08 95       	ret
					 else if(j==2)
					 return '1';
 1bc:	81 e3       	ldi	r24, 0x31	; 49
 1be:	08 95       	ret
					 else if(j==3)
					 return '!';
 1c0:	81 e2       	ldi	r24, 0x21	; 33
 1c2:	08 95       	ret
					 break;
					 //======================================
					 case 1:
					 if(j==0)
					 return '8';
 1c4:	88 e3       	ldi	r24, 0x38	; 56
 1c6:	08 95       	ret
					 else if(j==1)
					 return '5';
 1c8:	85 e3       	ldi	r24, 0x35	; 53
 1ca:	08 95       	ret
					 else if(j==2)
					 return '2';
 1cc:	82 e3       	ldi	r24, 0x32	; 50
 1ce:	08 95       	ret
					 else if(j==3)
					 return '0';
 1d0:	80 e3       	ldi	r24, 0x30	; 48
 1d2:	08 95       	ret
					 break;
					 //========================================
					 case 2:
					 if(j==0)
					 return '9';
 1d4:	89 e3       	ldi	r24, 0x39	; 57
 1d6:	08 95       	ret
					 else if(j==1)
					 return '6';
 1d8:	86 e3       	ldi	r24, 0x36	; 54
 1da:	08 95       	ret
					 else if(j==2)
					 return '3';
 1dc:	83 e3       	ldi	r24, 0x33	; 51
 1de:	08 95       	ret
					 else if(j==3)
					 return '=';
 1e0:	8d e3       	ldi	r24, 0x3D	; 61
 1e2:	08 95       	ret
					 break;
					 //=======================================
					 case 3:
					 if(j==0)
					 return '/';
 1e4:	8f e2       	ldi	r24, 0x2F	; 47
 1e6:	08 95       	ret
					 else if(j==1)
					 return '*';
 1e8:	8a e2       	ldi	r24, 0x2A	; 42
 1ea:	08 95       	ret
					 else if(j==2)
					 return '-';
 1ec:	8d e2       	ldi	r24, 0x2D	; 45
 1ee:	08 95       	ret
					 else if(j==3)
					 return '+';
 1f0:	8b e2       	ldi	r24, 0x2B	; 43
				 }
			 }
		 }
	 }
	 return 'N';
 1f2:	08 95       	ret

000001f4 <ENABLE_PULSE>:
	SET_BIT(LCD_CTRL_PORT_VALUE,RW);
	ENABLE_PULSE();
	
	/*Make PORTA as an output*/
	#if ACTIVE_MODE == EIGHT_BIT_MODE
	LCD_PORT_DIRECTION = 0xFF;
 1f4:	88 b3       	in	r24, 0x18	; 24
 1f6:	87 7f       	andi	r24, 0xF7	; 247
 1f8:	88 bb       	out	0x18, r24	; 24
 1fa:	2f e7       	ldi	r18, 0x7F	; 127
 1fc:	88 e3       	ldi	r24, 0x38	; 56
 1fe:	91 e0       	ldi	r25, 0x01	; 1
 200:	21 50       	subi	r18, 0x01	; 1
 202:	80 40       	sbci	r24, 0x00	; 0
 204:	90 40       	sbci	r25, 0x00	; 0
 206:	e1 f7       	brne	.-8      	; 0x200 <ENABLE_PULSE+0xc>
 208:	00 c0       	rjmp	.+0      	; 0x20a <ENABLE_PULSE+0x16>
 20a:	00 00       	nop
 20c:	88 b3       	in	r24, 0x18	; 24
 20e:	88 60       	ori	r24, 0x08	; 8
 210:	88 bb       	out	0x18, r24	; 24
 212:	08 95       	ret

00000214 <LCD_Send_Command>:
	//LCD_Busy();
	
	/*RESET RS and RW*/
	//RS = 0 ---> to take Instruction 
	//RW = 0 ---> to write on screen, choose 0 not 1 because we don't need Read any data from LCD poat 
	RESET_BIT(LCD_CTRL_PORT_VALUE,RW);
 214:	98 b3       	in	r25, 0x18	; 24
 216:	9b 7f       	andi	r25, 0xFB	; 251
 218:	98 bb       	out	0x18, r25	; 24
	RESET_BIT(LCD_CTRL_PORT_VALUE,RS);
 21a:	98 b3       	in	r25, 0x18	; 24
 21c:	9d 7f       	andi	r25, 0xFD	; 253
 21e:	98 bb       	out	0x18, r25	; 24
	
	/*set LCD PORT = COMMAND*/
	#if ACTIVE_MODE == EIGHT_BIT_MODE	
	LCD_PORT_VALUE = command;
 220:	8b bb       	out	0x1b, r24	; 27
	ENABLE_PULSE();
 222:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <ENABLE_PULSE>
 226:	08 95       	ret

00000228 <LCD_Clear_Screen>:
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_Clear_Screen()
{
	/*Clear return counter to zero*/
	LCD_Send_Command(LCD_CLEAR_SCREEN);
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_Send_Command>
 22e:	08 95       	ret

00000230 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 230:	8f e3       	ldi	r24, 0x3F	; 63
 232:	9c e9       	ldi	r25, 0x9C	; 156
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_Init+0x4>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_Init+0xa>
 23a:	00 00       	nop
	/*Make delay as there is in TRM in pages 45 and 46*/ 
	_delay_ms(20);
	
	/*INITTIALIZE LCD TO CLEAR SCREEN, LOOK AT TRM IN PAGES 8 AND 28*/
	/*Make ENABLE, RS AND RW AS OUTPUT AND GIVE THEM ZERO VALUE*/
	LCD_CTRL_PORT_DIRECTION |=  ((1 << RS) | (1 << RW) | (1 << ENABLE));   //Set all CTRL bits as output
 23c:	87 b3       	in	r24, 0x17	; 23
 23e:	8e 60       	ori	r24, 0x0E	; 14
 240:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL_PORT_VALUE     &= ~((1 << RS) | (1 << RW) | (1 << ENABLE));  //Give them zero value
 242:	88 b3       	in	r24, 0x18	; 24
 244:	81 7f       	andi	r24, 0xF1	; 241
 246:	88 bb       	out	0x18, r24	; 24
 248:	8f e2       	ldi	r24, 0x2F	; 47
 24a:	95 e7       	ldi	r25, 0x75	; 117
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCD_Init+0x1c>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCD_Init+0x22>
 252:	00 00       	nop
	
	_delay_ms(15);

	#if ACTIVE_MODE == EIGHT_BIT_MODE
	LCD_PORT_DIRECTION = 0xff; //Set all LCD PORT "PORTA" as an output
 254:	8f ef       	ldi	r24, 0xFF	; 255
 256:	8a bb       	out	0x1a, r24	; 26
	LCD_Clear_Screen();
 258:	0e 94 14 01 	call	0x228	; 0x228 <LCD_Clear_Screen>
	LCD_Send_Command(LCD_MOVE_CURSOR_TO_THE_HOME_POSITION);
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_Send_Command>
	LCD_Send_Command(LCD_FUNCTION_8BIT_2LINES);
 262:	88 e3       	ldi	r24, 0x38	; 56
 264:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_Send_Command>
	LCD_Clear_Screen();
	LCD_Send_Command(LCD_MOVE_CURSOR_TO_THE_HOME_POSITION);
	LCD_Send_Command(LCD_FUNCTION_4BIT_2LINES);
	#endif
	
	LCD_Send_Command(LCD_ENTRY_MODE);         
 268:	86 e0       	ldi	r24, 0x06	; 6
 26a:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_Send_Command>
	LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW);     
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_Send_Command>
	LCD_Send_Command(LCD_DISP_ON_CURSOR_BLINK);   
 274:	8f e0       	ldi	r24, 0x0F	; 15
 276:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_Send_Command>
 27a:	08 95       	ret

0000027c <LCD_Send_Char>:
void LCD_Send_Char(uint8 data)
{
	/*Check Busy*/
	//LCD_Busy();
	
	RESET_BIT(LCD_CTRL_PORT_VALUE,RW);	
 27c:	98 b3       	in	r25, 0x18	; 24
 27e:	9b 7f       	andi	r25, 0xFB	; 251
 280:	98 bb       	out	0x18, r25	; 24
    SET_BIT(LCD_CTRL_PORT_VALUE,RS);
 282:	98 b3       	in	r25, 0x18	; 24
 284:	92 60       	ori	r25, 0x02	; 2
 286:	98 bb       	out	0x18, r25	; 24

	/*set LCD PORT = data*/
	#if ACTIVE_MODE == EIGHT_BIT_MODE
	LCD_PORT_VALUE = data;
 288:	8b bb       	out	0x1b, r24	; 27
	ENABLE_PULSE();
 28a:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <ENABLE_PULSE>
 28e:	08 95       	ret

00000290 <LCD_Cursor_XY>:
	}
}
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void LCD_Cursor_XY(uint8 line, uint8 col)
{
	if(line == 0)
 290:	81 11       	cpse	r24, r1
 292:	07 c0       	rjmp	.+14     	; 0x2a2 <LCD_Cursor_XY+0x12>
	{
		if(col < 16 && col >=0)
 294:	60 31       	cpi	r22, 0x10	; 16
 296:	68 f4       	brcc	.+26     	; 0x2b2 <LCD_Cursor_XY+0x22>
			LCD_Send_Command(LCD_BEGIN_AT_FIRST_ROW + col);
 298:	80 e8       	ldi	r24, 0x80	; 128
 29a:	86 0f       	add	r24, r22
 29c:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_Send_Command>
 2a0:	08 95       	ret
	}
	else if(line == 1)
 2a2:	81 30       	cpi	r24, 0x01	; 1
 2a4:	31 f4       	brne	.+12     	; 0x2b2 <LCD_Cursor_XY+0x22>
	{
		if(col < 16 && col >=0)
 2a6:	60 31       	cpi	r22, 0x10	; 16
 2a8:	20 f4       	brcc	.+8      	; 0x2b2 <LCD_Cursor_XY+0x22>
			LCD_Send_Command(LCD_BEGIN_AT_SECOND_ROW + col);
 2aa:	80 ec       	ldi	r24, 0xC0	; 192
 2ac:	86 0f       	add	r24, r22
 2ae:	0e 94 0a 01 	call	0x214	; 0x214 <LCD_Send_Command>
 2b2:	08 95       	ret

000002b4 <main>:
#include "LCD/lcd.h"
#include "KPAD/kpad.h"

int main(void)
{
	LCD_Init();
 2b4:	0e 94 18 01 	call	0x230	; 0x230 <LCD_Init>
	int counter = 0;
	//LCD_Send_String("Abdullah Mohamed Nada shabaan");
	//LCD_display_number(12891);
	KPAD_INIT();
 2b8:	0e 94 41 00 	call	0x82	; 0x82 <KPAD_INIT>
#include "KPAD/kpad.h"

int main(void)
{
	LCD_Init();
	int counter = 0;
 2bc:	c0 e0       	ldi	r28, 0x00	; 0
 2be:	d0 e0       	ldi	r29, 0x00	; 0
	//LCD_Send_String("Abdullah Mohamed Nada shabaan");
	//LCD_display_number(12891);
	KPAD_INIT();
	while(1)
	{
		char pressed_key = KPAD_GET_CHAR();
 2c0:	0e 94 46 00 	call	0x8c	; 0x8c <KPAD_GET_CHAR>
		switch(pressed_key)
 2c4:	81 32       	cpi	r24, 0x21	; 33
 2c6:	19 f0       	breq	.+6      	; 0x2ce <main+0x1a>
 2c8:	8e 34       	cpi	r24, 0x4E	; 78
 2ca:	d1 f3       	breq	.-12     	; 0x2c0 <main+0xc>
 2cc:	03 c0       	rjmp	.+6      	; 0x2d4 <main+0x20>
		{
			case '!':
			LCD_Clear_Screen();
 2ce:	0e 94 14 01 	call	0x228	; 0x228 <LCD_Clear_Screen>
			break;
 2d2:	f6 cf       	rjmp	.-20     	; 0x2c0 <main+0xc>
			case 'N':
			break;
			default:
			{
				LCD_Send_Char(pressed_key);
 2d4:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_Send_Char>
				counter++;
 2d8:	21 96       	adiw	r28, 0x01	; 1
				if(counter == 16)
 2da:	c0 31       	cpi	r28, 0x10	; 16
 2dc:	d1 05       	cpc	r29, r1
 2de:	21 f4       	brne	.+8      	; 0x2e8 <main+0x34>
					LCD_Cursor_XY(1,0);
 2e0:	60 e0       	ldi	r22, 0x00	; 0
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Cursor_XY>
				if(counter == 33)
 2e8:	c1 32       	cpi	r28, 0x21	; 33
 2ea:	d1 05       	cpc	r29, r1
 2ec:	49 f7       	brne	.-46     	; 0x2c0 <main+0xc>
				{
					LCD_Clear_Screen();
 2ee:	0e 94 14 01 	call	0x228	; 0x228 <LCD_Clear_Screen>
					LCD_Cursor_XY(0,0);
 2f2:	60 e0       	ldi	r22, 0x00	; 0
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 48 01 	call	0x290	; 0x290 <LCD_Cursor_XY>
					counter = 0;
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
 2fc:	d0 e0       	ldi	r29, 0x00	; 0
 2fe:	e0 cf       	rjmp	.-64     	; 0x2c0 <main+0xc>

00000300 <_exit>:
 300:	f8 94       	cli

00000302 <__stop_program>:
 302:	ff cf       	rjmp	.-2      	; 0x302 <__stop_program>
